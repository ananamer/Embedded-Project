
Project-Temprature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cdc  08013750  08013750  00023750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801442c  0801442c  0003021c  2**0
                  CONTENTS
  4 .ARM          00000008  0801442c  0801442c  0002442c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014434  08014434  0003021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08014434  08014434  00024434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08014440  08014440  00024440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0801444c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032f4  20000220  08014668  00030220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003514  08014668  00033514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030c9c  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070fa  00000000  00000000  00060ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002718  00000000  00000000  00067fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002470  00000000  00000000  0006a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030494  00000000  00000000  0006cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030114  00000000  00000000  0009d004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b053  00000000  00000000  000cd118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d816b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bb20  00000000  00000000  001d81bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013738 	.word	0x08013738

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	08013738 	.word	0x08013738

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <_ZN3BUZC1E9_buzState>:

BUZ::BUZ() {
	// TODO Auto-generated constructor stub

}
BUZ::BUZ(BUZ_STATE state)
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <_ZN3BUZC1E9_buzState+0x2c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	711a      	strb	r2, [r3, #4]
{
	State = state;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	78fa      	ldrb	r2, [r7, #3]
 8000ee8:	711a      	strb	r2, [r3, #4]
}
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	08013ccc 	.word	0x08013ccc

08000efc <_ZN3BUZD1Ev>:

BUZ::~BUZ() {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <_ZN3BUZD1Ev+0x1c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	08013ccc 	.word	0x08013ccc

08000f1c <_ZN3BUZD0Ev>:
BUZ::~BUZ() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
}
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffe9 	bl	8000efc <_ZN3BUZD1Ev>
 8000f2a:	2108      	movs	r1, #8
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f00e fc65 	bl	800f7fc <_ZdlPvj>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_ZN3BUZ9buzzStartEv>:

void BUZ::buzzStart()
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	State = BUZ_ON;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	711a      	strb	r2, [r3, #4]
	HAL_TIM_Base_Start(&htim3);
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <_ZN3BUZ9buzzStartEv+0x24>)
 8000f4c:	f006 f882 	bl	8007054 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f50:	2100      	movs	r1, #0
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <_ZN3BUZ9buzzStartEv+0x24>)
 8000f54:	f006 f964 	bl	8007220 <HAL_TIM_PWM_Start>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	2000069c 	.word	0x2000069c

08000f64 <_ZN3BUZ8buzzStopEv>:

void BUZ::buzzStop()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	State = BUZ_OFF;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	711a      	strb	r2, [r3, #4]
	HAL_TIM_Base_Stop(&htim3);
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <_ZN3BUZ8buzzStopEv+0x24>)
 8000f74:	f006 f8d6 	bl	8007124 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4803      	ldr	r0, [pc, #12]	; (8000f88 <_ZN3BUZ8buzzStopEv+0x24>)
 8000f7c:	f006 fa56 	bl	800742c <HAL_TIM_PWM_Stop>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000069c 	.word	0x2000069c

08000f8c <_ZN6ButtonD1Ev>:


Button::Button() {
	// TODO Auto-generated constructor stub
}
Button::~Button() {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <_ZN6ButtonD1Ev+0x1c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	08013cdc 	.word	0x08013cdc

08000fac <_ZN6ButtonD0Ev>:
Button::~Button() {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
}
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ffe9 	bl	8000f8c <_ZN6ButtonD1Ev>
 8000fba:	210c      	movs	r1, #12
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f00e fc1d 	bl	800f7fc <_ZdlPvj>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_ZN6ButtonC1EP12GPIO_TypeDeft>:
Button::Button(GPIO_TypeDef* gpiox, uint16_t gpio_pin)
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	80fb      	strh	r3, [r7, #6]
 8000fda:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <_ZN6ButtonC1EP12GPIO_TypeDeft+0x30>)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	601a      	str	r2, [r3, #0]
{
	GPIOx = gpiox;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	605a      	str	r2, [r3, #4]
	GPIO_Pin = gpio_pin;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	88fa      	ldrh	r2, [r7, #6]
 8000fea:	811a      	strh	r2, [r3, #8]
}
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	08013cdc 	.word	0x08013cdc

08001000 <_ZN3CLIC1Ev>:
extern char RecordsArr[50][100];

extern int numOfRecords;
int myGlobalVariable = 0;

CLI::CLI() {
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <_ZN3CLIC1Ev+0x24>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
	// TODO Auto-generated constructor stub
}
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	08013df0 	.word	0x08013df0

08001028 <_ZN3CLID1Ev>:

CLI::~CLI() {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <_ZN3CLID1Ev+0x1c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	08013df0 	.word	0x08013df0

08001048 <_ZN3CLID0Ev>:
CLI::~CLI() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
}
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ffe9 	bl	8001028 <_ZN3CLID1Ev>
 8001056:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f00e fbce 	bl	800f7fc <_ZdlPvj>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <_ZN8BuzOnCmdC1EP3BUZ>:

class BuzOnCmd : public CliCommand
{
	BUZ * _buz;
public:
	BuzOnCmd(BUZ * buz) : _buz(buz) {}
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fcfb 	bl	8001a74 <_ZN10CliCommandC1Ev>
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <_ZN8BuzOnCmdC1EP3BUZ+0x28>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08013ddc 	.word	0x08013ddc

08001098 <_ZN8BuzOnCmd9doCommandEPKc>:
	void doCommand(const char* param) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
		_buz->buzzStart();
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff48 	bl	8000f3c <_ZN3BUZ9buzzStartEv>
	}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_ZN9BuzOffCmdC1EP3BUZ>:
};
class BuzOffCmd : public CliCommand
{
	BUZ * _buz;
public:
	BuzOffCmd(BUZ * buz) : _buz(buz) {}
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fcd7 	bl	8001a74 <_ZN10CliCommandC1Ev>
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <_ZN9BuzOffCmdC1EP3BUZ+0x28>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	08013dc8 	.word	0x08013dc8

080010e0 <_ZN9BuzOffCmd9doCommandEPKc>:
	void doCommand(const char* param) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
		_buz->buzzStop();
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff38 	bl	8000f64 <_ZN3BUZ8buzzStopEv>
	}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_ZN8LedOnCmdC1EP3LED>:

class LedOnCmd : public CliCommand
{
	LED * _led;
public:
	LedOnCmd(LED * led) : _led(led) {}
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fcb3 	bl	8001a74 <_ZN10CliCommandC1Ev>
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <_ZN8LedOnCmdC1EP3LED+0x28>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	08013db4 	.word	0x08013db4

08001128 <_ZN8LedOnCmd9doCommandEPKc>:
	void doCommand(const char* param) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
		_led->LedOn();
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f850 	bl	80021dc <_ZN3LED5LedOnEv>
	}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <_ZN9LedOffCmdC1EP3LED>:

class LedOffCmd : public CliCommand
{
	LED * _led;
public:
	LedOffCmd(LED * led) : _led(led) {}
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fc8f 	bl	8001a74 <_ZN10CliCommandC1Ev>
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <_ZN9LedOffCmdC1EP3LED+0x28>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	08013da0 	.word	0x08013da0

08001170 <_ZN9LedOffCmd9doCommandEPKc>:
	void doCommand(const char* param) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
		_led->LedOFF();
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f83f 	bl	8002202 <_ZN3LED6LedOFFEv>
	}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_ZN11LedBlinkCmdC1EP3LED>:
};
class LedBlinkCmd : public CliCommand
{
	LED * _led;
public:
	LedBlinkCmd(LED * led) : _led(led) {}
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fc6b 	bl	8001a74 <_ZN10CliCommandC1Ev>
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_ZN11LedBlinkCmdC1EP3LED+0x28>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	08013d8c 	.word	0x08013d8c

080011b8 <_ZN11LedBlinkCmd9doCommandEPKc>:
	void doCommand(const char* param) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
		_led->LedBlink();
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 f82e 	bl	8002228 <_ZN3LED8LedBlinkEv>
	}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_ZN15LedStopBlinkCmdC1EP3LED>:
// LedStopBlinkCmd may not be used
class LedStopBlinkCmd : public CliCommand
{
	LED * _led;
public:
	LedStopBlinkCmd(LED * led) : _led(led) {}
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fc47 	bl	8001a74 <_ZN10CliCommandC1Ev>
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <_ZN15LedStopBlinkCmdC1EP3LED+0x28>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08013d78 	.word	0x08013d78

08001200 <_ZN15LedStopBlinkCmd9doCommandEPKc>:
	void doCommand(const char* param) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
		_led->LedStopBlink();
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f001 f81d 	bl	800224e <_ZN3LED12LedStopBlinkEv>
	}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_ZN7TempCmdC1EP3DHT>:
// TempCmd will read the temp from dht and print it
class TempCmd : public CliCommand
{
	DHT * _dht;
public:
	TempCmd(DHT * dht) : _dht(dht) {}
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fc23 	bl	8001a74 <_ZN10CliCommandC1Ev>
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_ZN7TempCmdC1EP3DHT+0x28>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	08013d64 	.word	0x08013d64

08001248 <_ZN7TempCmd9doCommandEPKc>:
	void doCommand(const char* param) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
//		_dht->Dht_readAsync();
		_dht->DHT_main();
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fdce 	bl	8001df8 <_ZN3DHT8DHT_mainEv>
	}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_ZN13SetWarningCmdC1EP5Flash>:
};
class SetWarningCmd : public CliCommand
{
	Flash * _thresholds;
public:
	SetWarningCmd(Flash * thresholds) : _thresholds(thresholds) {}
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fbff 	bl	8001a74 <_ZN10CliCommandC1Ev>
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <_ZN13SetWarningCmdC1EP5Flash+0x28>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	08013d50 	.word	0x08013d50

08001290 <_ZN13SetWarningCmd9doCommandEPKc>:
	void doCommand(const char* param) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]

	int value = atoi(param);
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f00f fa01 	bl	80106a2 <atoi>
 80012a0:	60f8      	str	r0, [r7, #12]
	_thresholds->setWarning(value);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68f9      	ldr	r1, [r7, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fea9 	bl	8002000 <_ZN5Flash10setWarningEi>
	}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <_ZN14SetCriticalCmdC1EP5Flash>:
};
class SetCriticalCmd : public CliCommand
{
	Flash * _thresholds;
public:
	SetCriticalCmd(Flash * thresholds) : _thresholds(thresholds) {}
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fbd5 	bl	8001a74 <_ZN10CliCommandC1Ev>
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <_ZN14SetCriticalCmdC1EP5Flash+0x28>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	08013d3c 	.word	0x08013d3c

080012e4 <_ZN14SetCriticalCmd9doCommandEPKc>:
	void doCommand(const char* param) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]

	int value = atoi(param);
 80012ee:	6838      	ldr	r0, [r7, #0]
 80012f0:	f00f f9d7 	bl	80106a2 <atoi>
 80012f4:	60f8      	str	r0, [r7, #12]
	_thresholds->setCritical(value);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	68f9      	ldr	r1, [r7, #12]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 febb 	bl	8002078 <_ZN5Flash11setCriticalEi>
	}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <_ZN18PrintThresholdsCmdC1EP5Flash>:
};
class PrintThresholdsCmd: public CliCommand
{
	Flash * _thresholds;
public:
	PrintThresholdsCmd(Flash * thresholds) : _thresholds(thresholds) {}
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fbab 	bl	8001a74 <_ZN10CliCommandC1Ev>
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <_ZN18PrintThresholdsCmdC1EP5Flash+0x28>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	08013d28 	.word	0x08013d28

08001338 <_ZN18PrintThresholdsCmd9doCommandEPKc>:
	void doCommand(const char* param) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]

	_thresholds->printThresHolds();
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fed2 	bl	80020f0 <_ZN5Flash15printThresHoldsEv>
	}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_ZN11PrintLogCmd9doCommandEPKc>:
	}
}
class PrintLogCmd: public CliCommand
{
public:
	void doCommand(const char* param) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
//		printRecords();
		LogSdCard->print("Log.txt");
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <_ZN11PrintLogCmd9doCommandEPKc+0x20>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4905      	ldr	r1, [pc, #20]	; (8001378 <_ZN11PrintLogCmd9doCommandEPKc+0x24>)
 8001364:	4618      	mov	r0, r3
 8001366:	f001 fbf1 	bl	8002b4c <_ZN6SdCard5printEPc>
	}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200003c0 	.word	0x200003c0
 8001378:	08013794 	.word	0x08013794

0800137c <_ZN11ClearLogCmd9doCommandEPKc>:
	}
}
class ClearLogCmd: public CliCommand
{
public:
	void doCommand(const char* param) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
//		clearRecords();
		LogSdCard->clear("Log.txt");
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <_ZN11ClearLogCmd9doCommandEPKc+0x20>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4905      	ldr	r1, [pc, #20]	; (80013a0 <_ZN11ClearLogCmd9doCommandEPKc+0x24>)
 800138c:	4618      	mov	r0, r3
 800138e:	f001 fc23 	bl	8002bd8 <_ZN6SdCard5clearEPc>
	}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200003c0 	.word	0x200003c0
 80013a0:	08013794 	.word	0x08013794

080013a4 <_ZN7HelpCmdC1EP3CLI>:
// HelpCmd will print the commands in the CLI
class HelpCmd : public CliCommand
{
	CLI * _cli;
public:
	HelpCmd(CLI * cli) : _cli(cli) {}
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fb5f 	bl	8001a74 <_ZN10CliCommandC1Ev>
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <_ZN7HelpCmdC1EP3CLI+0x28>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	08013cec 	.word	0x08013cec

080013d0 <_ZN7HelpCmd9doCommandEPKc>:
	void doCommand(const char* param) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
		_cli->printCommands();
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f864 	bl	80014ac <_ZN3CLI13printCommandsEv>
	}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>:
};
void CLI::registerCommand(const char * name, CliCommand * command)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
	if (commandsCount >= MAX_COMMANDS) {
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b31      	cmp	r3, #49	; 0x31
 80013fe:	dd03      	ble.n	8001408 <_ZN3CLI15registerCommandEPKcP10CliCommand+0x1c>
			printf("Too many commands, cannot register\r\n");
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <_ZN3CLI15registerCommandEPKcP10CliCommand+0x4c>)
 8001402:	f00f ff73 	bl	80112ec <puts>
			return;
 8001406:	e013      	b.n	8001430 <_ZN3CLI15registerCommandEPKcP10CliCommand+0x44>
		}

	container[commandsCount].name = name;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3201      	adds	r2, #1
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	container[commandsCount].command = command;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	605a      	str	r2, [r3, #4]
	commandsCount++;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	605a      	str	r2, [r3, #4]
}
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	080137a0 	.word	0x080137a0

0800143c <_ZN3CLI14performCommandEPcS0_>:
void CLI::performCommand(char* cmd, char * param){
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < commandsCount; i++) {
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	429a      	cmp	r2, r3
 8001454:	da21      	bge.n	800149a <_ZN3CLI14performCommandEPcS0_+0x5e>
		if (strcmp(container[i].name, (char *)cmd) == 0) {
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	3201      	adds	r2, #1
 800145c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe feb4 	bl	80001d0 <strcmp>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d111      	bne.n	8001492 <_ZN3CLI14performCommandEPcS0_+0x56>
			container[i].command->doCommand(param);
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	6858      	ldr	r0, [r3, #4]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3301      	adds	r3, #1
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4413      	add	r3, r2
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3308      	adds	r3, #8
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4798      	blx	r3
			return;
 8001490:	e006      	b.n	80014a0 <_ZN3CLI14performCommandEPcS0_+0x64>
	for (int i = 0; i < commandsCount; i++) {
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e7d8      	b.n	800144c <_ZN3CLI14performCommandEPcS0_+0x10>
		}
	}
	printf("Invalid command\r\n");
 800149a:	4803      	ldr	r0, [pc, #12]	; (80014a8 <_ZN3CLI14performCommandEPcS0_+0x6c>)
 800149c:	f00f ff26 	bl	80112ec <puts>
}
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	080137c4 	.word	0x080137c4

080014ac <_ZN3CLI13printCommandsEv>:
void CLI::printCommands()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	printf("Available commands:\r\n");
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <_ZN3CLI13printCommandsEv+0x40>)
 80014b6:	f00f ff19 	bl	80112ec <puts>
	for (int i = 0; i < commandsCount; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	da0c      	bge.n	80014e2 <_ZN3CLI13printCommandsEv+0x36>
		printf("\t%s\r\n", container[i].name);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	3201      	adds	r2, #1
 80014ce:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4806      	ldr	r0, [pc, #24]	; (80014f0 <_ZN3CLI13printCommandsEv+0x44>)
 80014d6:	f00f fe83 	bl	80111e0 <iprintf>
	for (int i = 0; i < commandsCount; i++) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3301      	adds	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	e7ed      	b.n	80014be <_ZN3CLI13printCommandsEv+0x12>
	}
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	080137d8 	.word	0x080137d8
 80014f0:	080137f0 	.word	0x080137f0

080014f4 <_ZN11PrintLogCmdC1Ev>:
class PrintLogCmd: public CliCommand
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fab8 	bl	8001a74 <_ZN10CliCommandC1Ev>
 8001504:	4a03      	ldr	r2, [pc, #12]	; (8001514 <_ZN11PrintLogCmdC1Ev+0x20>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	08013d14 	.word	0x08013d14

08001518 <_ZN11ClearLogCmdC1Ev>:
class ClearLogCmd: public CliCommand
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	f000 faa6 	bl	8001a74 <_ZN10CliCommandC1Ev>
 8001528:	4a03      	ldr	r2, [pc, #12]	; (8001538 <_ZN11ClearLogCmdC1Ev+0x20>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	08013d00 	.word	0x08013d00

0800153c <_ZN3CLI7CliInitEv>:




void CLI::CliInit()
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

	registerCommand("redon", new LedOnCmd(&redLed));
 8001544:	2008      	movs	r0, #8
 8001546:	f00e f95b 	bl	800f800 <_Znwj>
 800154a:	4603      	mov	r3, r0
 800154c:	461c      	mov	r4, r3
 800154e:	495b      	ldr	r1, [pc, #364]	; (80016bc <_ZN3CLI7CliInitEv+0x180>)
 8001550:	4620      	mov	r0, r4
 8001552:	f7ff fdd3 	bl	80010fc <_ZN8LedOnCmdC1EP3LED>
 8001556:	4622      	mov	r2, r4
 8001558:	4959      	ldr	r1, [pc, #356]	; (80016c0 <_ZN3CLI7CliInitEv+0x184>)
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ff46 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>
	registerCommand("redoff", new LedOffCmd(&redLed));
 8001560:	2008      	movs	r0, #8
 8001562:	f00e f94d 	bl	800f800 <_Znwj>
 8001566:	4603      	mov	r3, r0
 8001568:	461c      	mov	r4, r3
 800156a:	4954      	ldr	r1, [pc, #336]	; (80016bc <_ZN3CLI7CliInitEv+0x180>)
 800156c:	4620      	mov	r0, r4
 800156e:	f7ff fde9 	bl	8001144 <_ZN9LedOffCmdC1EP3LED>
 8001572:	4622      	mov	r2, r4
 8001574:	4953      	ldr	r1, [pc, #332]	; (80016c4 <_ZN3CLI7CliInitEv+0x188>)
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff38 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>
	registerCommand("redblink", new LedBlinkCmd(&redLed));
 800157c:	2008      	movs	r0, #8
 800157e:	f00e f93f 	bl	800f800 <_Znwj>
 8001582:	4603      	mov	r3, r0
 8001584:	461c      	mov	r4, r3
 8001586:	494d      	ldr	r1, [pc, #308]	; (80016bc <_ZN3CLI7CliInitEv+0x180>)
 8001588:	4620      	mov	r0, r4
 800158a:	f7ff fdff 	bl	800118c <_ZN11LedBlinkCmdC1EP3LED>
 800158e:	4622      	mov	r2, r4
 8001590:	494d      	ldr	r1, [pc, #308]	; (80016c8 <_ZN3CLI7CliInitEv+0x18c>)
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff2a 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>
	registerCommand("redstop", new LedStopBlinkCmd(&redLed));
 8001598:	2008      	movs	r0, #8
 800159a:	f00e f931 	bl	800f800 <_Znwj>
 800159e:	4603      	mov	r3, r0
 80015a0:	461c      	mov	r4, r3
 80015a2:	4946      	ldr	r1, [pc, #280]	; (80016bc <_ZN3CLI7CliInitEv+0x180>)
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff fe15 	bl	80011d4 <_ZN15LedStopBlinkCmdC1EP3LED>
 80015aa:	4622      	mov	r2, r4
 80015ac:	4947      	ldr	r1, [pc, #284]	; (80016cc <_ZN3CLI7CliInitEv+0x190>)
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff1c 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>

	registerCommand("buzon", new BuzOnCmd(&buz));
 80015b4:	2008      	movs	r0, #8
 80015b6:	f00e f923 	bl	800f800 <_Znwj>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461c      	mov	r4, r3
 80015be:	4944      	ldr	r1, [pc, #272]	; (80016d0 <_ZN3CLI7CliInitEv+0x194>)
 80015c0:	4620      	mov	r0, r4
 80015c2:	f7ff fd53 	bl	800106c <_ZN8BuzOnCmdC1EP3BUZ>
 80015c6:	4622      	mov	r2, r4
 80015c8:	4942      	ldr	r1, [pc, #264]	; (80016d4 <_ZN3CLI7CliInitEv+0x198>)
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff0e 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>
	registerCommand("buzoff", new BuzOffCmd(&buz));
 80015d0:	2008      	movs	r0, #8
 80015d2:	f00e f915 	bl	800f800 <_Znwj>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461c      	mov	r4, r3
 80015da:	493d      	ldr	r1, [pc, #244]	; (80016d0 <_ZN3CLI7CliInitEv+0x194>)
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff fd69 	bl	80010b4 <_ZN9BuzOffCmdC1EP3BUZ>
 80015e2:	4622      	mov	r2, r4
 80015e4:	493c      	ldr	r1, [pc, #240]	; (80016d8 <_ZN3CLI7CliInitEv+0x19c>)
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ff00 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>

	registerCommand("temp", new TempCmd(&dht));
 80015ec:	2008      	movs	r0, #8
 80015ee:	f00e f907 	bl	800f800 <_Znwj>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461c      	mov	r4, r3
 80015f6:	4939      	ldr	r1, [pc, #228]	; (80016dc <_ZN3CLI7CliInitEv+0x1a0>)
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7ff fe0f 	bl	800121c <_ZN7TempCmdC1EP3DHT>
 80015fe:	4622      	mov	r2, r4
 8001600:	4937      	ldr	r1, [pc, #220]	; (80016e0 <_ZN3CLI7CliInitEv+0x1a4>)
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fef2 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>
	registerCommand("setW", new SetWarningCmd(&Thresholds));
 8001608:	2008      	movs	r0, #8
 800160a:	f00e f8f9 	bl	800f800 <_Znwj>
 800160e:	4603      	mov	r3, r0
 8001610:	461c      	mov	r4, r3
 8001612:	4934      	ldr	r1, [pc, #208]	; (80016e4 <_ZN3CLI7CliInitEv+0x1a8>)
 8001614:	4620      	mov	r0, r4
 8001616:	f7ff fe25 	bl	8001264 <_ZN13SetWarningCmdC1EP5Flash>
 800161a:	4622      	mov	r2, r4
 800161c:	4932      	ldr	r1, [pc, #200]	; (80016e8 <_ZN3CLI7CliInitEv+0x1ac>)
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fee4 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>
	registerCommand("setC", new SetCriticalCmd(&Thresholds));
 8001624:	2008      	movs	r0, #8
 8001626:	f00e f8eb 	bl	800f800 <_Znwj>
 800162a:	4603      	mov	r3, r0
 800162c:	461c      	mov	r4, r3
 800162e:	492d      	ldr	r1, [pc, #180]	; (80016e4 <_ZN3CLI7CliInitEv+0x1a8>)
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff fe41 	bl	80012b8 <_ZN14SetCriticalCmdC1EP5Flash>
 8001636:	4622      	mov	r2, r4
 8001638:	492c      	ldr	r1, [pc, #176]	; (80016ec <_ZN3CLI7CliInitEv+0x1b0>)
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fed6 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>
	registerCommand("thresholds", new PrintThresholdsCmd(&Thresholds));
 8001640:	2008      	movs	r0, #8
 8001642:	f00e f8dd 	bl	800f800 <_Znwj>
 8001646:	4603      	mov	r3, r0
 8001648:	461c      	mov	r4, r3
 800164a:	4926      	ldr	r1, [pc, #152]	; (80016e4 <_ZN3CLI7CliInitEv+0x1a8>)
 800164c:	4620      	mov	r0, r4
 800164e:	f7ff fe5d 	bl	800130c <_ZN18PrintThresholdsCmdC1EP5Flash>
 8001652:	4622      	mov	r2, r4
 8001654:	4926      	ldr	r1, [pc, #152]	; (80016f0 <_ZN3CLI7CliInitEv+0x1b4>)
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fec8 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>

	registerCommand("printLog", new PrintLogCmd());
 800165c:	2004      	movs	r0, #4
 800165e:	f00e f8cf 	bl	800f800 <_Znwj>
 8001662:	4603      	mov	r3, r0
 8001664:	461c      	mov	r4, r3
 8001666:	2300      	movs	r3, #0
 8001668:	6023      	str	r3, [r4, #0]
 800166a:	4620      	mov	r0, r4
 800166c:	f7ff ff42 	bl	80014f4 <_ZN11PrintLogCmdC1Ev>
 8001670:	4622      	mov	r2, r4
 8001672:	4920      	ldr	r1, [pc, #128]	; (80016f4 <_ZN3CLI7CliInitEv+0x1b8>)
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff feb9 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>
	registerCommand("clearLog", new ClearLogCmd());
 800167a:	2004      	movs	r0, #4
 800167c:	f00e f8c0 	bl	800f800 <_Znwj>
 8001680:	4603      	mov	r3, r0
 8001682:	461c      	mov	r4, r3
 8001684:	2300      	movs	r3, #0
 8001686:	6023      	str	r3, [r4, #0]
 8001688:	4620      	mov	r0, r4
 800168a:	f7ff ff45 	bl	8001518 <_ZN11ClearLogCmdC1Ev>
 800168e:	4622      	mov	r2, r4
 8001690:	4919      	ldr	r1, [pc, #100]	; (80016f8 <_ZN3CLI7CliInitEv+0x1bc>)
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff feaa 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>

	registerCommand("help", new HelpCmd(this));
 8001698:	2008      	movs	r0, #8
 800169a:	f00e f8b1 	bl	800f800 <_Znwj>
 800169e:	4603      	mov	r3, r0
 80016a0:	461c      	mov	r4, r3
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff fe7d 	bl	80013a4 <_ZN7HelpCmdC1EP3CLI>
 80016aa:	4622      	mov	r2, r4
 80016ac:	4913      	ldr	r1, [pc, #76]	; (80016fc <_ZN3CLI7CliInitEv+0x1c0>)
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fe9c 	bl	80013ec <_ZN3CLI15registerCommandEPKcP10CliCommand>

}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	20000370 	.word	0x20000370
 80016c0:	080137f8 	.word	0x080137f8
 80016c4:	08013800 	.word	0x08013800
 80016c8:	08013808 	.word	0x08013808
 80016cc:	08013814 	.word	0x08013814
 80016d0:	20000368 	.word	0x20000368
 80016d4:	0801381c 	.word	0x0801381c
 80016d8:	08013824 	.word	0x08013824
 80016dc:	20000398 	.word	0x20000398
 80016e0:	0801382c 	.word	0x0801382c
 80016e4:	200003c4 	.word	0x200003c4
 80016e8:	08013834 	.word	0x08013834
 80016ec:	0801383c 	.word	0x0801383c
 80016f0:	08013844 	.word	0x08013844
 80016f4:	08013850 	.word	0x08013850
 80016f8:	0801385c 	.word	0x0801385c
 80016fc:	08013868 	.word	0x08013868

08001700 <_ZN7HelpCmdD1Ev>:
class HelpCmd : public CliCommand
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	4a05      	ldr	r2, [pc, #20]	; (8001720 <_ZN7HelpCmdD1Ev+0x20>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f9bf 	bl	8001a94 <_ZN10CliCommandD1Ev>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	08013cec 	.word	0x08013cec

08001724 <_ZN7HelpCmdD0Ev>:
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ffe7 	bl	8001700 <_ZN7HelpCmdD1Ev>
 8001732:	2108      	movs	r1, #8
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f00e f861 	bl	800f7fc <_ZdlPvj>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <_ZN11ClearLogCmdD1Ev>:
class ClearLogCmd: public CliCommand
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_ZN11ClearLogCmdD1Ev+0x20>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f99d 	bl	8001a94 <_ZN10CliCommandD1Ev>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	08013d00 	.word	0x08013d00

08001768 <_ZN11ClearLogCmdD0Ev>:
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ffe7 	bl	8001744 <_ZN11ClearLogCmdD1Ev>
 8001776:	2104      	movs	r1, #4
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f00e f83f 	bl	800f7fc <_ZdlPvj>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZN11PrintLogCmdD1Ev>:
class PrintLogCmd: public CliCommand
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <_ZN11PrintLogCmdD1Ev+0x20>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	f000 f97b 	bl	8001a94 <_ZN10CliCommandD1Ev>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	08013d14 	.word	0x08013d14

080017ac <_ZN11PrintLogCmdD0Ev>:
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ffe7 	bl	8001788 <_ZN11PrintLogCmdD1Ev>
 80017ba:	2104      	movs	r1, #4
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f00e f81d 	bl	800f7fc <_ZdlPvj>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_ZN18PrintThresholdsCmdD1Ev>:
class PrintThresholdsCmd: public CliCommand
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	4a05      	ldr	r2, [pc, #20]	; (80017ec <_ZN18PrintThresholdsCmdD1Ev+0x20>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f959 	bl	8001a94 <_ZN10CliCommandD1Ev>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	08013d28 	.word	0x08013d28

080017f0 <_ZN18PrintThresholdsCmdD0Ev>:
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ffe7 	bl	80017cc <_ZN18PrintThresholdsCmdD1Ev>
 80017fe:	2108      	movs	r1, #8
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f00d fffb 	bl	800f7fc <_ZdlPvj>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_ZN14SetCriticalCmdD1Ev>:
class SetCriticalCmd : public CliCommand
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	4a05      	ldr	r2, [pc, #20]	; (8001830 <_ZN14SetCriticalCmdD1Ev+0x20>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f937 	bl	8001a94 <_ZN10CliCommandD1Ev>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	08013d3c 	.word	0x08013d3c

08001834 <_ZN14SetCriticalCmdD0Ev>:
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ffe7 	bl	8001810 <_ZN14SetCriticalCmdD1Ev>
 8001842:	2108      	movs	r1, #8
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f00d ffd9 	bl	800f7fc <_ZdlPvj>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_ZN13SetWarningCmdD1Ev>:
class SetWarningCmd : public CliCommand
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	4a05      	ldr	r2, [pc, #20]	; (8001874 <_ZN13SetWarningCmdD1Ev+0x20>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	f000 f915 	bl	8001a94 <_ZN10CliCommandD1Ev>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	08013d50 	.word	0x08013d50

08001878 <_ZN13SetWarningCmdD0Ev>:
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ffe7 	bl	8001854 <_ZN13SetWarningCmdD1Ev>
 8001886:	2108      	movs	r1, #8
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f00d ffb7 	bl	800f7fc <_ZdlPvj>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_ZN7TempCmdD1Ev>:
class TempCmd : public CliCommand
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <_ZN7TempCmdD1Ev+0x20>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f8f3 	bl	8001a94 <_ZN10CliCommandD1Ev>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	08013d64 	.word	0x08013d64

080018bc <_ZN7TempCmdD0Ev>:
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffe7 	bl	8001898 <_ZN7TempCmdD1Ev>
 80018ca:	2108      	movs	r1, #8
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f00d ff95 	bl	800f7fc <_ZdlPvj>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_ZN15LedStopBlinkCmdD1Ev>:
class LedStopBlinkCmd : public CliCommand
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	4a05      	ldr	r2, [pc, #20]	; (80018fc <_ZN15LedStopBlinkCmdD1Ev+0x20>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f8d1 	bl	8001a94 <_ZN10CliCommandD1Ev>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	08013d78 	.word	0x08013d78

08001900 <_ZN15LedStopBlinkCmdD0Ev>:
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ffe7 	bl	80018dc <_ZN15LedStopBlinkCmdD1Ev>
 800190e:	2108      	movs	r1, #8
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f00d ff73 	bl	800f7fc <_ZdlPvj>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_ZN11LedBlinkCmdD1Ev>:
class LedBlinkCmd : public CliCommand
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	4a05      	ldr	r2, [pc, #20]	; (8001940 <_ZN11LedBlinkCmdD1Ev+0x20>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 f8af 	bl	8001a94 <_ZN10CliCommandD1Ev>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	08013d8c 	.word	0x08013d8c

08001944 <_ZN11LedBlinkCmdD0Ev>:
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ffe7 	bl	8001920 <_ZN11LedBlinkCmdD1Ev>
 8001952:	2108      	movs	r1, #8
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f00d ff51 	bl	800f7fc <_ZdlPvj>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_ZN9LedOffCmdD1Ev>:
class LedOffCmd : public CliCommand
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_ZN9LedOffCmdD1Ev+0x20>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f88d 	bl	8001a94 <_ZN10CliCommandD1Ev>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	08013da0 	.word	0x08013da0

08001988 <_ZN9LedOffCmdD0Ev>:
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffe7 	bl	8001964 <_ZN9LedOffCmdD1Ev>
 8001996:	2108      	movs	r1, #8
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f00d ff2f 	bl	800f7fc <_ZdlPvj>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_ZN8LedOnCmdD1Ev>:
class LedOnCmd : public CliCommand
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <_ZN8LedOnCmdD1Ev+0x20>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f86b 	bl	8001a94 <_ZN10CliCommandD1Ev>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	08013db4 	.word	0x08013db4

080019cc <_ZN8LedOnCmdD0Ev>:
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ffe7 	bl	80019a8 <_ZN8LedOnCmdD1Ev>
 80019da:	2108      	movs	r1, #8
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f00d ff0d 	bl	800f7fc <_ZdlPvj>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN9BuzOffCmdD1Ev>:
class BuzOffCmd : public CliCommand
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <_ZN9BuzOffCmdD1Ev+0x20>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f849 	bl	8001a94 <_ZN10CliCommandD1Ev>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	08013dc8 	.word	0x08013dc8

08001a10 <_ZN9BuzOffCmdD0Ev>:
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffe7 	bl	80019ec <_ZN9BuzOffCmdD1Ev>
 8001a1e:	2108      	movs	r1, #8
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f00d feeb 	bl	800f7fc <_ZdlPvj>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_ZN8BuzOnCmdD1Ev>:
class BuzOnCmd : public CliCommand
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <_ZN8BuzOnCmdD1Ev+0x20>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f827 	bl	8001a94 <_ZN10CliCommandD1Ev>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	08013ddc 	.word	0x08013ddc

08001a54 <_ZN8BuzOnCmdD0Ev>:
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe7 	bl	8001a30 <_ZN8BuzOnCmdD1Ev>
 8001a62:	2108      	movs	r1, #8
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f00d fec9 	bl	800f7fc <_ZdlPvj>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZN10CliCommandC1Ev>:
#include "LED.h"

extern LED redLed;
extern LED bluLed;

CliCommand::CliCommand() {
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <_ZN10CliCommandC1Ev+0x1c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	08013e00 	.word	0x08013e00

08001a94 <_ZN10CliCommandD1Ev>:

CliCommand::~CliCommand() {
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <_ZN10CliCommandD1Ev+0x1c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	08013e00 	.word	0x08013e00

08001ab4 <_ZN3DHTD1Ev>:

DHT::DHT() {
	// TODO Auto-generated constructor stub

}
DHT::~DHT() {
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <_ZN3DHTD1Ev+0x1c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	08013e14 	.word	0x08013e14

08001ad4 <_ZN3DHTD0Ev>:
DHT::~DHT() {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
}
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ffe9 	bl	8001ab4 <_ZN3DHTD1Ev>
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f00d fe89 	bl	800f7fc <_ZdlPvj>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_ZN3DHTC1EP12GPIO_TypeDeft>:
DHT::DHT(GPIO_TypeDef* gpiox, uint16_t gpio_pin)
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	4613      	mov	r3, r2
 8001b00:	80fb      	strh	r3, [r7, #6]
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <_ZN3DHTC1EP12GPIO_TypeDeft+0x48>)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	601a      	str	r2, [r3, #0]
{
	GPIOx = gpiox;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	609a      	str	r2, [r3, #8]
	GPIO_Pin = gpio_pin;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	819a      	strh	r2, [r3, #12]
	state = AWAITING_RESPONSE_START;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	711a      	strb	r2, [r3, #4]
	counter = 0;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
	temperature = 0.0;
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	08013e14 	.word	0x08013e14

08001b40 <_ZN3DHT13calculateTempEi>:
int DHT::calculateTemp(int index)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
	int i , sum=0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
	int x = index;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
	for(i=0; i<8; i++ ){
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2b07      	cmp	r3, #7
 8001b5a:	dc1d      	bgt.n	8001b98 <_ZN3DHT13calculateTempEi+0x58>
		sum += ( dataBuff[x] *(int)( pow(2, 7-i) ) );
 8001b5c:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <_ZN3DHT13calculateTempEi+0x64>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	f000 f9ad 	bl	8001ecc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b72:	ec53 2b10 	vmov	r2, r3, d0
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7fe fffd 	bl	8000b78 <__aeabi_d2iz>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	fb04 f303 	mul.w	r3, r4, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4413      	add	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
		x++;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
	for(i=0; i<8; i++ ){
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e7de      	b.n	8001b56 <_ZN3DHT13calculateTempEi+0x16>
	}
	return sum;
 8001b98:	693b      	ldr	r3, [r7, #16]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000250 	.word	0x20000250

08001ba8 <_ZN3DHT4waitEm>:
void DHT::wait(uint32_t _time)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
	uint32_t ms_time ;
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <_ZN3DHT4waitEm+0x30>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
	while(1){
		ms_time = __HAL_TIM_GET_COUNTER(&htim7);
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <_ZN3DHT4waitEm+0x30>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	60fb      	str	r3, [r7, #12]
		if(ms_time >= _time){
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d200      	bcs.n	8001bcc <_ZN3DHT4waitEm+0x24>
		ms_time = __HAL_TIM_GET_COUNTER(&htim7);
 8001bca:	e7f6      	b.n	8001bba <_ZN3DHT4waitEm+0x12>
			return;
 8001bcc:	bf00      	nop
		}
	}
}
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	20000734 	.word	0x20000734

08001bdc <_ZN3DHT13calculateTimeEm>:
int DHT::calculateTime(uint32_t _time)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	return _time > 50;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b32      	cmp	r3, #50	; 0x32
 8001bea:	bf8c      	ite	hi
 8001bec:	2301      	movhi	r3, #1
 8001bee:	2300      	movls	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <_ZN3DHT18startCommunicationEv>:
void DHT::startCommunication()
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	899b      	ldrh	r3, [r3, #12]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <_ZN3DHT18startCommunicationEv+0x120>)
 8001c10:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	4b43      	ldr	r3, [pc, #268]	; (8001d20 <_ZN3DHT18startCommunicationEv+0x120>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <_ZN3DHT18startCommunicationEv+0x120>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	4940      	ldr	r1, [pc, #256]	; (8001d20 <_ZN3DHT18startCommunicationEv+0x120>)
 8001c20:	4840      	ldr	r0, [pc, #256]	; (8001d24 <_ZN3DHT18startCommunicationEv+0x124>)
 8001c22:	f002 fbe5 	bl	80043f0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET );
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6898      	ldr	r0, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	899b      	ldrh	r3, [r3, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	4619      	mov	r1, r3
 8001c32:	f002 fd9f 	bl	8004774 <HAL_GPIO_WritePin>
	wait(20000);
 8001c36:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffb4 	bl	8001ba8 <_ZN3DHT4waitEm>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET );
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6898      	ldr	r0, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	899b      	ldrh	r3, [r3, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f002 fd92 	bl	8004774 <HAL_GPIO_WritePin>
	//wait(40);

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c50:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <_ZN3DHT18startCommunicationEv+0x120>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c56:	4932      	ldr	r1, [pc, #200]	; (8001d20 <_ZN3DHT18startCommunicationEv+0x120>)
 8001c58:	4832      	ldr	r0, [pc, #200]	; (8001d24 <_ZN3DHT18startCommunicationEv+0x124>)
 8001c5a:	f002 fbc9 	bl	80043f0 <HAL_GPIO_Init>

	uint32_t _time;
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 8001c5e:	4b32      	ldr	r3, [pc, #200]	; (8001d28 <_ZN3DHT18startCommunicationEv+0x128>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1){
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	899b      	ldrh	r3, [r3, #12]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4610      	mov	r0, r2
 8001c72:	f002 fd67 	bl	8004744 <HAL_GPIO_ReadPin>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00a      	beq.n	8001c9c <_ZN3DHT18startCommunicationEv+0x9c>
		_time = __HAL_TIM_GET_COUNTER(&htim7);
 8001c86:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <_ZN3DHT18startCommunicationEv+0x128>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	60fb      	str	r3, [r7, #12]
		if(_time > 100){
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b64      	cmp	r3, #100	; 0x64
 8001c92:	d9e8      	bls.n	8001c66 <_ZN3DHT18startCommunicationEv+0x66>
			printf("\r\n TIMEOUT1\r\n");
 8001c94:	4825      	ldr	r0, [pc, #148]	; (8001d2c <_ZN3DHT18startCommunicationEv+0x12c>)
 8001c96:	f00f fb29 	bl	80112ec <puts>
			return;
 8001c9a:	e03e      	b.n	8001d1a <_ZN3DHT18startCommunicationEv+0x11a>
		}
	}

	__HAL_TIM_SET_COUNTER(&htim7, 0);
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <_ZN3DHT18startCommunicationEv+0x128>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0){
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	899b      	ldrh	r3, [r3, #12]
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f002 fd48 	bl	8004744 <HAL_GPIO_ReadPin>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bf0c      	ite	eq
 8001cba:	2301      	moveq	r3, #1
 8001cbc:	2300      	movne	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00a      	beq.n	8001cda <_ZN3DHT18startCommunicationEv+0xda>
		_time = __HAL_TIM_GET_COUNTER(&htim7);
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <_ZN3DHT18startCommunicationEv+0x128>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	60fb      	str	r3, [r7, #12]
			if(_time > 100){
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d9e8      	bls.n	8001ca4 <_ZN3DHT18startCommunicationEv+0xa4>
				printf("\r\n TIMEOUT2");
 8001cd2:	4817      	ldr	r0, [pc, #92]	; (8001d30 <_ZN3DHT18startCommunicationEv+0x130>)
 8001cd4:	f00f fa84 	bl	80111e0 <iprintf>
				return;
 8001cd8:	e01f      	b.n	8001d1a <_ZN3DHT18startCommunicationEv+0x11a>
			}
	}

	__HAL_TIM_SET_COUNTER(&htim7, 0);
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <_ZN3DHT18startCommunicationEv+0x128>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1){
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	899b      	ldrh	r3, [r3, #12]
 8001cea:	4619      	mov	r1, r3
 8001cec:	4610      	mov	r0, r2
 8001cee:	f002 fd29 	bl	8004744 <HAL_GPIO_ReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <_ZN3DHT18startCommunicationEv+0x118>
		_time = __HAL_TIM_GET_COUNTER(&htim7);
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <_ZN3DHT18startCommunicationEv+0x128>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	60fb      	str	r3, [r7, #12]
			if(_time > 100){
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b64      	cmp	r3, #100	; 0x64
 8001d0e:	d9e8      	bls.n	8001ce2 <_ZN3DHT18startCommunicationEv+0xe2>
				printf("\r\n TIMEOUT3");
 8001d10:	4808      	ldr	r0, [pc, #32]	; (8001d34 <_ZN3DHT18startCommunicationEv+0x134>)
 8001d12:	f00f fa65 	bl	80111e0 <iprintf>
				return;
 8001d16:	e000      	b.n	8001d1a <_ZN3DHT18startCommunicationEv+0x11a>
			}
	}
	// start data transmission
	return;
 8001d18:	bf00      	nop
}
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2000023c 	.word	0x2000023c
 8001d24:	48000400 	.word	0x48000400
 8001d28:	20000734 	.word	0x20000734
 8001d2c:	08013870 	.word	0x08013870
 8001d30:	08013880 	.word	0x08013880
 8001d34:	0801388c 	.word	0x0801388c

08001d38 <_ZN3DHT16dataTransmissionEv>:
void DHT::dataTransmission()
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	uint32_t _time;
	for(int i=0; i<40; i++){
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b27      	cmp	r3, #39	; 0x27
 8001d48:	dc4a      	bgt.n	8001de0 <_ZN3DHT16dataTransmissionEv+0xa8>

		__HAL_TIM_SET_COUNTER(&htim7, 0);
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <_ZN3DHT16dataTransmissionEv+0xb0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
		while( HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0  ){ // while(0)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	899b      	ldrh	r3, [r3, #12]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f002 fcf1 	bl	8004744 <HAL_GPIO_ReadPin>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf0c      	ite	eq
 8001d68:	2301      	moveq	r3, #1
 8001d6a:	2300      	movne	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <_ZN3DHT16dataTransmissionEv+0x50>
			_time = __HAL_TIM_GET_COUNTER(&htim7);
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <_ZN3DHT16dataTransmissionEv+0xb0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	60fb      	str	r3, [r7, #12]
			if(_time > 100){
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b64      	cmp	r3, #100	; 0x64
 8001d7e:	d9e8      	bls.n	8001d52 <_ZN3DHT16dataTransmissionEv+0x1a>
				printf("\r\n TIMEOUT4");
 8001d80:	481a      	ldr	r0, [pc, #104]	; (8001dec <_ZN3DHT16dataTransmissionEv+0xb4>)
 8001d82:	f00f fa2d 	bl	80111e0 <iprintf>
				return;
 8001d86:	e02b      	b.n	8001de0 <_ZN3DHT16dataTransmissionEv+0xa8>
			}
		}
		__HAL_TIM_SET_COUNTER(&htim7, 0);
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <_ZN3DHT16dataTransmissionEv+0xb0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
		while( HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1  ){ // while(1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	899b      	ldrh	r3, [r3, #12]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f002 fcd2 	bl	8004744 <HAL_GPIO_ReadPin>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	bf0c      	ite	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	2300      	movne	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00a      	beq.n	8001dc6 <_ZN3DHT16dataTransmissionEv+0x8e>
			_time = __HAL_TIM_GET_COUNTER(&htim7);
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <_ZN3DHT16dataTransmissionEv+0xb0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	60fb      	str	r3, [r7, #12]
			if(_time > 100){
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d9e8      	bls.n	8001d90 <_ZN3DHT16dataTransmissionEv+0x58>
				printf("\r\n TIMEOUT5");
 8001dbe:	480c      	ldr	r0, [pc, #48]	; (8001df0 <_ZN3DHT16dataTransmissionEv+0xb8>)
 8001dc0:	f00f fa0e 	bl	80111e0 <iprintf>
				return;
 8001dc4:	e00c      	b.n	8001de0 <_ZN3DHT16dataTransmissionEv+0xa8>
			}
		}
		dataBuff[i] = calculateTime(  _time);
 8001dc6:	68f9      	ldr	r1, [r7, #12]
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff07 	bl	8001bdc <_ZN3DHT13calculateTimeEm>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4908      	ldr	r1, [pc, #32]	; (8001df4 <_ZN3DHT16dataTransmissionEv+0xbc>)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<40; i++){
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	e7b1      	b.n	8001d44 <_ZN3DHT16dataTransmissionEv+0xc>
	}
}
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000734 	.word	0x20000734
 8001dec:	08013898 	.word	0x08013898
 8001df0:	080138a4 	.word	0x080138a4
 8001df4:	20000250 	.word	0x20000250

08001df8 <_ZN3DHT8DHT_mainEv>:
void DHT::DHT_main()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim7);
 8001e00:	4807      	ldr	r0, [pc, #28]	; (8001e20 <_ZN3DHT8DHT_mainEv+0x28>)
 8001e02:	f005 f927 	bl	8007054 <HAL_TIM_Base_Start>
	startCommunication();
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff fefa 	bl	8001c00 <_ZN3DHT18startCommunicationEv>
	dataTransmission();
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff93 	bl	8001d38 <_ZN3DHT16dataTransmissionEv>
	Dht_read();
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f806 	bl	8001e24 <_ZN3DHT8Dht_readEv>
//	printTheTemprature();
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000734 	.word	0x20000734

08001e24 <_ZN3DHT8Dht_readEv>:
		printf(	"checkSum = %d \r\n", checkSum);
	}
//	printf("\r\n ------------------------------------------------ \r\n");
}
void DHT::Dht_read()
{
 8001e24:	b5b0      	push	{r4, r5, r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	integralRH = calculateTemp(0);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fe86 	bl	8001b40 <_ZN3DHT13calculateTempEi>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <_ZN3DHT8Dht_readEv+0x90>)
 8001e38:	6013      	str	r3, [r2, #0]
	decimalRH =  calculateTemp(8);
 8001e3a:	2108      	movs	r1, #8
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff fe7f 	bl	8001b40 <_ZN3DHT13calculateTempEi>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <_ZN3DHT8Dht_readEv+0x94>)
 8001e46:	6013      	str	r3, [r2, #0]
	integralT = calculateTemp(16);
 8001e48:	2110      	movs	r1, #16
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fe78 	bl	8001b40 <_ZN3DHT13calculateTempEi>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <_ZN3DHT8Dht_readEv+0x98>)
 8001e54:	6013      	str	r3, [r2, #0]
	decimalT =  calculateTemp(24);
 8001e56:	2118      	movs	r1, #24
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fe71 	bl	8001b40 <_ZN3DHT13calculateTempEi>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <_ZN3DHT8Dht_readEv+0x9c>)
 8001e62:	6013      	str	r3, [r2, #0]
	checkSum =  calculateTemp(32);
 8001e64:	2120      	movs	r1, #32
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fe6a 	bl	8001b40 <_ZN3DHT13calculateTempEi>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <_ZN3DHT8Dht_readEv+0xa0>)
 8001e70:	6013      	str	r3, [r2, #0]
	temperature = (double)integralT +  (double)decimalT/100 ;
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <_ZN3DHT8Dht_readEv+0x98>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb64 	bl	8000544 <__aeabi_i2d>
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	460d      	mov	r5, r1
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <_ZN3DHT8Dht_readEv+0x9c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb5d 	bl	8000544 <__aeabi_i2d>
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <_ZN3DHT8Dht_readEv+0xa4>)
 8001e90:	f7fe fcec 	bl	800086c <__aeabi_ddiv>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4620      	mov	r0, r4
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	f7fe fa06 	bl	80002ac <__adddf3>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	e9c1 2306 	strd	r2, r3, [r1, #24]

//	printf("integralT = %d\r\n", integralT);
//	printf("decimalT = %d\r\n", decimalT);
//	printf("Temp = %f\r\n", temperature);

}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200002f0 	.word	0x200002f0
 8001eb8:	200002f4 	.word	0x200002f4
 8001ebc:	200002f8 	.word	0x200002f8
 8001ec0:	200002fc 	.word	0x200002fc
 8001ec4:	20000300 	.word	0x20000300
 8001ec8:	40590000 	.word	0x40590000

08001ecc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001ecc:	b5b0      	push	{r4, r5, r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fb34 	bl	8000544 <__aeabi_i2d>
 8001edc:	4604      	mov	r4, r0
 8001ede:	460d      	mov	r5, r1
 8001ee0:	6838      	ldr	r0, [r7, #0]
 8001ee2:	f7fe fb2f 	bl	8000544 <__aeabi_i2d>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	ec43 2b11 	vmov	d1, r2, r3
 8001eee:	ec45 4b10 	vmov	d0, r4, r5
 8001ef2:	f00d fcb5 	bl	800f860 <pow>
 8001ef6:	eeb0 7a40 	vmov.f32	s14, s0
 8001efa:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001efe:	eeb0 0a47 	vmov.f32	s0, s14
 8001f02:	eef0 0a67 	vmov.f32	s1, s15
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bdb0      	pop	{r4, r5, r7, pc}

08001f0c <_ZN5FlashD1Ev>:
Flash::Flash() {
	// TODO Auto-generated constructor stub

}

Flash::~Flash() {
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <_ZN5FlashD1Ev+0x1c>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	08013e24 	.word	0x08013e24

08001f2c <_ZN5FlashD0Ev>:
Flash::~Flash() {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
}
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ffe9 	bl	8001f0c <_ZN5FlashD1Ev>
 8001f3a:	211c      	movs	r1, #28
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f00d fc5d 	bl	800f7fc <_ZdlPvj>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_ZN5Flash9erasePageEv>:

HAL_StatusTypeDef Flash :: erasePage()
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8001f54:	f002 f824 	bl	8003fa0 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef flashErase;
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
	flashErase.Banks = _bank;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	617b      	str	r3, [r7, #20]
	flashErase.Page = _pageAddr;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
	flashErase.NbPages = _nbPages;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61fb      	str	r3, [r7, #28]

	uint32_t pageError;
	HAL_FLASHEx_Erase(&flashErase, &pageError);
 8001f6e:	f107 020c 	add.w	r2, r7, #12
 8001f72:	f107 0310 	add.w	r3, r7, #16
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 f8f5 	bl	8004168 <HAL_FLASHEx_Erase>
	if(pageError == 0xFFFFFFFF)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d103      	bne.n	8001f8e <_ZN5Flash9erasePageEv+0x42>
	{
		HAL_FLASH_Lock();
 8001f86:	f002 f82d 	bl	8003fe4 <HAL_FLASH_Lock>
		return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e002      	b.n	8001f94 <_ZN5Flash9erasePageEv+0x48>
	}
	else
	{
		HAL_FLASH_Lock();
 8001f8e:	f002 f829 	bl	8003fe4 <HAL_FLASH_Lock>
		return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
	}

}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_ZN5Flash11writeToPageEPvi>:

HAL_StatusTypeDef Flash :: writeToPage(void* data, int dataSize)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;
	HAL_FLASH_Unlock();
 8001fa8:	f001 fffa 	bl	8003fa0 <HAL_FLASH_Unlock>
	int index = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
	while (index < dataSize)
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	da1b      	bge.n	8001ff0 <_ZN5Flash11writeToPageEPvi+0x54>
	{
		uint64_t Data =*(uint64_t*)(data+index); // add template
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		status = HAL_FLASH_Program(_typeProgram, _pageAddr+index, Data);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6918      	ldr	r0, [r3, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	18d1      	adds	r1, r2, r3
 8001fd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fd6:	f001 ff77 	bl	8003ec8 <HAL_FLASH_Program>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	77fb      	strb	r3, [r7, #31]
		if(status != HAL_OK)
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <_ZN5Flash11writeToPageEPvi+0x4c>
		{
			return status;
 8001fe4:	7ffb      	ldrb	r3, [r7, #31]
 8001fe6:	e006      	b.n	8001ff6 <_ZN5Flash11writeToPageEPvi+0x5a>
		}
		index += sizeof(uint64_t);
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	3308      	adds	r3, #8
 8001fec:	61bb      	str	r3, [r7, #24]
	while (index < dataSize)
 8001fee:	e7df      	b.n	8001fb0 <_ZN5Flash11writeToPageEPvi+0x14>
	}
	HAL_FLASH_Lock();
 8001ff0:	f001 fff8 	bl	8003fe4 <HAL_FLASH_Lock>
	return status;
 8001ff4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <_ZN5Flash10setWarningEi>:


void Flash :: setWarning(int warning)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
	_thresholds.warningUsed = DATA_IN_USED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	829a      	strh	r2, [r3, #20]
	_thresholds.warning = warning;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b29a      	uxth	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	82da      	strh	r2, [r3, #22]
	HAL_StatusTypeDef status;
	status = erasePage();
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff97 	bl	8001f4c <_ZN5Flash9erasePageEv>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d004      	beq.n	8002032 <_ZN5Flash10setWarningEi+0x32>
	{
		printf("error in erase page in line %d in file %s\r\n", __LINE__, __FILE__);
 8002028:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <_ZN5Flash10setWarningEi+0x68>)
 800202a:	2149      	movs	r1, #73	; 0x49
 800202c:	480f      	ldr	r0, [pc, #60]	; (800206c <_ZN5Flash10setWarningEi+0x6c>)
 800202e:	f00f f8d7 	bl	80111e0 <iprintf>
	}
	status = writeToPage( &_thresholds, (sizeof(THRESHOLDS)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3314      	adds	r3, #20
 8002036:	2208      	movs	r2, #8
 8002038:	4619      	mov	r1, r3
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffae 	bl	8001f9c <_ZN5Flash11writeToPageEPvi>
 8002040:	4603      	mov	r3, r0
 8002042:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <_ZN5Flash10setWarningEi+0x56>
	{
		printf("error in write to page in line %d in file %s\r\n", __LINE__, __FILE__);
 800204a:	4a07      	ldr	r2, [pc, #28]	; (8002068 <_ZN5Flash10setWarningEi+0x68>)
 800204c:	214e      	movs	r1, #78	; 0x4e
 800204e:	4808      	ldr	r0, [pc, #32]	; (8002070 <_ZN5Flash10setWarningEi+0x70>)
 8002050:	f00f f8c6 	bl	80111e0 <iprintf>
	}
	else
	{
		printf("saved in flash in line %d in file %s \r\n", __LINE__, __FILE__);
	}
}
 8002054:	e004      	b.n	8002060 <_ZN5Flash10setWarningEi+0x60>
		printf("saved in flash in line %d in file %s \r\n", __LINE__, __FILE__);
 8002056:	4a04      	ldr	r2, [pc, #16]	; (8002068 <_ZN5Flash10setWarningEi+0x68>)
 8002058:	2152      	movs	r1, #82	; 0x52
 800205a:	4806      	ldr	r0, [pc, #24]	; (8002074 <_ZN5Flash10setWarningEi+0x74>)
 800205c:	f00f f8c0 	bl	80111e0 <iprintf>
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	08013900 	.word	0x08013900
 800206c:	08013918 	.word	0x08013918
 8002070:	08013944 	.word	0x08013944
 8002074:	08013974 	.word	0x08013974

08002078 <_ZN5Flash11setCriticalEi>:

void Flash :: setCritical(int critical)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
	_thresholds.criticalUsed = DATA_IN_USED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	831a      	strh	r2, [r3, #24]
	_thresholds.critical = critical;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	835a      	strh	r2, [r3, #26]
	HAL_StatusTypeDef status;
	status = erasePage();
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff5b 	bl	8001f4c <_ZN5Flash9erasePageEv>
 8002096:	4603      	mov	r3, r0
 8002098:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <_ZN5Flash11setCriticalEi+0x32>
	{
		printf("error in erase page in line %d in file %s\r\n", __LINE__, __FILE__);
 80020a0:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <_ZN5Flash11setCriticalEi+0x68>)
 80020a2:	215e      	movs	r1, #94	; 0x5e
 80020a4:	480f      	ldr	r0, [pc, #60]	; (80020e4 <_ZN5Flash11setCriticalEi+0x6c>)
 80020a6:	f00f f89b 	bl	80111e0 <iprintf>
	}
	status = writeToPage( &_thresholds, (sizeof(THRESHOLDS)));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3314      	adds	r3, #20
 80020ae:	2208      	movs	r2, #8
 80020b0:	4619      	mov	r1, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff72 	bl	8001f9c <_ZN5Flash11writeToPageEPvi>
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <_ZN5Flash11setCriticalEi+0x56>
	{
		printf("error in write to page in line %d in file %s\r\n", __LINE__, __FILE__);
 80020c2:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <_ZN5Flash11setCriticalEi+0x68>)
 80020c4:	2163      	movs	r1, #99	; 0x63
 80020c6:	4808      	ldr	r0, [pc, #32]	; (80020e8 <_ZN5Flash11setCriticalEi+0x70>)
 80020c8:	f00f f88a 	bl	80111e0 <iprintf>
	}
	else
	{
		printf("saved in flash in line %d in file %s \r\n", __LINE__, __FILE__);
	}
}
 80020cc:	e004      	b.n	80020d8 <_ZN5Flash11setCriticalEi+0x60>
		printf("saved in flash in line %d in file %s \r\n", __LINE__, __FILE__);
 80020ce:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <_ZN5Flash11setCriticalEi+0x68>)
 80020d0:	2167      	movs	r1, #103	; 0x67
 80020d2:	4806      	ldr	r0, [pc, #24]	; (80020ec <_ZN5Flash11setCriticalEi+0x74>)
 80020d4:	f00f f884 	bl	80111e0 <iprintf>
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	08013900 	.word	0x08013900
 80020e4:	08013918 	.word	0x08013918
 80020e8:	08013944 	.word	0x08013944
 80020ec:	08013974 	.word	0x08013974

080020f0 <_ZN5Flash15printThresHoldsEv>:

void Flash :: printThresHolds()
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	THRESHOLDS* data = (THRESHOLDS *)(_pageAddr);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	60fb      	str	r3, [r7, #12]
	memcpy(&_thresholds, data, sizeof(THRESHOLDS));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3314      	adds	r3, #20
 8002102:	2208      	movs	r2, #8
 8002104:	68f9      	ldr	r1, [r7, #12]
 8002106:	4618      	mov	r0, r3
 8002108:	f00e fb0a 	bl	8010720 <memcpy>
	_thresholds.criticalUsed == DATA_IN_USED? printf("critical = %d \r\n", _thresholds.critical):
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8b1b      	ldrh	r3, [r3, #24]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d106      	bne.n	8002122 <_ZN5Flash15printThresHoldsEv+0x32>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	8b5b      	ldrh	r3, [r3, #26]
 8002118:	4619      	mov	r1, r3
 800211a:	480c      	ldr	r0, [pc, #48]	; (800214c <_ZN5Flash15printThresHoldsEv+0x5c>)
 800211c:	f00f f860 	bl	80111e0 <iprintf>
 8002120:	e002      	b.n	8002128 <_ZN5Flash15printThresHoldsEv+0x38>
											  printf("Please insert critical temp\r\n");
 8002122:	480b      	ldr	r0, [pc, #44]	; (8002150 <_ZN5Flash15printThresHoldsEv+0x60>)
 8002124:	f00f f8e2 	bl	80112ec <puts>

	_thresholds.warningUsed == DATA_IN_USED? printf("warning = %d \r\n", _thresholds.warning):
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	8a9b      	ldrh	r3, [r3, #20]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <_ZN5Flash15printThresHoldsEv+0x4e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	8adb      	ldrh	r3, [r3, #22]
 8002134:	4619      	mov	r1, r3
 8002136:	4807      	ldr	r0, [pc, #28]	; (8002154 <_ZN5Flash15printThresHoldsEv+0x64>)
 8002138:	f00f f852 	bl	80111e0 <iprintf>
			  	  	  	  	  	  	  	  	 printf("Please insert warning temp\r\n");
}
 800213c:	e002      	b.n	8002144 <_ZN5Flash15printThresHoldsEv+0x54>
			  	  	  	  	  	  	  	  	 printf("Please insert warning temp\r\n");
 800213e:	4806      	ldr	r0, [pc, #24]	; (8002158 <_ZN5Flash15printThresHoldsEv+0x68>)
 8002140:	f00f f8d4 	bl	80112ec <puts>
}
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	0801399c 	.word	0x0801399c
 8002150:	080139b0 	.word	0x080139b0
 8002154:	080139d0 	.word	0x080139d0
 8002158:	080139e0 	.word	0x080139e0

0800215c <_ZN3LEDD1Ev>:
LED::LED() {
	// TODO Auto-generated constructor stub

}

LED::~LED() {
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <_ZN3LEDD1Ev+0x1c>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	08013e34 	.word	0x08013e34

0800217c <_ZN3LEDD0Ev>:
LED::~LED() {
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
}
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ffe9 	bl	800215c <_ZN3LEDD1Ev>
 800218a:	210c      	movs	r1, #12
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f00d fb35 	bl	800f7fc <_ZdlPvj>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <_ZN3LEDC1EP12GPIO_TypeDeft9_ledState>:

LED::LED(GPIO_TypeDef* gpiox, uint16_t gpio_pin, LED_STATE state){
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	460b      	mov	r3, r1
 80021ac:	80fb      	strh	r3, [r7, #6]
 80021ae:	4613      	mov	r3, r2
 80021b0:	717b      	strb	r3, [r7, #5]
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <_ZN3LEDC1EP12GPIO_TypeDeft9_ledState+0x3c>)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	601a      	str	r2, [r3, #0]
	GPIOx = gpiox;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	605a      	str	r2, [r3, #4]
	GPIO_Pin = gpio_pin;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	88fa      	ldrh	r2, [r7, #6]
 80021c2:	811a      	strh	r2, [r3, #8]
	State = state;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	797a      	ldrb	r2, [r7, #5]
 80021c8:	729a      	strb	r2, [r3, #10]
}
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	08013e34 	.word	0x08013e34

080021dc <_ZN3LED5LedOnEv>:
{
	State = _state;
}

void LED::LedOn()
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	State = LED_ON;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6858      	ldr	r0, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	891b      	ldrh	r3, [r3, #8]
 80021f2:	2201      	movs	r2, #1
 80021f4:	4619      	mov	r1, r3
 80021f6:	f002 fabd 	bl	8004774 <HAL_GPIO_WritePin>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_ZN3LED6LedOFFEv>:
void LED::LedOFF()
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
	State = LED_OFF;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6858      	ldr	r0, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	891b      	ldrh	r3, [r3, #8]
 8002218:	2200      	movs	r2, #0
 800221a:	4619      	mov	r1, r3
 800221c:	f002 faaa 	bl	8004774 <HAL_GPIO_WritePin>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_ZN3LED8LedBlinkEv>:
void LED::LedBlink()
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	State = LED_BLINK;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	729a      	strb	r2, [r3, #10]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	891b      	ldrh	r3, [r3, #8]
 800223e:	4619      	mov	r1, r3
 8002240:	4610      	mov	r0, r2
 8002242:	f002 faaf 	bl	80047a4 <HAL_GPIO_TogglePin>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_ZN3LED12LedStopBlinkEv>:
void LED::LedStopBlink()
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
	State = LED_ON;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	729a      	strb	r2, [r3, #10]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_ZN3LED8getStateEv>:
	void LedOFF();
	void LedToggle(int delay);
	void LedBlink();
	void LedStopBlink();

	LED_STATE getState(){return State;}
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7a9b      	ldrb	r3, [r3, #10]
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_ZN6Button7getGpioEv>:
	uint16_t GPIO_Pin;
public:
	Button();
	virtual ~Button();
	Button(GPIO_TypeDef* gpiox, uint16_t gpio_pin);
	GPIO_TypeDef* getGpio(){return GPIOx;}
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_ZN6Button6getPinEv>:
	uint16_t getPin(){return GPIO_Pin;}
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	891b      	ldrh	r3, [r3, #8]
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_ZN3DHT7getTempEv>:
	DHT_STATE getState(){return state;}
	GPIO_TypeDef* getGpio(){return GPIOx;}
	uint16_t getPin(){return GPIO_Pin;}
	int getCounter(){return counter;}
	uint32_t getLastFalling(){return lastFalling;}
	double getTemp(){return temperature;}
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022be:	ec43 2b17 	vmov	d7, r2, r3
 80022c2:	eeb0 0a47 	vmov.f32	s0, s14
 80022c6:	eef0 0a67 	vmov.f32	s1, s15
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_ZN5FlashC1Emmmm>:

public:
	Flash();
	virtual ~Flash();

	Flash(uint32_t bank, uint32_t pageAddr, uint32_t nbPage, uint32_t typeProgram)
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
	{
 80022e2:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <_ZN5FlashC1Emmmm+0x3c>)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	601a      	str	r2, [r3, #0]
		_bank = bank;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	605a      	str	r2, [r3, #4]
		_pageAddr = pageAddr;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	609a      	str	r2, [r3, #8]
		_nbPages = nbPage;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	60da      	str	r2, [r3, #12]
		_typeProgram = typeProgram;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	611a      	str	r2, [r3, #16]
	}
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	08013e24 	.word	0x08013e24

08002314 <_ZN5Flash10getWarningEv>:
	uint32_t getBank(){return _bank;}
	uint32_t getPageAddr(){return _pageAddr;}
	uint32_t getNbPages(){return _nbPages;}
	uint32_t getTypeProgram(){return _typeProgram;}

	int getWarning(){return _thresholds.warning;}
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8adb      	ldrh	r3, [r3, #22]
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_ZN5Flash11getCriticalEv>:
	int getCritical(){return _thresholds.critical;}
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	8b5b      	ldrh	r3, [r3, #26]
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_ZN3RtcC1EP19__I2C_HandleTypeDefh>:

public:
	Rtc();
	virtual ~Rtc();

	Rtc (I2C_HandleTypeDef * hi2c, uint8_t devAddr)
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	4613      	mov	r3, r2
 8002350:	71fb      	strb	r3, [r7, #7]
		{
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <_ZN3RtcC1EP19__I2C_HandleTypeDefh+0x30>)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]
			_hi2c = hi2c;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	605a      	str	r2, [r3, #4]
			_devAddr = devAddr;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	79fa      	ldrb	r2, [r7, #7]
 8002362:	721a      	strb	r2, [r3, #8]
		}
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	08013e44 	.word	0x08013e44

08002378 <_ZN7ManagerC1E13_system_state>:

	SYSTEM_STATE State;

public:
	Manager();
	Manager(SYSTEM_STATE _state)
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
	{
		State = _state;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	701a      	strb	r2, [r3, #0]
	}
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_ZN7Manager8getStateEv>:
	SYSTEM_STATE getState(){return State;}
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_ZN7Manager8setStateE13_system_state>:
	void setState(SYSTEM_STATE _state)
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
	{
		State = _state;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	701a      	strb	r2, [r3, #0]
	}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_ZN6SdCard11getFileNameEv>:
public:
	SdCard(){}
	virtual ~SdCard(){}
	SdCard(const char* name, const char* errorName);

	char* getFileName(){return _fileName;}
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <_ZN6SdCard16getErrorFileNameEv>:
	char* getErrorFileName(){return _errorFileName;}
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3336      	adds	r3, #54	; 0x36
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <_Z15updateLogBufferv>:
Flash Thresholds(2, 0x08080000, 1, FLASH_TYPEPROGRAM_DOUBLEWORD);

//--------------------------------

void updateLogBuffer()
{
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b090      	sub	sp, #64	; 0x40
 8002404:	af06      	add	r7, sp, #24
	DateTime dateTime;
	rtc->rtcGetTime(&dateTime);
 8002406:	4b25      	ldr	r3, [pc, #148]	; (800249c <_Z15updateLogBufferv+0x9c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	463a      	mov	r2, r7
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fb07 	bl	8002a22 <_ZN3Rtc10rtcGetTimeEP9DateTime_>
	double currentTemp = dht.getTemp();
 8002414:	4822      	ldr	r0, [pc, #136]	; (80024a0 <_Z15updateLogBufferv+0xa0>)
 8002416:	f7ff ff4b 	bl	80022b0 <_ZN3DHT7getTempEv>
 800241a:	ed87 0b08 	vstr	d0, [r7, #32]
	SYSTEM_STATE monitorState = Monitor->getState() ;
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <_Z15updateLogBufferv+0xa4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ffb8 	bl	8002398 <_ZN7Manager8getStateEv>
 8002428:	4603      	mov	r3, r0
 800242a:	77fb      	strb	r3, [r7, #31]
	memset(logBuffer, 0, sizeof(logBuffer));
 800242c:	2264      	movs	r2, #100	; 0x64
 800242e:	2100      	movs	r1, #0
 8002430:	481d      	ldr	r0, [pc, #116]	; (80024a8 <_Z15updateLogBufferv+0xa8>)
 8002432:	f00e f983 	bl	801073c <memset>
	if( monitorState == OK   ){
 8002436:	7ffb      	ldrb	r3, [r7, #31]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d02a      	beq.n	8002492 <_Z15updateLogBufferv+0x92>
//		sprintf(logBuffer, "OK! [%.2f] | %d:%d:%d - %d/%d/%d", currentTemp,
//					dateTime.hours, dateTime.min    , dateTime.sec ,
//					dateTime.day  , dateTime.month  , dateTime.year );
	}
	else if(monitorState == WARNING   ){
 800243c:	7ffb      	ldrb	r3, [r7, #31]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d112      	bne.n	8002468 <_Z15updateLogBufferv+0x68>
		sprintf(logBuffer, "Warning! [%.2f] | %d:%d:%d - %d/%d/%d\r", currentTemp,
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6839      	ldr	r1, [r7, #0]
 8002448:	6938      	ldr	r0, [r7, #16]
 800244a:	697c      	ldr	r4, [r7, #20]
 800244c:	69bd      	ldr	r5, [r7, #24]
 800244e:	9505      	str	r5, [sp, #20]
 8002450:	9404      	str	r4, [sp, #16]
 8002452:	9003      	str	r0, [sp, #12]
 8002454:	9102      	str	r1, [sp, #8]
 8002456:	9201      	str	r2, [sp, #4]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800245e:	4913      	ldr	r1, [pc, #76]	; (80024ac <_Z15updateLogBufferv+0xac>)
 8002460:	4811      	ldr	r0, [pc, #68]	; (80024a8 <_Z15updateLogBufferv+0xa8>)
 8002462:	f00e ff9f 	bl	80113a4 <siprintf>
					dateTime.day  , dateTime.month  , dateTime.year );

	}


}
 8002466:	e014      	b.n	8002492 <_Z15updateLogBufferv+0x92>
	else if(monitorState == CRITICAL){
 8002468:	7ffb      	ldrb	r3, [r7, #31]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d111      	bne.n	8002492 <_Z15updateLogBufferv+0x92>
		sprintf(logBuffer, "Critical! [%.2f] | %d:%d:%d - %d/%d/%d\r", currentTemp,
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6839      	ldr	r1, [r7, #0]
 8002474:	6938      	ldr	r0, [r7, #16]
 8002476:	697c      	ldr	r4, [r7, #20]
 8002478:	69bd      	ldr	r5, [r7, #24]
 800247a:	9505      	str	r5, [sp, #20]
 800247c:	9404      	str	r4, [sp, #16]
 800247e:	9003      	str	r0, [sp, #12]
 8002480:	9102      	str	r1, [sp, #8]
 8002482:	9201      	str	r2, [sp, #4]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800248a:	4909      	ldr	r1, [pc, #36]	; (80024b0 <_Z15updateLogBufferv+0xb0>)
 800248c:	4806      	ldr	r0, [pc, #24]	; (80024a8 <_Z15updateLogBufferv+0xa8>)
 800248e:	f00e ff89 	bl	80113a4 <siprintf>
}
 8002492:	bf00      	nop
 8002494:	3728      	adds	r7, #40	; 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bdb0      	pop	{r4, r5, r7, pc}
 800249a:	bf00      	nop
 800249c:	200003bc 	.word	0x200003bc
 80024a0:	20000398 	.word	0x20000398
 80024a4:	200003b8 	.word	0x200003b8
 80024a8:	20000304 	.word	0x20000304
 80024ac:	080139fc 	.word	0x080139fc
 80024b0:	08013a24 	.word	0x08013a24

080024b4 <my_main>:
void my_main()
{
 80024b4:	b598      	push	{r3, r4, r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	Monitor = new Manager(OK);
 80024b8:	2001      	movs	r0, #1
 80024ba:	f00d f9a1 	bl	800f800 <_Znwj>
 80024be:	4603      	mov	r3, r0
 80024c0:	461c      	mov	r4, r3
 80024c2:	2100      	movs	r1, #0
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7ff ff57 	bl	8002378 <_ZN7ManagerC1E13_system_state>
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <my_main+0x70>)
 80024cc:	601c      	str	r4, [r3, #0]
	rtc = new Rtc(&hi2c1, 0xD0);
 80024ce:	200c      	movs	r0, #12
 80024d0:	f00d f996 	bl	800f800 <_Znwj>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461c      	mov	r4, r3
 80024d8:	22d0      	movs	r2, #208	; 0xd0
 80024da:	4913      	ldr	r1, [pc, #76]	; (8002528 <my_main+0x74>)
 80024dc:	4620      	mov	r0, r4
 80024de:	f7ff ff31 	bl	8002344 <_ZN3RtcC1EP19__I2C_HandleTypeDefh>
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <my_main+0x78>)
 80024e4:	601c      	str	r4, [r3, #0]
	LogSdCard = new SdCard("Log.txt", "ErrorLog.txt");
 80024e6:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
 80024ea:	f00d f989 	bl	800f800 <_Znwj>
 80024ee:	4603      	mov	r3, r0
 80024f0:	461c      	mov	r4, r3
 80024f2:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <my_main+0x7c>)
 80024f4:	490f      	ldr	r1, [pc, #60]	; (8002534 <my_main+0x80>)
 80024f6:	4620      	mov	r0, r4
 80024f8:	f000 fb08 	bl	8002b0c <_ZN6SdCardC1EPKcS1_>
 80024fc:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <my_main+0x84>)
 80024fe:	601c      	str	r4, [r3, #0]
//	initTime.year    = 22 ;
//	initTime.weekDay =  1 ;
//	rtc->rtcSetTime(&initTime);
//  --------------------------

	HAL_TIM_Base_Init(&htim6);
 8002500:	480e      	ldr	r0, [pc, #56]	; (800253c <my_main+0x88>)
 8002502:	f004 fd4f 	bl	8006fa4 <HAL_TIM_Base_Init>
	cli.CliInit();
 8002506:	480e      	ldr	r0, [pc, #56]	; (8002540 <my_main+0x8c>)
 8002508:	f7ff f818 	bl	800153c <_ZN3CLI7CliInitEv>
	Thresholds.printThresHolds();
 800250c:	480d      	ldr	r0, [pc, #52]	; (8002544 <my_main+0x90>)
 800250e:	f7ff fdef 	bl	80020f0 <_ZN5Flash15printThresHoldsEv>
	bluLed.LedOn();
 8002512:	480d      	ldr	r0, [pc, #52]	; (8002548 <my_main+0x94>)
 8002514:	f7ff fe62 	bl	80021dc <_ZN3LED5LedOnEv>
	printf("CHECK from my main\r\n");
 8002518:	480c      	ldr	r0, [pc, #48]	; (800254c <my_main+0x98>)
 800251a:	f00e fee7 	bl	80112ec <puts>

}
 800251e:	bf00      	nop
 8002520:	bd98      	pop	{r3, r4, r7, pc}
 8002522:	bf00      	nop
 8002524:	200003b8 	.word	0x200003b8
 8002528:	200005e4 	.word	0x200005e4
 800252c:	200003bc 	.word	0x200003bc
 8002530:	08013a4c 	.word	0x08013a4c
 8002534:	08013a5c 	.word	0x08013a5c
 8002538:	200003c0 	.word	0x200003c0
 800253c:	200006e8 	.word	0x200006e8
 8002540:	2000044c 	.word	0x2000044c
 8002544:	200003c4 	.word	0x200003c4
 8002548:	2000037c 	.word	0x2000037c
 800254c:	08013a64 	.word	0x08013a64

08002550 <dhtTask>:

void dhtTask()
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
	dht.DHT_main();
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <dhtTask+0x10>)
 8002556:	f7ff fc4f 	bl	8001df8 <_ZN3DHT8DHT_mainEv>

}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000398 	.word	0x20000398

08002564 <mainTask>:

void mainTask()
{
 8002564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002566:	b0b1      	sub	sp, #196	; 0xc4
 8002568:	af06      	add	r7, sp, #24
	double currentTemp = dht.getTemp();
 800256a:	488e      	ldr	r0, [pc, #568]	; (80027a4 <mainTask+0x240>)
 800256c:	f7ff fea0 	bl	80022b0 <_ZN3DHT7getTempEv>
 8002570:	ed87 0b28 	vstr	d0, [r7, #160]	; 0xa0

	if(currentTemp < Thresholds.getWarning() ){
 8002574:	488c      	ldr	r0, [pc, #560]	; (80027a8 <mainTask+0x244>)
 8002576:	f7ff fecd 	bl	8002314 <_ZN5Flash10getWarningEv>
 800257a:	4603      	mov	r3, r0
 800257c:	4618      	mov	r0, r3
 800257e:	f7fd ffe1 	bl	8000544 <__aeabi_i2d>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	2101      	movs	r1, #1
 8002588:	460c      	mov	r4, r1
 800258a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800258e:	f7fe fab5 	bl	8000afc <__aeabi_dcmplt>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <mainTask+0x38>
 8002598:	2300      	movs	r3, #0
 800259a:	461c      	mov	r4, r3
 800259c:	b2e3      	uxtb	r3, r4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d020      	beq.n	80025e4 <mainTask+0x80>
		if( Monitor->getState() != OK){
 80025a2:	4b82      	ldr	r3, [pc, #520]	; (80027ac <mainTask+0x248>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fef6 	bl	8002398 <_ZN7Manager8getStateEv>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	bf14      	ite	ne
 80025b2:	2301      	movne	r3, #1
 80025b4:	2300      	moveq	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80ef 	beq.w	800279c <mainTask+0x238>
			/* Transition to [OK] State:
			 * 		Blue led on, Red led off
			 * 		Buzzer off
			 * 		no need to write to log
			 */
			printf("State = [OK] \r\n");
 80025be:	487c      	ldr	r0, [pc, #496]	; (80027b0 <mainTask+0x24c>)
 80025c0:	f00e fe94 	bl	80112ec <puts>
			Monitor->setState(OK);
 80025c4:	4b79      	ldr	r3, [pc, #484]	; (80027ac <mainTask+0x248>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fef0 	bl	80023b0 <_ZN7Manager8setStateE13_system_state>
			bluLed.LedOn();
 80025d0:	4878      	ldr	r0, [pc, #480]	; (80027b4 <mainTask+0x250>)
 80025d2:	f7ff fe03 	bl	80021dc <_ZN3LED5LedOnEv>
			redLed.LedOFF();
 80025d6:	4878      	ldr	r0, [pc, #480]	; (80027b8 <mainTask+0x254>)
 80025d8:	f7ff fe13 	bl	8002202 <_ZN3LED6LedOFFEv>
			buz.buzzStop();
 80025dc:	4877      	ldr	r0, [pc, #476]	; (80027bc <mainTask+0x258>)
 80025de:	f7fe fcc1 	bl	8000f64 <_ZN3BUZ8buzzStopEv>
			}

	}


}
 80025e2:	e0db      	b.n	800279c <mainTask+0x238>
	else if(currentTemp >= Thresholds.getWarning() &&
 80025e4:	4870      	ldr	r0, [pc, #448]	; (80027a8 <mainTask+0x244>)
 80025e6:	f7ff fe95 	bl	8002314 <_ZN5Flash10getWarningEv>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffa9 	bl	8000544 <__aeabi_i2d>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80025fa:	f7fe fa93 	bl	8000b24 <__aeabi_dcmpge>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d011      	beq.n	8002628 <mainTask+0xc4>
				currentTemp < Thresholds.getCritical() ){
 8002604:	4868      	ldr	r0, [pc, #416]	; (80027a8 <mainTask+0x244>)
 8002606:	f7ff fe91 	bl	800232c <_ZN5Flash11getCriticalEv>
 800260a:	4603      	mov	r3, r0
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd ff99 	bl	8000544 <__aeabi_i2d>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
	else if(currentTemp >= Thresholds.getWarning() &&
 8002616:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800261a:	f7fe fa6f 	bl	8000afc <__aeabi_dcmplt>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <mainTask+0xc4>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <mainTask+0xc6>
 8002628:	2300      	movs	r3, #0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d050      	beq.n	80026d0 <mainTask+0x16c>
			if( Monitor->getState() != WARNING   ){
 800262e:	4b5f      	ldr	r3, [pc, #380]	; (80027ac <mainTask+0x248>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff feb0 	bl	8002398 <_ZN7Manager8getStateEv>
 8002638:	4603      	mov	r3, r0
 800263a:	2b01      	cmp	r3, #1
 800263c:	bf14      	ite	ne
 800263e:	2301      	movne	r3, #1
 8002640:	2300      	moveq	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80a9 	beq.w	800279c <mainTask+0x238>
				printf("State = [WARNING] \r\n");
 800264a:	485d      	ldr	r0, [pc, #372]	; (80027c0 <mainTask+0x25c>)
 800264c:	f00e fe4e 	bl	80112ec <puts>
				Monitor->setState(WARNING);
 8002650:	4b56      	ldr	r3, [pc, #344]	; (80027ac <mainTask+0x248>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff feaa 	bl	80023b0 <_ZN7Manager8setStateE13_system_state>
				bluLed.LedOFF();
 800265c:	4855      	ldr	r0, [pc, #340]	; (80027b4 <mainTask+0x250>)
 800265e:	f7ff fdd0 	bl	8002202 <_ZN3LED6LedOFFEv>
				redLed.LedOn();
 8002662:	4855      	ldr	r0, [pc, #340]	; (80027b8 <mainTask+0x254>)
 8002664:	f7ff fdba 	bl	80021dc <_ZN3LED5LedOnEv>
				buz.buzzStop();
 8002668:	4854      	ldr	r0, [pc, #336]	; (80027bc <mainTask+0x258>)
 800266a:	f7fe fc7b 	bl	8000f64 <_ZN3BUZ8buzzStopEv>
				rtc->rtcGetTime(&warningTime);
 800266e:	4b55      	ldr	r3, [pc, #340]	; (80027c4 <mainTask+0x260>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f9d2 	bl	8002a22 <_ZN3Rtc10rtcGetTimeEP9DateTime_>
				sprintf(warningRecord, "Warning! [%.2f] | %d:%d:%d - %d/%d/%d", currentTemp,
 800267e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002682:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002686:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800268a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800268e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8002692:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 8002696:	1d3e      	adds	r6, r7, #4
 8002698:	9505      	str	r5, [sp, #20]
 800269a:	9404      	str	r4, [sp, #16]
 800269c:	9003      	str	r0, [sp, #12]
 800269e:	9102      	str	r1, [sp, #8]
 80026a0:	9201      	str	r2, [sp, #4]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80026a8:	4947      	ldr	r1, [pc, #284]	; (80027c8 <mainTask+0x264>)
 80026aa:	4630      	mov	r0, r6
 80026ac:	f00e fe7a 	bl	80113a4 <siprintf>
					updateLogBuffer();
 80026b0:	f7ff fea6 	bl	8002400 <_Z15updateLogBufferv>
					LogSdCard->write(LogSdCard->getErrorFileName(), logBuffer);
 80026b4:	4b45      	ldr	r3, [pc, #276]	; (80027cc <mainTask+0x268>)
 80026b6:	681c      	ldr	r4, [r3, #0]
 80026b8:	4b44      	ldr	r3, [pc, #272]	; (80027cc <mainTask+0x268>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fe92 	bl	80023e6 <_ZN6SdCard16getErrorFileNameEv>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4a42      	ldr	r2, [pc, #264]	; (80027d0 <mainTask+0x26c>)
 80026c6:	4619      	mov	r1, r3
 80026c8:	4620      	mov	r0, r4
 80026ca:	f000 fab1 	bl	8002c30 <_ZN6SdCard5writeEPcS0_>
}
 80026ce:	e065      	b.n	800279c <mainTask+0x238>
	else if(currentTemp >= Thresholds.getCritical() ){
 80026d0:	4835      	ldr	r0, [pc, #212]	; (80027a8 <mainTask+0x244>)
 80026d2:	f7ff fe2b 	bl	800232c <_ZN5Flash11getCriticalEv>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd ff33 	bl	8000544 <__aeabi_i2d>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	2101      	movs	r1, #1
 80026e4:	460c      	mov	r4, r1
 80026e6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80026ea:	f7fe fa1b 	bl	8000b24 <__aeabi_dcmpge>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <mainTask+0x194>
 80026f4:	2300      	movs	r3, #0
 80026f6:	461c      	mov	r4, r3
 80026f8:	b2e3      	uxtb	r3, r4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d04e      	beq.n	800279c <mainTask+0x238>
			if( Monitor->getState() != CRITICAL &&
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <mainTask+0x248>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fe48 	bl	8002398 <_ZN7Manager8getStateEv>
 8002708:	4603      	mov	r3, r0
 800270a:	2b02      	cmp	r3, #2
 800270c:	d009      	beq.n	8002722 <mainTask+0x1be>
					Monitor->getState() != CRITICAL_NO_BUZZER   ){
 800270e:	4b27      	ldr	r3, [pc, #156]	; (80027ac <mainTask+0x248>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fe40 	bl	8002398 <_ZN7Manager8getStateEv>
 8002718:	4603      	mov	r3, r0
			if( Monitor->getState() != CRITICAL &&
 800271a:	2b03      	cmp	r3, #3
 800271c:	d001      	beq.n	8002722 <mainTask+0x1be>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <mainTask+0x1c0>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d039      	beq.n	800279c <mainTask+0x238>
				printf("State = [CRITICAL] \r\n");
 8002728:	482a      	ldr	r0, [pc, #168]	; (80027d4 <mainTask+0x270>)
 800272a:	f00e fddf 	bl	80112ec <puts>
				Monitor->setState(CRITICAL);
 800272e:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <mainTask+0x248>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2102      	movs	r1, #2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fe3b 	bl	80023b0 <_ZN7Manager8setStateE13_system_state>
				redLed.LedBlink();
 800273a:	481f      	ldr	r0, [pc, #124]	; (80027b8 <mainTask+0x254>)
 800273c:	f7ff fd74 	bl	8002228 <_ZN3LED8LedBlinkEv>
				buz.buzzStart();
 8002740:	481e      	ldr	r0, [pc, #120]	; (80027bc <mainTask+0x258>)
 8002742:	f7fe fbfb 	bl	8000f3c <_ZN3BUZ9buzzStartEv>
				rtc->rtcGetTime(&criticalTime);
 8002746:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <mainTask+0x260>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f966 	bl	8002a22 <_ZN3Rtc10rtcGetTimeEP9DateTime_>
				sprintf(criticalRecord, "Critical! [%.2f] | %d:%d:%d - %d/%d/%d", currentTemp,
 8002756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002758:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800275a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800275c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800275e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8002760:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 8002764:	1d3e      	adds	r6, r7, #4
 8002766:	9505      	str	r5, [sp, #20]
 8002768:	9404      	str	r4, [sp, #16]
 800276a:	9003      	str	r0, [sp, #12]
 800276c:	9102      	str	r1, [sp, #8]
 800276e:	9201      	str	r2, [sp, #4]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002776:	4918      	ldr	r1, [pc, #96]	; (80027d8 <mainTask+0x274>)
 8002778:	4630      	mov	r0, r6
 800277a:	f00e fe13 	bl	80113a4 <siprintf>
				updateLogBuffer();
 800277e:	f7ff fe3f 	bl	8002400 <_Z15updateLogBufferv>
				LogSdCard->write(LogSdCard->getErrorFileName(), logBuffer);
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <mainTask+0x268>)
 8002784:	681c      	ldr	r4, [r3, #0]
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <mainTask+0x268>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fe2b 	bl	80023e6 <_ZN6SdCard16getErrorFileNameEv>
 8002790:	4603      	mov	r3, r0
 8002792:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <mainTask+0x26c>)
 8002794:	4619      	mov	r1, r3
 8002796:	4620      	mov	r0, r4
 8002798:	f000 fa4a 	bl	8002c30 <_ZN6SdCard5writeEPcS0_>
}
 800279c:	bf00      	nop
 800279e:	37ac      	adds	r7, #172	; 0xac
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a4:	20000398 	.word	0x20000398
 80027a8:	200003c4 	.word	0x200003c4
 80027ac:	200003b8 	.word	0x200003b8
 80027b0:	08013a78 	.word	0x08013a78
 80027b4:	2000037c 	.word	0x2000037c
 80027b8:	20000370 	.word	0x20000370
 80027bc:	20000368 	.word	0x20000368
 80027c0:	08013a88 	.word	0x08013a88
 80027c4:	200003bc 	.word	0x200003bc
 80027c8:	08013a9c 	.word	0x08013a9c
 80027cc:	200003c0 	.word	0x200003c0
 80027d0:	20000304 	.word	0x20000304
 80027d4:	08013ac4 	.word	0x08013ac4
 80027d8:	08013adc 	.word	0x08013adc

080027dc <LogWriteTask>:


void LogWriteTask()
{
 80027dc:	b598      	push	{r3, r4, r7, lr}
 80027de:	af00      	add	r7, sp, #0
	osDelay(1000);
 80027e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027e4:	f009 fe32 	bl	800c44c <osDelay>
//	LogSdCard->mount();
// 	*no need for mount(), in the constructor I do mount().
	while(1){
		updateLogBuffer();
 80027e8:	f7ff fe0a 	bl	8002400 <_Z15updateLogBufferv>
		LogSdCard->write(LogSdCard->getFileName(), logBuffer);
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <LogWriteTask+0x34>)
 80027ee:	681c      	ldr	r4, [r3, #0]
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <LogWriteTask+0x34>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fdea 	bl	80023ce <_ZN6SdCard11getFileNameEv>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a05      	ldr	r2, [pc, #20]	; (8002814 <LogWriteTask+0x38>)
 80027fe:	4619      	mov	r1, r3
 8002800:	4620      	mov	r0, r4
 8002802:	f000 fa15 	bl	8002c30 <_ZN6SdCard5writeEPcS0_>
		osDelay(60000);
 8002806:	f64e 2060 	movw	r0, #60000	; 0xea60
 800280a:	f009 fe1f 	bl	800c44c <osDelay>
		updateLogBuffer();
 800280e:	e7eb      	b.n	80027e8 <LogWriteTask+0xc>
 8002810:	200003c0 	.word	0x200003c0
 8002814:	20000304 	.word	0x20000304

08002818 <LedTask>:
	}
}

void LedTask()
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
	if(redLed.getState() == LED_BLINK){
 800281c:	4807      	ldr	r0, [pc, #28]	; (800283c <LedTask+0x24>)
 800281e:	f7ff fd23 	bl	8002268 <_ZN3LED8getStateEv>
 8002822:	4603      	mov	r3, r0
 8002824:	2b02      	cmp	r3, #2
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <LedTask+0x20>
		redLed.LedBlink();
 8002832:	4802      	ldr	r0, [pc, #8]	; (800283c <LedTask+0x24>)
 8002834:	f7ff fcf8 	bl	8002228 <_ZN3LED8LedBlinkEv>
	}
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000370 	.word	0x20000370

08002840 <HAL_GPIO_EXTI_Callback>:
}



void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]
	if (pin == btn1.getPin()){
 800284a:	481d      	ldr	r0, [pc, #116]	; (80028c0 <HAL_GPIO_EXTI_Callback+0x80>)
 800284c:	f7ff fd24 	bl	8002298 <_ZN6Button6getPinEv>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	4293      	cmp	r3, r2
 8002858:	bf0c      	ite	eq
 800285a:	2301      	moveq	r3, #1
 800285c:	2300      	movne	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d029      	beq.n	80028b8 <HAL_GPIO_EXTI_Callback+0x78>
		// Buzzer Stop/Start
		if (HAL_GPIO_ReadPin(btn1.getGpio(), btn1.getPin()) == 0) {
 8002864:	4816      	ldr	r0, [pc, #88]	; (80028c0 <HAL_GPIO_EXTI_Callback+0x80>)
 8002866:	f7ff fd0b 	bl	8002280 <_ZN6Button7getGpioEv>
 800286a:	4604      	mov	r4, r0
 800286c:	4814      	ldr	r0, [pc, #80]	; (80028c0 <HAL_GPIO_EXTI_Callback+0x80>)
 800286e:	f7ff fd13 	bl	8002298 <_ZN6Button6getPinEv>
 8002872:	4603      	mov	r3, r0
 8002874:	4619      	mov	r1, r3
 8002876:	4620      	mov	r0, r4
 8002878:	f001 ff64 	bl	8004744 <HAL_GPIO_ReadPin>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	bf0c      	ite	eq
 8002882:	2301      	moveq	r3, #1
 8002884:	2300      	movne	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <HAL_GPIO_EXTI_Callback+0x78>
			if(Monitor->getState() == CRITICAL){
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_GPIO_EXTI_Callback+0x84>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fd81 	bl	8002398 <_ZN7Manager8getStateEv>
 8002896:	4603      	mov	r3, r0
 8002898:	2b02      	cmp	r3, #2
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_GPIO_EXTI_Callback+0x78>
				Monitor->setState(CRITICAL_NO_BUZZER);
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_GPIO_EXTI_Callback+0x84>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2103      	movs	r1, #3
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fd7f 	bl	80023b0 <_ZN7Manager8setStateE13_system_state>
				buz.buzzStop();
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x88>)
 80028b4:	f7fe fb56 	bl	8000f64 <_ZN3BUZ8buzzStopEv>
			}
		}
	}
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}
 80028c0:	20000388 	.word	0x20000388
 80028c4:	200003b8 	.word	0x200003b8
 80028c8:	20000368 	.word	0x20000368

080028cc <_Z41__static_initialization_and_destruction_0ii>:
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d129      	bne.n	8002930 <_Z41__static_initialization_and_destruction_0ii+0x64>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d124      	bne.n	8002930 <_Z41__static_initialization_and_destruction_0ii+0x64>
BUZ  buz(BUZ_OFF);
 80028e6:	2100      	movs	r1, #0
 80028e8:	4820      	ldr	r0, [pc, #128]	; (800296c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80028ea:	f7fe faef 	bl	8000ecc <_ZN3BUZC1E9_buzState>
LED redLed(RED_GPIO_Port, RED_Pin, LED_OFF );
 80028ee:	2300      	movs	r3, #0
 80028f0:	2240      	movs	r2, #64	; 0x40
 80028f2:	491f      	ldr	r1, [pc, #124]	; (8002970 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80028f4:	481f      	ldr	r0, [pc, #124]	; (8002974 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80028f6:	f7ff fc51 	bl	800219c <_ZN3LEDC1EP12GPIO_TypeDeft9_ledState>
LED  bluLed(BLU_GPIO_Port, BLU_Pin, LED_OFF);
 80028fa:	2300      	movs	r3, #0
 80028fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002900:	491b      	ldr	r1, [pc, #108]	; (8002970 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002902:	481d      	ldr	r0, [pc, #116]	; (8002978 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002904:	f7ff fc4a 	bl	800219c <_ZN3LEDC1EP12GPIO_TypeDeft9_ledState>
Button 	btn1(SW1_GPIO_Port, SW1_Pin);
 8002908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800290c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002910:	481a      	ldr	r0, [pc, #104]	; (800297c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002912:	f7fe fb5b 	bl	8000fcc <_ZN6ButtonC1EP12GPIO_TypeDeft>
DHT  dht(DHT11_GPIO_Port, DHT11_Pin);
 8002916:	2220      	movs	r2, #32
 8002918:	4919      	ldr	r1, [pc, #100]	; (8002980 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800291a:	481a      	ldr	r0, [pc, #104]	; (8002984 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800291c:	f7ff f8ea 	bl	8001af4 <_ZN3DHTC1EP12GPIO_TypeDeft>
Flash Thresholds(2, 0x08080000, 1, FLASH_TYPEPROGRAM_DOUBLEWORD);
 8002920:	2300      	movs	r3, #0
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2301      	movs	r3, #1
 8002926:	4a18      	ldr	r2, [pc, #96]	; (8002988 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002928:	2102      	movs	r1, #2
 800292a:	4818      	ldr	r0, [pc, #96]	; (800298c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800292c:	f7ff fcd2 	bl	80022d4 <_ZN5FlashC1Emmmm>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d116      	bne.n	8002964 <_Z41__static_initialization_and_destruction_0ii+0x98>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800293c:	4293      	cmp	r3, r2
 800293e:	d111      	bne.n	8002964 <_Z41__static_initialization_and_destruction_0ii+0x98>
 8002940:	4812      	ldr	r0, [pc, #72]	; (800298c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002942:	f7ff fae3 	bl	8001f0c <_ZN5FlashD1Ev>
DHT  dht(DHT11_GPIO_Port, DHT11_Pin);
 8002946:	480f      	ldr	r0, [pc, #60]	; (8002984 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002948:	f7ff f8b4 	bl	8001ab4 <_ZN3DHTD1Ev>
Button 	btn1(SW1_GPIO_Port, SW1_Pin);
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800294e:	f7fe fb1d 	bl	8000f8c <_ZN6ButtonD1Ev>
LED  bluLed(BLU_GPIO_Port, BLU_Pin, LED_OFF);
 8002952:	4809      	ldr	r0, [pc, #36]	; (8002978 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002954:	f7ff fc02 	bl	800215c <_ZN3LEDD1Ev>
LED redLed(RED_GPIO_Port, RED_Pin, LED_OFF );
 8002958:	4806      	ldr	r0, [pc, #24]	; (8002974 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800295a:	f7ff fbff 	bl	800215c <_ZN3LEDD1Ev>
BUZ  buz(BUZ_OFF);
 800295e:	4803      	ldr	r0, [pc, #12]	; (800296c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002960:	f7fe facc 	bl	8000efc <_ZN3BUZD1Ev>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000368 	.word	0x20000368
 8002970:	48000800 	.word	0x48000800
 8002974:	20000370 	.word	0x20000370
 8002978:	2000037c 	.word	0x2000037c
 800297c:	20000388 	.word	0x20000388
 8002980:	48000400 	.word	0x48000400
 8002984:	20000398 	.word	0x20000398
 8002988:	08080000 	.word	0x08080000
 800298c:	200003c4 	.word	0x200003c4

08002990 <_GLOBAL__sub_I_numOfRecords>:
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
 8002994:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002998:	2001      	movs	r0, #1
 800299a:	f7ff ff97 	bl	80028cc <_Z41__static_initialization_and_destruction_0ii>
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_GLOBAL__sub_D_numOfRecords>:
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7ff ff8f 	bl	80028cc <_Z41__static_initialization_and_destruction_0ii>
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_ZN3RtcD1Ev>:
Rtc::Rtc() {
	// TODO Auto-generated constructor stub

}

Rtc::~Rtc() {
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <_ZN3RtcD1Ev+0x1c>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	08013e44 	.word	0x08013e44

080029d0 <_ZN3RtcD0Ev>:
Rtc::~Rtc() {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
}
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ffe9 	bl	80029b0 <_ZN3RtcD1Ev>
 80029de:	210c      	movs	r1, #12
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f00c ff0b 	bl	800f7fc <_ZdlPvj>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_ZN3Rtc8bcdToIntEh>:
{
	HAL_I2C_Mem_Read(_hi2c, _devAddr, memAddr, 1, buffer, size, 0xFF);
}

int Rtc :: bcdToInt(uint8_t bcd)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	70fb      	strb	r3, [r7, #3]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	4413      	add	r3, r2
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <_ZN3Rtc10rtcGetTimeEP9DateTime_>:
	}

	return ((value / 10) << 4) | (value % 10);
}
void Rtc :: rtcGetTime(DateTime* dateTime)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b088      	sub	sp, #32
 8002a26:	af04      	add	r7, sp, #16
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
	uint8_t buffer[RTC_DATE_TIME_SIZE];
	HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6858      	ldr	r0, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	7a1b      	ldrb	r3, [r3, #8]
 8002a34:	b299      	uxth	r1, r3
 8002a36:	23ff      	movs	r3, #255	; 0xff
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	f107 0308 	add.w	r3, r7, #8
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2301      	movs	r3, #1
 8002a46:	2200      	movs	r2, #0
 8002a48:	f001 ff6e 	bl	8004928 <HAL_I2C_Mem_Read>

	// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 8002a4c:	7a3b      	ldrb	r3, [r7, #8]
 8002a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	723b      	strb	r3, [r7, #8]
	dateTime->sec = bcdToInt(buffer[0]);
 8002a56:	7a3b      	ldrb	r3, [r7, #8]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ffc8 	bl	80029f0 <_ZN3Rtc8bcdToIntEh>
 8002a60:	4602      	mov	r2, r0
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	601a      	str	r2, [r3, #0]
	dateTime->min = bcdToInt(buffer[1]);
 8002a66:	7a7b      	ldrb	r3, [r7, #9]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ffc0 	bl	80029f0 <_ZN3Rtc8bcdToIntEh>
 8002a70:	4602      	mov	r2, r0
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	605a      	str	r2, [r3, #4]
	dateTime->hours = bcdToInt(buffer[2]);
 8002a76:	7abb      	ldrb	r3, [r7, #10]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ffb8 	bl	80029f0 <_ZN3Rtc8bcdToIntEh>
 8002a80:	4602      	mov	r2, r0
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	609a      	str	r2, [r3, #8]
	dateTime->weekDay = buffer[3] & 0x07;
 8002a86:	7afb      	ldrb	r3, [r7, #11]
 8002a88:	f003 0207 	and.w	r2, r3, #7
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	60da      	str	r2, [r3, #12]
	dateTime->day = bcdToInt(buffer[4]);
 8002a90:	7b3b      	ldrb	r3, [r7, #12]
 8002a92:	4619      	mov	r1, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ffab 	bl	80029f0 <_ZN3Rtc8bcdToIntEh>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	611a      	str	r2, [r3, #16]
	dateTime->month = bcdToInt(buffer[5]);
 8002aa0:	7b7b      	ldrb	r3, [r7, #13]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ffa3 	bl	80029f0 <_ZN3Rtc8bcdToIntEh>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	615a      	str	r2, [r3, #20]
	dateTime->year = bcdToInt(buffer[6]);
 8002ab0:	7bbb      	ldrb	r3, [r7, #14]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff9b 	bl	80029f0 <_ZN3Rtc8bcdToIntEh>
 8002aba:	4602      	mov	r2, r0
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	619a      	str	r2, [r3, #24]
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_ZN6SdCardD1Ev>:
	virtual ~SdCard(){}
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <_ZN6SdCardD1Ev+0x1c>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	08013e54 	.word	0x08013e54

08002ae8 <_ZN6SdCardD0Ev>:
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ffe9 	bl	8002ac8 <_ZN6SdCardD1Ev>
 8002af6:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f00c fe7e 	bl	800f7fc <_ZdlPvj>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <_ZN6SdCardC1EPKcS1_>:
#include "SdCard.h"
#include "MyMain.h"
#include <stdio.h>
#include "cmsis_os2.h"

SdCard::SdCard(const char* name, const char* errorName)
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	4a0b      	ldr	r2, [pc, #44]	; (8002b48 <_ZN6SdCardC1EPKcS1_+0x3c>)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	601a      	str	r2, [r3, #0]
{
	strcpy(_fileName, name);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3304      	adds	r3, #4
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f00e fc6a 	bl	80113fe <strcpy>
	strcpy(_errorFileName, errorName);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3336      	adds	r3, #54	; 0x36
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f00e fc64 	bl	80113fe <strcpy>
	mount();
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f8ce 	bl	8002cd8 <_ZN6SdCard5mountEv>
}
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	08013e54 	.word	0x08013e54

08002b4c <_ZN6SdCard5printEPc>:

void SdCard::print(char* fileName)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b09c      	sub	sp, #112	; 0x70
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
//	osMutexAcquire(fileMutexHandle,  osWaitForever);
	char line[100];
	_fres = f_open(&_fil, fileName, FA_READ | FA_OPEN_ALWAYS);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002b5c:	2211      	movs	r2, #17
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f008 fcf5 	bl	800b550 <f_open>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
	if(_fres != FR_OK){
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <_ZN6SdCard5printEPc+0x34>
		printf("Error in file open(SdCard::print)\r\n");
 8002b7a:	4814      	ldr	r0, [pc, #80]	; (8002bcc <_ZN6SdCard5printEPc+0x80>)
 8002b7c:	f00e fbb6 	bl	80112ec <puts>
	}

	while(f_gets(line, sizeof(line), &_fil)){
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8002b86:	f107 030c 	add.w	r3, r7, #12
 8002b8a:	2164      	movs	r1, #100	; 0x64
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f009 fa6e 	bl	800c06e <f_gets>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d006      	beq.n	8002bb0 <_ZN6SdCard5printEPc+0x64>
		printf("%s\r\n", line);
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4809      	ldr	r0, [pc, #36]	; (8002bd0 <_ZN6SdCard5printEPc+0x84>)
 8002baa:	f00e fb19 	bl	80111e0 <iprintf>
	while(f_gets(line, sizeof(line), &_fil)){
 8002bae:	e7e7      	b.n	8002b80 <_ZN6SdCard5printEPc+0x34>
	}
	printf("\r\n");
 8002bb0:	4808      	ldr	r0, [pc, #32]	; (8002bd4 <_ZN6SdCard5printEPc+0x88>)
 8002bb2:	f00e fb9b 	bl	80112ec <puts>
	f_close(&_fil);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f009 fa27 	bl	800c010 <f_close>
//	osMutexRelease(fileMutexHandle);

}
 8002bc2:	bf00      	nop
 8002bc4:	3770      	adds	r7, #112	; 0x70
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	08013b04 	.word	0x08013b04
 8002bd0:	08013b28 	.word	0x08013b28
 8002bd4:	08013b30 	.word	0x08013b30

08002bd8 <_ZN6SdCard5clearEPc>:

void SdCard::clear(char* fileName)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
//	osMutexAcquire(fileMutexHandle,  osWaitForever);
	_fres = f_open(&_fil, fileName, FA_CREATE_ALWAYS);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002be8:	2208      	movs	r2, #8
 8002bea:	6839      	ldr	r1, [r7, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f008 fcaf 	bl	800b550 <f_open>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
	if(_fres != FR_OK){
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <_ZN6SdCard5clearEPc+0x36>
		printf("Error in file open(SdCard::clear)\r\n");
 8002c06:	4808      	ldr	r0, [pc, #32]	; (8002c28 <_ZN6SdCard5clearEPc+0x50>)
 8002c08:	f00e fb70 	bl	80112ec <puts>
 8002c0c:	e002      	b.n	8002c14 <_ZN6SdCard5clearEPc+0x3c>
	}
	else{
		printf("File cleared\r\n");
 8002c0e:	4807      	ldr	r0, [pc, #28]	; (8002c2c <_ZN6SdCard5clearEPc+0x54>)
 8002c10:	f00e fb6c 	bl	80112ec <puts>
	}

	f_close(&_fil);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f009 f9f8 	bl	800c010 <f_close>
//	osMutexRelease(fileMutexHandle);


}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	08013b34 	.word	0x08013b34
 8002c2c:	08013b58 	.word	0x08013b58

08002c30 <_ZN6SdCard5writeEPcS0_>:

void SdCard::write(char* fileName, char* str)
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
//	osMutexAcquire(fileMutexHandle,  osWaitForever);
	_fres = f_open(&_fil, fileName, FA_WRITE | FA_OPEN_APPEND);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c42:	2232      	movs	r2, #50	; 0x32
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f008 fc82 	bl	800b550 <f_open>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
	if(_fres!= FR_OK){
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <_ZN6SdCard5writeEPcS0_+0x40>
		printf("Error in file open(SdCard::write) %d\r\n", _fres);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002c66:	4619      	mov	r1, r3
 8002c68:	4818      	ldr	r0, [pc, #96]	; (8002ccc <_ZN6SdCard5writeEPcS0_+0x9c>)
 8002c6a:	f00e fab9 	bl	80111e0 <iprintf>
 8002c6e:	e023      	b.n	8002cb8 <_ZN6SdCard5writeEPcS0_+0x88>
	}
	else{
		UINT bytesWrote;
		_fres = f_write(&_fil, str, strlen(str), &bytesWrote);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f503 7427 	add.w	r4, r3, #668	; 0x29c
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fd fab4 	bl	80001e4 <strlen>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4620      	mov	r0, r4
 8002c86:	f008 ff96 	bl	800bbb6 <f_write>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
		if(_fres != FR_OK){
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <_ZN6SdCard5writeEPcS0_+0x7e>
			printf("Error in file open(SdCard::write-else) %d\r\n", _fres);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	480a      	ldr	r0, [pc, #40]	; (8002cd0 <_ZN6SdCard5writeEPcS0_+0xa0>)
 8002ca8:	f00e fa9a 	bl	80111e0 <iprintf>
 8002cac:	e004      	b.n	8002cb8 <_ZN6SdCard5writeEPcS0_+0x88>
		}
		else{
			printf("Success to write %i bytes\r\n", bytesWrote);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4808      	ldr	r0, [pc, #32]	; (8002cd4 <_ZN6SdCard5writeEPcS0_+0xa4>)
 8002cb4:	f00e fa94 	bl	80111e0 <iprintf>
		}
	}
	f_close(&_fil);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f009 f9a6 	bl	800c010 <f_close>

//	osMutexRelease(fileMutexHandle);

}
 8002cc4:	bf00      	nop
 8002cc6:	371c      	adds	r7, #28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd90      	pop	{r4, r7, pc}
 8002ccc:	08013b68 	.word	0x08013b68
 8002cd0:	08013b90 	.word	0x08013b90
 8002cd4:	08013bbc 	.word	0x08013bbc

08002cd8 <_ZN6SdCard5mountEv>:

void SdCard::mount()
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	_fres = f_mount(&_FatFs, "", 1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3368      	adds	r3, #104	; 0x68
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	490a      	ldr	r1, [pc, #40]	; (8002d10 <_ZN6SdCard5mountEv+0x38>)
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f008 fbcd 	bl	800b488 <f_mount>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
	if(_fres != FR_OK){
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <_ZN6SdCard5mountEv+0x30>
		printf("Error in file mount");
 8002d02:	4804      	ldr	r0, [pc, #16]	; (8002d14 <_ZN6SdCard5mountEv+0x3c>)
 8002d04:	f00e fa6c 	bl	80111e0 <iprintf>
	}

//_fres = f_mount
//	    f_mount(fs, "", 0);                    /* Mount the default drive */

}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	08013bd8 	.word	0x08013bd8
 8002d14:	08013bdc 	.word	0x08013bdc

08002d18 <communication>:
			handleCommand();
		}
	}
}
int communication()
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
	uint8_t ch;
	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8002d1e:	1db9      	adds	r1, r7, #6
 8002d20:	230a      	movs	r3, #10
 8002d22:	2201      	movs	r2, #1
 8002d24:	4839      	ldr	r0, [pc, #228]	; (8002e0c <communication+0xf4>)
 8002d26:	f005 fb9b 	bl	8008460 <HAL_UART_Receive>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d025      	beq.n	8002d80 <communication+0x68>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8002d34:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <communication+0xf4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf14      	ite	ne
 8002d42:	2301      	movne	r3, #1
 8002d44:	2300      	moveq	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <communication+0x3c>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8002d4c:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <communication+0xf4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2208      	movs	r2, #8
 8002d52:	621a      	str	r2, [r3, #32]
		}
		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8002d54:	4b2e      	ldr	r3, [pc, #184]	; (8002e10 <communication+0xf8>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <communication+0xfc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	da0d      	bge.n	8002d7c <communication+0x64>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8002d60:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <communication+0xf8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	492a      	ldr	r1, [pc, #168]	; (8002e10 <communication+0xf8>)
 8002d68:	600a      	str	r2, [r1, #0]
 8002d6a:	4a2b      	ldr	r2, [pc, #172]	; (8002e18 <communication+0x100>)
 8002d6c:	1899      	adds	r1, r3, r2
 8002d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d72:	2201      	movs	r2, #1
 8002d74:	4825      	ldr	r0, [pc, #148]	; (8002e0c <communication+0xf4>)
 8002d76:	f005 fadf 	bl	8008338 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8002d7a:	e7eb      	b.n	8002d54 <communication+0x3c>
		}
		return 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e040      	b.n	8002e02 <communication+0xea>
	}

	if (ch != '\r' && ch != '\n')
 8002d80:	79bb      	ldrb	r3, [r7, #6]
 8002d82:	2b0d      	cmp	r3, #13
 8002d84:	d016      	beq.n	8002db4 <communication+0x9c>
 8002d86:	79bb      	ldrb	r3, [r7, #6]
 8002d88:	2b0a      	cmp	r3, #10
 8002d8a:	d013      	beq.n	8002db4 <communication+0x9c>
	{
		if (cmdcount >= MAX_BUFFER_LENGTH)
 8002d8c:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <communication+0xfc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b63      	cmp	r3, #99	; 0x63
 8002d92:	dd05      	ble.n	8002da0 <communication+0x88>
		{
			cmdcount = 0;
 8002d94:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <communication+0xfc>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <communication+0xf8>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
		}
		cmdbuffer[cmdcount++] = ch;
 8002da0:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <communication+0xfc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	491b      	ldr	r1, [pc, #108]	; (8002e14 <communication+0xfc>)
 8002da8:	600a      	str	r2, [r1, #0]
 8002daa:	79b9      	ldrb	r1, [r7, #6]
 8002dac:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <communication+0x100>)
 8002dae:	54d1      	strb	r1, [r2, r3]
		return 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e026      	b.n	8002e02 <communication+0xea>
	}
	// here we have a time to print the command
	while (cmdprint < cmdcount)
 8002db4:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <communication+0xf8>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <communication+0xfc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	da0d      	bge.n	8002ddc <communication+0xc4>
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <communication+0xf8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	4912      	ldr	r1, [pc, #72]	; (8002e10 <communication+0xf8>)
 8002dc8:	600a      	str	r2, [r1, #0]
 8002dca:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <communication+0x100>)
 8002dcc:	1899      	adds	r1, r3, r2
 8002dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	480d      	ldr	r0, [pc, #52]	; (8002e0c <communication+0xf4>)
 8002dd6:	f005 faaf 	bl	8008338 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 8002dda:	e7eb      	b.n	8002db4 <communication+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8002ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002de0:	2202      	movs	r2, #2
 8002de2:	490e      	ldr	r1, [pc, #56]	; (8002e1c <communication+0x104>)
 8002de4:	4809      	ldr	r0, [pc, #36]	; (8002e0c <communication+0xf4>)
 8002de6:	f005 faa7 	bl	8008338 <HAL_UART_Transmit>
	cmdbuffer[cmdcount] = 0;
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <communication+0xfc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <communication+0x100>)
 8002df0:	2100      	movs	r1, #0
 8002df2:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8002df4:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <communication+0xfc>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <communication+0xf8>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
	return 1;
 8002e00:	2301      	movs	r3, #1
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000780 	.word	0x20000780
 8002e10:	20000448 	.word	0x20000448
 8002e14:	20000444 	.word	0x20000444
 8002e18:	200003e0 	.word	0x200003e0
 8002e1c:	08013bfc 	.word	0x08013bfc

08002e20 <handleCommand>:
void handleCommand()
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
	char * param = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]

	// find space to split a command to a command name and parameters
	char * delimPtr = strchr((const char*)cmdbuffer, ' ');
 8002e2a:	2120      	movs	r1, #32
 8002e2c:	4813      	ldr	r0, [pc, #76]	; (8002e7c <handleCommand+0x5c>)
 8002e2e:	f00e fad9 	bl	80113e4 <strchr>
 8002e32:	6038      	str	r0, [r7, #0]
	if (delimPtr != NULL) {
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d017      	beq.n	8002e6a <handleCommand+0x4a>
		// put null character to split command name and parameters
		*delimPtr = '\0';
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
		param = delimPtr + 1;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	3301      	adds	r3, #1
 8002e44:	607b      	str	r3, [r7, #4]
		// find first non space character - it's parameters beginning
		while (*param && *param == ' ') {
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <handleCommand+0x3e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d103      	bne.n	8002e5e <handleCommand+0x3e>
			param++;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	607b      	str	r3, [r7, #4]
		while (*param && *param == ' ') {
 8002e5c:	e7f3      	b.n	8002e46 <handleCommand+0x26>
		}
		if (*param == '\0') {
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <handleCommand+0x4a>
			param = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]
		}
	}
	cli.performCommand((char *)cmdbuffer, param);
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4903      	ldr	r1, [pc, #12]	; (8002e7c <handleCommand+0x5c>)
 8002e6e:	4804      	ldr	r0, [pc, #16]	; (8002e80 <handleCommand+0x60>)
 8002e70:	f7fe fae4 	bl	800143c <_ZN3CLI14performCommandEPcS0_>



}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	200003e0 	.word	0x200003e0
 8002e80:	2000044c 	.word	0x2000044c

08002e84 <_Z41__static_initialization_and_destruction_0ii>:
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d107      	bne.n	8002ea4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d102      	bne.n	8002ea4 <_Z41__static_initialization_and_destruction_0ii+0x20>
CLI cli;
 8002e9e:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002ea0:	f7fe f8ae 	bl	8001000 <_ZN3CLIC1Ev>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d107      	bne.n	8002eba <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d102      	bne.n	8002eba <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002eb4:	4803      	ldr	r0, [pc, #12]	; (8002ec4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002eb6:	f7fe f8b7 	bl	8001028 <_ZN3CLID1Ev>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	2000044c 	.word	0x2000044c

08002ec8 <_GLOBAL__sub_I_cmdbuffer>:
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	f7ff ffd7 	bl	8002e84 <_Z41__static_initialization_and_destruction_0ii>
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <_GLOBAL__sub_D_cmdbuffer>:
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7ff ffcf 	bl	8002e84 <_Z41__static_initialization_and_destruction_0ii>
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	4804      	ldr	r0, [pc, #16]	; (8002f10 <_write+0x28>)
 8002f00:	f005 fa1a 	bl	8008338 <HAL_UART_Transmit>
    return len;
 8002f04:	687b      	ldr	r3, [r7, #4]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000780 	.word	0x20000780

08002f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f18:	f000 fe48 	bl	8003bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f1c:	f000 f884 	bl	8003028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f20:	f000 fa48 	bl	80033b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002f24:	f000 fa16 	bl	8003354 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002f28:	f000 f9a8 	bl	800327c <MX_TIM6_Init>
  MX_TIM7_Init();
 8002f2c:	f000 f9dc 	bl	80032e8 <MX_TIM7_Init>
  MX_TIM3_Init();
 8002f30:	f000 f94a 	bl	80031c8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002f34:	f000 f8ca 	bl	80030cc <MX_I2C1_Init>
  MX_SPI1_Init();
 8002f38:	f000 f908 	bl	800314c <MX_SPI1_Init>
  MX_FATFS_Init();
 8002f3c:	f005 ffca 	bl	8008ed4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  printf("CHECK from main.c\r\n");
 8002f40:	4823      	ldr	r0, [pc, #140]	; (8002fd0 <main+0xbc>)
 8002f42:	f00e f9d3 	bl	80112ec <puts>

  HAL_NVIC_EnableIRQ( TIM6_IRQn );
 8002f46:	2036      	movs	r0, #54	; 0x36
 8002f48:	f000 ffa3 	bl	8003e92 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ( TIM3_IRQn  );
 8002f4c:	201d      	movs	r0, #29
 8002f4e:	f000 ffa0 	bl	8003e92 <HAL_NVIC_EnableIRQ>
//  HAL_TIM_Base_Start(&htim3);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);



  my_main();
 8002f52:	f7ff faaf 	bl	80024b4 <my_main>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002f56:	f009 f99d 	bl	800c294 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <main+0xc0>)
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	481e      	ldr	r0, [pc, #120]	; (8002fd8 <main+0xc4>)
 8002f60:	f009 f9e2 	bl	800c328 <osThreadNew>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <main+0xc8>)
 8002f68:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <main+0xcc>)
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	481d      	ldr	r0, [pc, #116]	; (8002fe4 <main+0xd0>)
 8002f70:	f009 f9da 	bl	800c328 <osThreadNew>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <main+0xd4>)
 8002f78:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8002f7a:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <main+0xd8>)
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	481c      	ldr	r0, [pc, #112]	; (8002ff0 <main+0xdc>)
 8002f80:	f009 f9d2 	bl	800c328 <osThreadNew>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <main+0xe0>)
 8002f88:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8002f8a:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <main+0xe4>)
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	481b      	ldr	r0, [pc, #108]	; (8002ffc <main+0xe8>)
 8002f90:	f009 f9ca 	bl	800c328 <osThreadNew>
 8002f94:	4603      	mov	r3, r0
 8002f96:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <main+0xec>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8002f9a:	4a1a      	ldr	r2, [pc, #104]	; (8003004 <main+0xf0>)
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	481a      	ldr	r0, [pc, #104]	; (8003008 <main+0xf4>)
 8002fa0:	f009 f9c2 	bl	800c328 <osThreadNew>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4a19      	ldr	r2, [pc, #100]	; (800300c <main+0xf8>)
 8002fa8:	6013      	str	r3, [r2, #0]

  /* creation of myTask06 */
  myTask06Handle = osThreadNew(StartTask06, NULL, &myTask06_attributes);
 8002faa:	4a19      	ldr	r2, [pc, #100]	; (8003010 <main+0xfc>)
 8002fac:	2100      	movs	r1, #0
 8002fae:	4819      	ldr	r0, [pc, #100]	; (8003014 <main+0x100>)
 8002fb0:	f009 f9ba 	bl	800c328 <osThreadNew>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4a18      	ldr	r2, [pc, #96]	; (8003018 <main+0x104>)
 8002fb8:	6013      	str	r3, [r2, #0]

  /* creation of myTask07 */
  myTask07Handle = osThreadNew(StartTask07, NULL, &myTask07_attributes);
 8002fba:	4a18      	ldr	r2, [pc, #96]	; (800301c <main+0x108>)
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4818      	ldr	r0, [pc, #96]	; (8003020 <main+0x10c>)
 8002fc0:	f009 f9b2 	bl	800c328 <osThreadNew>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4a17      	ldr	r2, [pc, #92]	; (8003024 <main+0x110>)
 8002fc8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002fca:	f009 f987 	bl	800c2dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002fce:	e7fe      	b.n	8002fce <main+0xba>
 8002fd0:	08013c54 	.word	0x08013c54
 8002fd4:	08013e5c 	.word	0x08013e5c
 8002fd8:	0800352d 	.word	0x0800352d
 8002fdc:	20000804 	.word	0x20000804
 8002fe0:	08013e80 	.word	0x08013e80
 8002fe4:	0800353d 	.word	0x0800353d
 8002fe8:	20000808 	.word	0x20000808
 8002fec:	08013ea4 	.word	0x08013ea4
 8002ff0:	0800355b 	.word	0x0800355b
 8002ff4:	2000080c 	.word	0x2000080c
 8002ff8:	08013ec8 	.word	0x08013ec8
 8002ffc:	08003571 	.word	0x08003571
 8003000:	20000810 	.word	0x20000810
 8003004:	08013eec 	.word	0x08013eec
 8003008:	08003585 	.word	0x08003585
 800300c:	20000814 	.word	0x20000814
 8003010:	08013f10 	.word	0x08013f10
 8003014:	0800358f 	.word	0x0800358f
 8003018:	20000818 	.word	0x20000818
 800301c:	08013f34 	.word	0x08013f34
 8003020:	080035a5 	.word	0x080035a5
 8003024:	2000081c 	.word	0x2000081c

08003028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b096      	sub	sp, #88	; 0x58
 800302c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800302e:	f107 0314 	add.w	r3, r7, #20
 8003032:	2244      	movs	r2, #68	; 0x44
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f00d fb80 	bl	801073c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800303c:	463b      	mov	r3, r7
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	60da      	str	r2, [r3, #12]
 8003048:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800304a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800304e:	f002 f87d 	bl	800514c <HAL_PWREx_ControlVoltageScaling>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003058:	f000 faae 	bl	80035b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800305c:	2302      	movs	r3, #2
 800305e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003064:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003066:	2310      	movs	r3, #16
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800306a:	2302      	movs	r3, #2
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800306e:	2302      	movs	r3, #2
 8003070:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003072:	2301      	movs	r3, #1
 8003074:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003076:	230a      	movs	r3, #10
 8003078:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800307a:	2307      	movs	r3, #7
 800307c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800307e:	2302      	movs	r3, #2
 8003080:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003082:	2302      	movs	r3, #2
 8003084:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4618      	mov	r0, r3
 800308c:	f002 f8b4 	bl	80051f8 <HAL_RCC_OscConfig>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003096:	f000 fa8f 	bl	80035b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800309a:	230f      	movs	r3, #15
 800309c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800309e:	2303      	movs	r3, #3
 80030a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030ae:	463b      	mov	r3, r7
 80030b0:	2104      	movs	r1, #4
 80030b2:	4618      	mov	r0, r3
 80030b4:	f002 fc7c 	bl	80059b0 <HAL_RCC_ClockConfig>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80030be:	f000 fa7b 	bl	80035b8 <Error_Handler>
  }
}
 80030c2:	bf00      	nop
 80030c4:	3758      	adds	r7, #88	; 0x58
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030d0:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <MX_I2C1_Init+0x74>)
 80030d2:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <MX_I2C1_Init+0x78>)
 80030d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <MX_I2C1_Init+0x74>)
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <MX_I2C1_Init+0x7c>)
 80030da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80030dc:	4b18      	ldr	r3, [pc, #96]	; (8003140 <MX_I2C1_Init+0x74>)
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <MX_I2C1_Init+0x74>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <MX_I2C1_Init+0x74>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80030ee:	4b14      	ldr	r3, [pc, #80]	; (8003140 <MX_I2C1_Init+0x74>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <MX_I2C1_Init+0x74>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <MX_I2C1_Init+0x74>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <MX_I2C1_Init+0x74>)
 8003102:	2200      	movs	r2, #0
 8003104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003106:	480e      	ldr	r0, [pc, #56]	; (8003140 <MX_I2C1_Init+0x74>)
 8003108:	f001 fb7e 	bl	8004808 <HAL_I2C_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003112:	f000 fa51 	bl	80035b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003116:	2100      	movs	r1, #0
 8003118:	4809      	ldr	r0, [pc, #36]	; (8003140 <MX_I2C1_Init+0x74>)
 800311a:	f001 ff71 	bl	8005000 <HAL_I2CEx_ConfigAnalogFilter>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003124:	f000 fa48 	bl	80035b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003128:	2100      	movs	r1, #0
 800312a:	4805      	ldr	r0, [pc, #20]	; (8003140 <MX_I2C1_Init+0x74>)
 800312c:	f001 ffb3 	bl	8005096 <HAL_I2CEx_ConfigDigitalFilter>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003136:	f000 fa3f 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200005e4 	.word	0x200005e4
 8003144:	40005400 	.word	0x40005400
 8003148:	10909cec 	.word	0x10909cec

0800314c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003150:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <MX_SPI1_Init+0x74>)
 8003152:	4a1c      	ldr	r2, [pc, #112]	; (80031c4 <MX_SPI1_Init+0x78>)
 8003154:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <MX_SPI1_Init+0x74>)
 8003158:	f44f 7282 	mov.w	r2, #260	; 0x104
 800315c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <MX_SPI1_Init+0x74>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003164:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <MX_SPI1_Init+0x74>)
 8003166:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800316a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800316c:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <MX_SPI1_Init+0x74>)
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <MX_SPI1_Init+0x74>)
 8003174:	2200      	movs	r2, #0
 8003176:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003178:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <MX_SPI1_Init+0x74>)
 800317a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003180:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <MX_SPI1_Init+0x74>)
 8003182:	2230      	movs	r2, #48	; 0x30
 8003184:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003186:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <MX_SPI1_Init+0x74>)
 8003188:	2200      	movs	r2, #0
 800318a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <MX_SPI1_Init+0x74>)
 800318e:	2200      	movs	r2, #0
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003192:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <MX_SPI1_Init+0x74>)
 8003194:	2200      	movs	r2, #0
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <MX_SPI1_Init+0x74>)
 800319a:	2207      	movs	r2, #7
 800319c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <MX_SPI1_Init+0x74>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <MX_SPI1_Init+0x74>)
 80031a6:	2208      	movs	r2, #8
 80031a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031aa:	4805      	ldr	r0, [pc, #20]	; (80031c0 <MX_SPI1_Init+0x74>)
 80031ac:	f003 fae0 	bl	8006770 <HAL_SPI_Init>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80031b6:	f000 f9ff 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20000638 	.word	0x20000638
 80031c4:	40013000 	.word	0x40013000

080031c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	; 0x28
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ce:	f107 031c 	add.w	r3, r7, #28
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031da:	463b      	mov	r3, r7
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
 80031e8:	615a      	str	r2, [r3, #20]
 80031ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031ec:	4b21      	ldr	r3, [pc, #132]	; (8003274 <MX_TIM3_Init+0xac>)
 80031ee:	4a22      	ldr	r2, [pc, #136]	; (8003278 <MX_TIM3_Init+0xb0>)
 80031f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 80031f2:	4b20      	ldr	r3, [pc, #128]	; (8003274 <MX_TIM3_Init+0xac>)
 80031f4:	f240 321f 	movw	r2, #799	; 0x31f
 80031f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <MX_TIM3_Init+0xac>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <MX_TIM3_Init+0xac>)
 8003202:	2264      	movs	r2, #100	; 0x64
 8003204:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003206:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <MX_TIM3_Init+0xac>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <MX_TIM3_Init+0xac>)
 800320e:	2200      	movs	r2, #0
 8003210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003212:	4818      	ldr	r0, [pc, #96]	; (8003274 <MX_TIM3_Init+0xac>)
 8003214:	f003 ffad 	bl	8007172 <HAL_TIM_PWM_Init>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800321e:	f000 f9cb 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800322a:	f107 031c 	add.w	r3, r7, #28
 800322e:	4619      	mov	r1, r3
 8003230:	4810      	ldr	r0, [pc, #64]	; (8003274 <MX_TIM3_Init+0xac>)
 8003232:	f004 ff8d 	bl	8008150 <HAL_TIMEx_MasterConfigSynchronization>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800323c:	f000 f9bc 	bl	80035b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003240:	2360      	movs	r3, #96	; 0x60
 8003242:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8003244:	2332      	movs	r3, #50	; 0x32
 8003246:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003248:	2300      	movs	r3, #0
 800324a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800324c:	2300      	movs	r3, #0
 800324e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003250:	463b      	mov	r3, r7
 8003252:	2200      	movs	r2, #0
 8003254:	4619      	mov	r1, r3
 8003256:	4807      	ldr	r0, [pc, #28]	; (8003274 <MX_TIM3_Init+0xac>)
 8003258:	f004 fa9e 	bl	8007798 <HAL_TIM_PWM_ConfigChannel>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003262:	f000 f9a9 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003266:	4803      	ldr	r0, [pc, #12]	; (8003274 <MX_TIM3_Init+0xac>)
 8003268:	f000 fad4 	bl	8003814 <HAL_TIM_MspPostInit>

}
 800326c:	bf00      	nop
 800326e:	3728      	adds	r7, #40	; 0x28
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	2000069c 	.word	0x2000069c
 8003278:	40000400 	.word	0x40000400

0800327c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <MX_TIM6_Init+0x64>)
 800328e:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <MX_TIM6_Init+0x68>)
 8003290:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8003292:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <MX_TIM6_Init+0x64>)
 8003294:	224f      	movs	r2, #79	; 0x4f
 8003296:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <MX_TIM6_Init+0x64>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <MX_TIM6_Init+0x64>)
 80032a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032a4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <MX_TIM6_Init+0x64>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80032ac:	480c      	ldr	r0, [pc, #48]	; (80032e0 <MX_TIM6_Init+0x64>)
 80032ae:	f003 fe79 	bl	8006fa4 <HAL_TIM_Base_Init>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80032b8:	f000 f97e 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032bc:	2300      	movs	r3, #0
 80032be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4805      	ldr	r0, [pc, #20]	; (80032e0 <MX_TIM6_Init+0x64>)
 80032ca:	f004 ff41 	bl	8008150 <HAL_TIMEx_MasterConfigSynchronization>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80032d4:	f000 f970 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200006e8 	.word	0x200006e8
 80032e4:	40001000 	.word	0x40001000

080032e8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <MX_TIM7_Init+0x64>)
 80032fa:	4a15      	ldr	r2, [pc, #84]	; (8003350 <MX_TIM7_Init+0x68>)
 80032fc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <MX_TIM7_Init+0x64>)
 8003300:	224f      	movs	r2, #79	; 0x4f
 8003302:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <MX_TIM7_Init+0x64>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <MX_TIM7_Init+0x64>)
 800330c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003310:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003312:	4b0e      	ldr	r3, [pc, #56]	; (800334c <MX_TIM7_Init+0x64>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003318:	480c      	ldr	r0, [pc, #48]	; (800334c <MX_TIM7_Init+0x64>)
 800331a:	f003 fe43 	bl	8006fa4 <HAL_TIM_Base_Init>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003324:	f000 f948 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003328:	2300      	movs	r3, #0
 800332a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	4619      	mov	r1, r3
 8003334:	4805      	ldr	r0, [pc, #20]	; (800334c <MX_TIM7_Init+0x64>)
 8003336:	f004 ff0b 	bl	8008150 <HAL_TIMEx_MasterConfigSynchronization>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003340:	f000 f93a 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000734 	.word	0x20000734
 8003350:	40001400 	.word	0x40001400

08003354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003358:	4b14      	ldr	r3, [pc, #80]	; (80033ac <MX_USART2_UART_Init+0x58>)
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <MX_USART2_UART_Init+0x5c>)
 800335c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <MX_USART2_UART_Init+0x58>)
 8003360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <MX_USART2_UART_Init+0x58>)
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800336c:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <MX_USART2_UART_Init+0x58>)
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003372:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <MX_USART2_UART_Init+0x58>)
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <MX_USART2_UART_Init+0x58>)
 800337a:	220c      	movs	r2, #12
 800337c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <MX_USART2_UART_Init+0x58>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <MX_USART2_UART_Init+0x58>)
 8003386:	2200      	movs	r2, #0
 8003388:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <MX_USART2_UART_Init+0x58>)
 800338c:	2200      	movs	r2, #0
 800338e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <MX_USART2_UART_Init+0x58>)
 8003392:	2200      	movs	r2, #0
 8003394:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003396:	4805      	ldr	r0, [pc, #20]	; (80033ac <MX_USART2_UART_Init+0x58>)
 8003398:	f004 ff80 	bl	800829c <HAL_UART_Init>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80033a2:	f000 f909 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000780 	.word	0x20000780
 80033b0:	40004400 	.word	0x40004400

080033b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ba:	f107 0314 	add.w	r3, r7, #20
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	60da      	str	r2, [r3, #12]
 80033c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ca:	4b55      	ldr	r3, [pc, #340]	; (8003520 <MX_GPIO_Init+0x16c>)
 80033cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ce:	4a54      	ldr	r2, [pc, #336]	; (8003520 <MX_GPIO_Init+0x16c>)
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033d6:	4b52      	ldr	r3, [pc, #328]	; (8003520 <MX_GPIO_Init+0x16c>)
 80033d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033e2:	4b4f      	ldr	r3, [pc, #316]	; (8003520 <MX_GPIO_Init+0x16c>)
 80033e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e6:	4a4e      	ldr	r2, [pc, #312]	; (8003520 <MX_GPIO_Init+0x16c>)
 80033e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ee:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <MX_GPIO_Init+0x16c>)
 80033f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	4b49      	ldr	r3, [pc, #292]	; (8003520 <MX_GPIO_Init+0x16c>)
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fe:	4a48      	ldr	r2, [pc, #288]	; (8003520 <MX_GPIO_Init+0x16c>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003406:	4b46      	ldr	r3, [pc, #280]	; (8003520 <MX_GPIO_Init+0x16c>)
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003412:	4b43      	ldr	r3, [pc, #268]	; (8003520 <MX_GPIO_Init+0x16c>)
 8003414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003416:	4a42      	ldr	r2, [pc, #264]	; (8003520 <MX_GPIO_Init+0x16c>)
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800341e:	4b40      	ldr	r3, [pc, #256]	; (8003520 <MX_GPIO_Init+0x16c>)
 8003420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RED_Pin|BLU_Pin, GPIO_PIN_RESET);
 800342a:	2200      	movs	r2, #0
 800342c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003430:	483c      	ldr	r0, [pc, #240]	; (8003524 <MX_GPIO_Init+0x170>)
 8003432:	f001 f99f 	bl	8004774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003436:	2200      	movs	r2, #0
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	483b      	ldr	r0, [pc, #236]	; (8003528 <MX_GPIO_Init+0x174>)
 800343c:	f001 f99a 	bl	8004774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003446:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800344a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	4619      	mov	r1, r3
 8003456:	4833      	ldr	r0, [pc, #204]	; (8003524 <MX_GPIO_Init+0x170>)
 8003458:	f000 ffca 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin BLU_Pin */
  GPIO_InitStruct.Pin = RED_Pin|BLU_Pin;
 800345c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003462:	2301      	movs	r3, #1
 8003464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	2300      	movs	r3, #0
 800346c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800346e:	f107 0314 	add.w	r3, r7, #20
 8003472:	4619      	mov	r1, r3
 8003474:	482b      	ldr	r0, [pc, #172]	; (8003524 <MX_GPIO_Init+0x170>)
 8003476:	f000 ffbb 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 800347a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800347e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003480:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	4619      	mov	r1, r3
 8003490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003494:	f000 ffac 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8003498:	2308      	movs	r3, #8
 800349a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800349c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80034a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 80034a6:	f107 0314 	add.w	r3, r7, #20
 80034aa:	4619      	mov	r1, r3
 80034ac:	481e      	ldr	r0, [pc, #120]	; (8003528 <MX_GPIO_Init+0x174>)
 80034ae:	f000 ff9f 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80034b2:	2320      	movs	r3, #32
 80034b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80034ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	4619      	mov	r1, r3
 80034c6:	4818      	ldr	r0, [pc, #96]	; (8003528 <MX_GPIO_Init+0x174>)
 80034c8:	f000 ff92 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80034cc:	2340      	movs	r3, #64	; 0x40
 80034ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d0:	2301      	movs	r3, #1
 80034d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	4619      	mov	r1, r3
 80034e2:	4811      	ldr	r0, [pc, #68]	; (8003528 <MX_GPIO_Init+0x174>)
 80034e4:	f000 ff84 	bl	80043f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	2105      	movs	r1, #5
 80034ec:	2009      	movs	r0, #9
 80034ee:	f000 fcb4 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80034f2:	2009      	movs	r0, #9
 80034f4:	f000 fccd 	bl	8003e92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80034f8:	2200      	movs	r2, #0
 80034fa:	2105      	movs	r1, #5
 80034fc:	2017      	movs	r0, #23
 80034fe:	f000 fcac 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003502:	2017      	movs	r0, #23
 8003504:	f000 fcc5 	bl	8003e92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003508:	2200      	movs	r2, #0
 800350a:	2105      	movs	r1, #5
 800350c:	2028      	movs	r0, #40	; 0x28
 800350e:	f000 fca4 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003512:	2028      	movs	r0, #40	; 0x28
 8003514:	f000 fcbd 	bl	8003e92 <HAL_NVIC_EnableIRQ>

}
 8003518:	bf00      	nop
 800351a:	3728      	adds	r7, #40	; 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	48000800 	.word	0x48000800
 8003528:	48000400 	.word	0x48000400

0800352c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003534:	2001      	movs	r0, #1
 8003536:	f008 ff89 	bl	800c44c <osDelay>
 800353a:	e7fb      	b.n	8003534 <StartDefaultTask+0x8>

0800353c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
__weak void StartTask02(void *argument)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 * */

  for(;;)
  {
//	printf("FROM TASK 2\r\n");
    if(communication()){
 8003544:	f7ff fbe8 	bl	8002d18 <communication>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <StartTask02+0x16>
    	handleCommand();
 800354e:	f7ff fc67 	bl	8002e20 <handleCommand>
    }
	osDelay(1);
 8003552:	2001      	movs	r0, #1
 8003554:	f008 ff7a 	bl	800c44c <osDelay>
    if(communication()){
 8003558:	e7f4      	b.n	8003544 <StartTask02+0x8>

0800355a <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
__weak void StartTask03(void *argument)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 * 		every 1 second and stored in the dht.temperature
 * ------------------------------------------
 * */
  for(;;)
  {
	 dhtTask();
 8003562:	f7fe fff5 	bl	8002550 <dhtTask>
    osDelay(1000);
 8003566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800356a:	f008 ff6f 	bl	800c44c <osDelay>
	 dhtTask();
 800356e:	e7f8      	b.n	8003562 <StartTask03+0x8>

08003570 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
__weak void StartTask04(void *argument)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 * ------------------------------------------
 * */

  for(;;)
  {
	LedTask();
 8003578:	f7ff f94e 	bl	8002818 <LedTask>
    osDelay(100);
 800357c:	2064      	movs	r0, #100	; 0x64
 800357e:	f008 ff65 	bl	800c44c <osDelay>
	LedTask();
 8003582:	e7f9      	b.n	8003578 <StartTask04+0x8>

08003584 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
__weak void StartTask05(void *argument)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 * 			[ MyMain.cpp > DateTime CurrentTime ]
 *
 * ------------------------------------------
 * */

  for(;;)
 800358c:	e7fe      	b.n	800358c <StartTask05+0x8>

0800358e <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 * 					  monitor states
 * ------------------------------------------
 * */
  for(;;)
  {
	mainTask();
 8003596:	f7fe ffe5 	bl	8002564 <mainTask>
    osDelay(1000);
 800359a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800359e:	f008 ff55 	bl	800c44c <osDelay>
	mainTask();
 80035a2:	e7f8      	b.n	8003596 <StartTask06+0x8>

080035a4 <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  /* Infinite loop */
  for(;;)
  {
	  LogWriteTask();
 80035ac:	f7ff f916 	bl	80027dc <LogWriteTask>
    osDelay(1);
 80035b0:	2001      	movs	r0, #1
 80035b2:	f008 ff4b 	bl	800c44c <osDelay>
	  LogWriteTask();
 80035b6:	e7f9      	b.n	80035ac <StartTask07+0x8>

080035b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035bc:	b672      	cpsid	i
}
 80035be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035c0:	e7fe      	b.n	80035c0 <Error_Handler+0x8>
	...

080035c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ca:	4b11      	ldr	r3, [pc, #68]	; (8003610 <HAL_MspInit+0x4c>)
 80035cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ce:	4a10      	ldr	r2, [pc, #64]	; (8003610 <HAL_MspInit+0x4c>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6613      	str	r3, [r2, #96]	; 0x60
 80035d6:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_MspInit+0x4c>)
 80035d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_MspInit+0x4c>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <HAL_MspInit+0x4c>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	6593      	str	r3, [r2, #88]	; 0x58
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <HAL_MspInit+0x4c>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	210f      	movs	r1, #15
 80035fe:	f06f 0001 	mvn.w	r0, #1
 8003602:	f000 fc2a 	bl	8003e5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000

08003614 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b0ac      	sub	sp, #176	; 0xb0
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	2288      	movs	r2, #136	; 0x88
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f00d f881 	bl	801073c <memset>
  if(hi2c->Instance==I2C1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <HAL_I2C_MspInit+0xb0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d13b      	bne.n	80036bc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003644:	2340      	movs	r3, #64	; 0x40
 8003646:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003648:	2300      	movs	r3, #0
 800364a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800364c:	f107 0314 	add.w	r3, r7, #20
 8003650:	4618      	mov	r0, r3
 8003652:	f002 fbd1 	bl	8005df8 <HAL_RCCEx_PeriphCLKConfig>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800365c:	f7ff ffac 	bl	80035b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003660:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_I2C_MspInit+0xb4>)
 8003662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003664:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <HAL_I2C_MspInit+0xb4>)
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800366c:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <HAL_I2C_MspInit+0xb4>)
 800366e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003678:	f44f 7340 	mov.w	r3, #768	; 0x300
 800367c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003680:	2312      	movs	r3, #18
 8003682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368c:	2303      	movs	r3, #3
 800368e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003692:	2304      	movs	r3, #4
 8003694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003698:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800369c:	4619      	mov	r1, r3
 800369e:	480b      	ldr	r0, [pc, #44]	; (80036cc <HAL_I2C_MspInit+0xb8>)
 80036a0:	f000 fea6 	bl	80043f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <HAL_I2C_MspInit+0xb4>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a8:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <HAL_I2C_MspInit+0xb4>)
 80036aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036ae:	6593      	str	r3, [r2, #88]	; 0x58
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_I2C_MspInit+0xb4>)
 80036b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036bc:	bf00      	nop
 80036be:	37b0      	adds	r7, #176	; 0xb0
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40005400 	.word	0x40005400
 80036c8:	40021000 	.word	0x40021000
 80036cc:	48000400 	.word	0x48000400

080036d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	; 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a17      	ldr	r2, [pc, #92]	; (800374c <HAL_SPI_MspInit+0x7c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d128      	bne.n	8003744 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036f2:	4b17      	ldr	r3, [pc, #92]	; (8003750 <HAL_SPI_MspInit+0x80>)
 80036f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f6:	4a16      	ldr	r2, [pc, #88]	; (8003750 <HAL_SPI_MspInit+0x80>)
 80036f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036fc:	6613      	str	r3, [r2, #96]	; 0x60
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_SPI_MspInit+0x80>)
 8003700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370a:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_SPI_MspInit+0x80>)
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	4a10      	ldr	r2, [pc, #64]	; (8003750 <HAL_SPI_MspInit+0x80>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_SPI_MspInit+0x80>)
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003722:	23e0      	movs	r3, #224	; 0xe0
 8003724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
 8003728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372e:	2303      	movs	r3, #3
 8003730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003732:	2305      	movs	r3, #5
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003736:	f107 0314 	add.w	r3, r7, #20
 800373a:	4619      	mov	r1, r3
 800373c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003740:	f000 fe56 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003744:	bf00      	nop
 8003746:	3728      	adds	r7, #40	; 0x28
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40013000 	.word	0x40013000
 8003750:	40021000 	.word	0x40021000

08003754 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0d      	ldr	r2, [pc, #52]	; (8003798 <HAL_TIM_PWM_MspInit+0x44>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d113      	bne.n	800378e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <HAL_TIM_PWM_MspInit+0x48>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	4a0c      	ldr	r2, [pc, #48]	; (800379c <HAL_TIM_PWM_MspInit+0x48>)
 800376c:	f043 0302 	orr.w	r3, r3, #2
 8003770:	6593      	str	r3, [r2, #88]	; 0x58
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_TIM_PWM_MspInit+0x48>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2105      	movs	r1, #5
 8003782:	201d      	movs	r0, #29
 8003784:	f000 fb69 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003788:	201d      	movs	r0, #29
 800378a:	f000 fb82 	bl	8003e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40000400 	.word	0x40000400
 800379c:	40021000 	.word	0x40021000

080037a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a16      	ldr	r2, [pc, #88]	; (8003808 <HAL_TIM_Base_MspInit+0x68>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10c      	bne.n	80037cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037b2:	4b16      	ldr	r3, [pc, #88]	; (800380c <HAL_TIM_Base_MspInit+0x6c>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	4a15      	ldr	r2, [pc, #84]	; (800380c <HAL_TIM_Base_MspInit+0x6c>)
 80037b8:	f043 0310 	orr.w	r3, r3, #16
 80037bc:	6593      	str	r3, [r2, #88]	; 0x58
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <HAL_TIM_Base_MspInit+0x6c>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80037ca:	e018      	b.n	80037fe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0f      	ldr	r2, [pc, #60]	; (8003810 <HAL_TIM_Base_MspInit+0x70>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d113      	bne.n	80037fe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <HAL_TIM_Base_MspInit+0x6c>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	4a0c      	ldr	r2, [pc, #48]	; (800380c <HAL_TIM_Base_MspInit+0x6c>)
 80037dc:	f043 0320 	orr.w	r3, r3, #32
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <HAL_TIM_Base_MspInit+0x6c>)
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80037ee:	2200      	movs	r2, #0
 80037f0:	2105      	movs	r1, #5
 80037f2:	2037      	movs	r0, #55	; 0x37
 80037f4:	f000 fb31 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80037f8:	2037      	movs	r0, #55	; 0x37
 80037fa:	f000 fb4a 	bl	8003e92 <HAL_NVIC_EnableIRQ>
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40001000 	.word	0x40001000
 800380c:	40021000 	.word	0x40021000
 8003810:	40001400 	.word	0x40001400

08003814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381c:	f107 030c 	add.w	r3, r7, #12
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a11      	ldr	r2, [pc, #68]	; (8003878 <HAL_TIM_MspPostInit+0x64>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d11b      	bne.n	800386e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <HAL_TIM_MspPostInit+0x68>)
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	4a10      	ldr	r2, [pc, #64]	; (800387c <HAL_TIM_MspPostInit+0x68>)
 800383c:	f043 0302 	orr.w	r3, r3, #2
 8003840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003842:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_TIM_MspPostInit+0x68>)
 8003844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800384e:	2310      	movs	r3, #16
 8003850:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385a:	2300      	movs	r3, #0
 800385c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800385e:	2302      	movs	r3, #2
 8003860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003862:	f107 030c 	add.w	r3, r7, #12
 8003866:	4619      	mov	r1, r3
 8003868:	4805      	ldr	r0, [pc, #20]	; (8003880 <HAL_TIM_MspPostInit+0x6c>)
 800386a:	f000 fdc1 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800386e:	bf00      	nop
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40000400 	.word	0x40000400
 800387c:	40021000 	.word	0x40021000
 8003880:	48000400 	.word	0x48000400

08003884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b0ac      	sub	sp, #176	; 0xb0
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	2288      	movs	r2, #136	; 0x88
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f00c ff49 	bl	801073c <memset>
  if(huart->Instance==USART2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a21      	ldr	r2, [pc, #132]	; (8003934 <HAL_UART_MspInit+0xb0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d13b      	bne.n	800392c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80038b4:	2302      	movs	r3, #2
 80038b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038b8:	2300      	movs	r3, #0
 80038ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	4618      	mov	r0, r3
 80038c2:	f002 fa99 	bl	8005df8 <HAL_RCCEx_PeriphCLKConfig>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80038cc:	f7ff fe74 	bl	80035b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_UART_MspInit+0xb4>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	4a18      	ldr	r2, [pc, #96]	; (8003938 <HAL_UART_MspInit+0xb4>)
 80038d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038da:	6593      	str	r3, [r2, #88]	; 0x58
 80038dc:	4b16      	ldr	r3, [pc, #88]	; (8003938 <HAL_UART_MspInit+0xb4>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <HAL_UART_MspInit+0xb4>)
 80038ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ec:	4a12      	ldr	r2, [pc, #72]	; (8003938 <HAL_UART_MspInit+0xb4>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038f4:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_UART_MspInit+0xb4>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003900:	230c      	movs	r3, #12
 8003902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003906:	2302      	movs	r3, #2
 8003908:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003912:	2303      	movs	r3, #3
 8003914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003918:	2307      	movs	r3, #7
 800391a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003922:	4619      	mov	r1, r3
 8003924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003928:	f000 fd62 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800392c:	bf00      	nop
 800392e:	37b0      	adds	r7, #176	; 0xb0
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40004400 	.word	0x40004400
 8003938:	40021000 	.word	0x40021000

0800393c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003940:	e7fe      	b.n	8003940 <NMI_Handler+0x4>

08003942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003942:	b480      	push	{r7}
 8003944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003946:	e7fe      	b.n	8003946 <HardFault_Handler+0x4>

08003948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800394c:	e7fe      	b.n	800394c <MemManage_Handler+0x4>

0800394e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003952:	e7fe      	b.n	8003952 <BusFault_Handler+0x4>

08003954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003958:	e7fe      	b.n	8003958 <UsageFault_Handler+0x4>

0800395a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800396c:	f000 f97a 	bl	8003c64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003970:	f00a fdde 	bl	800e530 <xTaskGetSchedulerState>
 8003974:	4603      	mov	r3, r0
 8003976:	2b01      	cmp	r3, #1
 8003978:	d001      	beq.n	800397e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800397a:	f00b fcc5 	bl	800f308 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}

08003982 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8003986:	2008      	movs	r0, #8
 8003988:	f000 ff26 	bl	80047d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}

08003990 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DHT11_Pin);
 8003994:	2020      	movs	r0, #32
 8003996:	f000 ff1f 	bl	80047d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039a4:	4802      	ldr	r0, [pc, #8]	; (80039b0 <TIM3_IRQHandler+0x10>)
 80039a6:	f003 fdd7 	bl	8007558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	2000069c 	.word	0x2000069c

080039b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 80039b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80039bc:	f000 ff0c 	bl	80047d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80039c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039c4:	f000 ff08 	bl	80047d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}

080039cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <TIM7_IRQHandler+0x10>)
 80039d2:	f003 fdc1 	bl	8007558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000734 	.word	0x20000734

080039e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
	return 1;
 80039e4:	2301      	movs	r3, #1
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <_kill>:

int _kill(int pid, int sig)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039fa:	f00c fe57 	bl	80106ac <__errno>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2216      	movs	r2, #22
 8003a02:	601a      	str	r2, [r3, #0]
	return -1;
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_exit>:

void _exit (int status)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a18:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff ffe7 	bl	80039f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a22:	e7fe      	b.n	8003a22 <_exit+0x12>

08003a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e00a      	b.n	8003a4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a36:	f3af 8000 	nop.w
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	60ba      	str	r2, [r7, #8]
 8003a42:	b2ca      	uxtb	r2, r1
 8003a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	dbf0      	blt.n	8003a36 <_read+0x12>
	}

return len;
 8003a54:	687b      	ldr	r3, [r7, #4]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
	return -1;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a86:	605a      	str	r2, [r3, #4]
	return 0;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <_isatty>:

int _isatty(int file)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
	return 1;
 8003a9e:	2301      	movs	r3, #1
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
	return 0;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ad0:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <_sbrk+0x5c>)
 8003ad2:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <_sbrk+0x60>)
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003adc:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <_sbrk+0x64>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ae4:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <_sbrk+0x64>)
 8003ae6:	4a12      	ldr	r2, [pc, #72]	; (8003b30 <_sbrk+0x68>)
 8003ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <_sbrk+0x64>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d207      	bcs.n	8003b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003af8:	f00c fdd8 	bl	80106ac <__errno>
 8003afc:	4603      	mov	r3, r0
 8003afe:	220c      	movs	r2, #12
 8003b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b02:	f04f 33ff 	mov.w	r3, #4294967295
 8003b06:	e009      	b.n	8003b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b08:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <_sbrk+0x64>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b0e:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <_sbrk+0x64>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	4a05      	ldr	r2, [pc, #20]	; (8003b2c <_sbrk+0x64>)
 8003b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20018000 	.word	0x20018000
 8003b28:	00000400 	.word	0x00000400
 8003b2c:	20000820 	.word	0x20000820
 8003b30:	20003518 	.word	0x20003518

08003b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <SystemInit+0x20>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <SystemInit+0x20>)
 8003b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b5c:	f7ff ffea 	bl	8003b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b60:	480c      	ldr	r0, [pc, #48]	; (8003b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b62:	490d      	ldr	r1, [pc, #52]	; (8003b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b64:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <LoopForever+0xe>)
  movs r3, #0
 8003b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b68:	e002      	b.n	8003b70 <LoopCopyDataInit>

08003b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b6e:	3304      	adds	r3, #4

08003b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b74:	d3f9      	bcc.n	8003b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b76:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b78:	4c0a      	ldr	r4, [pc, #40]	; (8003ba4 <LoopForever+0x16>)
  movs r3, #0
 8003b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b7c:	e001      	b.n	8003b82 <LoopFillZerobss>

08003b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b80:	3204      	adds	r2, #4

08003b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b84:	d3fb      	bcc.n	8003b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b86:	f00c fd97 	bl	80106b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b8a:	f7ff f9c3 	bl	8002f14 <main>

08003b8e <LoopForever>:

LoopForever:
    b LoopForever
 8003b8e:	e7fe      	b.n	8003b8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b98:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8003b9c:	0801444c 	.word	0x0801444c
  ldr r2, =_sbss
 8003ba0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003ba4:	20003514 	.word	0x20003514

08003ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ba8:	e7fe      	b.n	8003ba8 <ADC1_2_IRQHandler>
	...

08003bac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <HAL_Init+0x3c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <HAL_Init+0x3c>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bc2:	2003      	movs	r0, #3
 8003bc4:	f000 f93e 	bl	8003e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bc8:	200f      	movs	r0, #15
 8003bca:	f000 f80f 	bl	8003bec <HAL_InitTick>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	71fb      	strb	r3, [r7, #7]
 8003bd8:	e001      	b.n	8003bde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bda:	f7ff fcf3 	bl	80035c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bde:	79fb      	ldrb	r3, [r7, #7]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40022000 	.word	0x40022000

08003bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003bf8:	4b17      	ldr	r3, [pc, #92]	; (8003c58 <HAL_InitTick+0x6c>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d023      	beq.n	8003c48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003c00:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <HAL_InitTick+0x70>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <HAL_InitTick+0x6c>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f949 	bl	8003eae <HAL_SYSTICK_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10f      	bne.n	8003c42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b0f      	cmp	r3, #15
 8003c26:	d809      	bhi.n	8003c3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c28:	2200      	movs	r2, #0
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c30:	f000 f913 	bl	8003e5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c34:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <HAL_InitTick+0x74>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e007      	b.n	8003c4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e004      	b.n	8003c4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	e001      	b.n	8003c4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000008 	.word	0x20000008
 8003c5c:	20000000 	.word	0x20000000
 8003c60:	20000004 	.word	0x20000004

08003c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_IncTick+0x20>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_IncTick+0x24>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4413      	add	r3, r2
 8003c74:	4a04      	ldr	r2, [pc, #16]	; (8003c88 <HAL_IncTick+0x24>)
 8003c76:	6013      	str	r3, [r2, #0]
}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000008 	.word	0x20000008
 8003c88:	20000824 	.word	0x20000824

08003c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_GetTick+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000824 	.word	0x20000824

08003ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd6:	4a04      	ldr	r2, [pc, #16]	; (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	60d3      	str	r3, [r2, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <__NVIC_GetPriorityGrouping+0x18>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f003 0307 	and.w	r3, r3, #7
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	db0b      	blt.n	8003d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	4907      	ldr	r1, [pc, #28]	; (8003d40 <__NVIC_EnableIRQ+0x38>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2001      	movs	r0, #1
 8003d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	e000e100 	.word	0xe000e100

08003d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	db0a      	blt.n	8003d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	490c      	ldr	r1, [pc, #48]	; (8003d90 <__NVIC_SetPriority+0x4c>)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	440b      	add	r3, r1
 8003d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d6c:	e00a      	b.n	8003d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4908      	ldr	r1, [pc, #32]	; (8003d94 <__NVIC_SetPriority+0x50>)
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	3b04      	subs	r3, #4
 8003d7c:	0112      	lsls	r2, r2, #4
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	440b      	add	r3, r1
 8003d82:	761a      	strb	r2, [r3, #24]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000e100 	.word	0xe000e100
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f1c3 0307 	rsb	r3, r3, #7
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	bf28      	it	cs
 8003db6:	2304      	movcs	r3, #4
 8003db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d902      	bls.n	8003dc8 <NVIC_EncodePriority+0x30>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3b03      	subs	r3, #3
 8003dc6:	e000      	b.n	8003dca <NVIC_EncodePriority+0x32>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	401a      	ands	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de0:	f04f 31ff 	mov.w	r1, #4294967295
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	43d9      	mvns	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	4313      	orrs	r3, r2
         );
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3724      	adds	r7, #36	; 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e10:	d301      	bcc.n	8003e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e12:	2301      	movs	r3, #1
 8003e14:	e00f      	b.n	8003e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e16:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <SysTick_Config+0x40>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e1e:	210f      	movs	r1, #15
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	f7ff ff8e 	bl	8003d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <SysTick_Config+0x40>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e2e:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <SysTick_Config+0x40>)
 8003e30:	2207      	movs	r2, #7
 8003e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	e000e010 	.word	0xe000e010

08003e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff29 	bl	8003ca4 <__NVIC_SetPriorityGrouping>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	4603      	mov	r3, r0
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e6c:	f7ff ff3e 	bl	8003cec <__NVIC_GetPriorityGrouping>
 8003e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	6978      	ldr	r0, [r7, #20]
 8003e78:	f7ff ff8e 	bl	8003d98 <NVIC_EncodePriority>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff ff5d 	bl	8003d44 <__NVIC_SetPriority>
}
 8003e8a:	bf00      	nop
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	4603      	mov	r3, r0
 8003e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff31 	bl	8003d08 <__NVIC_EnableIRQ>
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ffa2 	bl	8003e00 <SysTick_Config>
 8003ebc:	4603      	mov	r3, r0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003eda:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <HAL_FLASH_Program+0xd0>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_FLASH_Program+0x1e>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e053      	b.n	8003f8e <HAL_FLASH_Program+0xc6>
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <HAL_FLASH_Program+0xd0>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003eec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ef0:	f000 f888 	bl	8004004 <FLASH_WaitForLastOperation>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d143      	bne.n	8003f86 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003efe:	4b26      	ldr	r3, [pc, #152]	; (8003f98 <HAL_FLASH_Program+0xd0>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <HAL_FLASH_Program+0xd4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d009      	beq.n	8003f24 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003f10:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <HAL_FLASH_Program+0xd4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a21      	ldr	r2, [pc, #132]	; (8003f9c <HAL_FLASH_Program+0xd4>)
 8003f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f1a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <HAL_FLASH_Program+0xd0>)
 8003f1e:	2202      	movs	r2, #2
 8003f20:	771a      	strb	r2, [r3, #28]
 8003f22:	e002      	b.n	8003f2a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003f24:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <HAL_FLASH_Program+0xd0>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d107      	bne.n	8003f40 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f34:	68b8      	ldr	r0, [r7, #8]
 8003f36:	f000 f8bb 	bl	80040b0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	e010      	b.n	8003f62 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d002      	beq.n	8003f4c <HAL_FLASH_Program+0x84>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d10a      	bne.n	8003f62 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	68b8      	ldr	r0, [r7, #8]
 8003f52:	f000 f8d3 	bl	80040fc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d102      	bne.n	8003f62 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003f5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f60:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f66:	f000 f84d 	bl	8004004 <FLASH_WaitForLastOperation>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d006      	beq.n	8003f82 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_FLASH_Program+0xd4>)
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	4907      	ldr	r1, [pc, #28]	; (8003f9c <HAL_FLASH_Program+0xd4>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003f82:	f000 f9eb 	bl	800435c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f86:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <HAL_FLASH_Program+0xd0>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]

  return status;
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	2000000c 	.word	0x2000000c
 8003f9c:	40022000 	.word	0x40022000

08003fa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_FLASH_Unlock+0x38>)
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	da0b      	bge.n	8003fca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_FLASH_Unlock+0x38>)
 8003fb4:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <HAL_FLASH_Unlock+0x3c>)
 8003fb6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003fb8:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <HAL_FLASH_Unlock+0x38>)
 8003fba:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <HAL_FLASH_Unlock+0x40>)
 8003fbc:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003fbe:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <HAL_FLASH_Unlock+0x38>)
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	da01      	bge.n	8003fca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003fca:	79fb      	ldrb	r3, [r7, #7]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	40022000 	.word	0x40022000
 8003fdc:	45670123 	.word	0x45670123
 8003fe0:	cdef89ab 	.word	0xcdef89ab

08003fe4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_FLASH_Lock+0x1c>)
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	4a04      	ldr	r2, [pc, #16]	; (8004000 <HAL_FLASH_Lock+0x1c>)
 8003fee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ff2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40022000 	.word	0x40022000

08004004 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800400c:	f7ff fe3e 	bl	8003c8c <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004012:	e00d      	b.n	8004030 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d009      	beq.n	8004030 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800401c:	f7ff fe36 	bl	8003c8c <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	429a      	cmp	r2, r3
 800402a:	d801      	bhi.n	8004030 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e037      	b.n	80040a0 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <FLASH_WaitForLastOperation+0xa4>)
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1eb      	bne.n	8004014 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <FLASH_WaitForLastOperation+0xa4>)
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004044:	4013      	ands	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01e      	beq.n	800408c <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <FLASH_WaitForLastOperation+0xa8>)
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4313      	orrs	r3, r2
 8004056:	4a15      	ldr	r2, [pc, #84]	; (80040ac <FLASH_WaitForLastOperation+0xa8>)
 8004058:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <FLASH_WaitForLastOperation+0x70>
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <FLASH_WaitForLastOperation+0xa4>)
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800406e:	490e      	ldr	r1, [pc, #56]	; (80040a8 <FLASH_WaitForLastOperation+0xa4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	618b      	str	r3, [r1, #24]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <FLASH_WaitForLastOperation+0x84>
 800407e:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <FLASH_WaitForLastOperation+0xa4>)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004086:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e009      	b.n	80040a0 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <FLASH_WaitForLastOperation+0xa4>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <FLASH_WaitForLastOperation+0xa4>)
 800409a:	2201      	movs	r2, #1
 800409c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40022000 	.word	0x40022000
 80040ac:	2000000c 	.word	0x2000000c

080040b0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80040bc:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <FLASH_Program_DoubleWord+0x48>)
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	4a0d      	ldr	r2, [pc, #52]	; (80040f8 <FLASH_Program_DoubleWord+0x48>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80040ce:	f3bf 8f6f 	isb	sy
}
 80040d2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80040d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	000a      	movs	r2, r1
 80040e2:	2300      	movs	r3, #0
 80040e4:	68f9      	ldr	r1, [r7, #12]
 80040e6:	3104      	adds	r1, #4
 80040e8:	4613      	mov	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	40022000 	.word	0x40022000

080040fc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	; 0x24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004106:	2340      	movs	r3, #64	; 0x40
 8004108:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004112:	4b14      	ldr	r3, [pc, #80]	; (8004164 <FLASH_Program_Fast+0x68>)
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	4a13      	ldr	r2, [pc, #76]	; (8004164 <FLASH_Program_Fast+0x68>)
 8004118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800411c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411e:	f3ef 8310 	mrs	r3, PRIMASK
 8004122:	60fb      	str	r3, [r7, #12]
  return(result);
 8004124:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8004126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004128:	b672      	cpsid	i
}
 800412a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	3304      	adds	r3, #4
 8004138:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	3304      	adds	r3, #4
 800413e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004140:	7ffb      	ldrb	r3, [r7, #31]
 8004142:	3b01      	subs	r3, #1
 8004144:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8004146:	7ffb      	ldrb	r3, [r7, #31]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1ef      	bne.n	800412c <FLASH_Program_Fast+0x30>
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f383 8810 	msr	PRIMASK, r3
}
 8004156:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8004158:	bf00      	nop
 800415a:	3724      	adds	r7, #36	; 0x24
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40022000 	.word	0x40022000

08004168 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004172:	4b49      	ldr	r3, [pc, #292]	; (8004298 <HAL_FLASHEx_Erase+0x130>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_FLASHEx_Erase+0x16>
 800417a:	2302      	movs	r3, #2
 800417c:	e087      	b.n	800428e <HAL_FLASHEx_Erase+0x126>
 800417e:	4b46      	ldr	r3, [pc, #280]	; (8004298 <HAL_FLASHEx_Erase+0x130>)
 8004180:	2201      	movs	r2, #1
 8004182:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004184:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004188:	f7ff ff3c 	bl	8004004 <FLASH_WaitForLastOperation>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d177      	bne.n	8004286 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004196:	4b40      	ldr	r3, [pc, #256]	; (8004298 <HAL_FLASHEx_Erase+0x130>)
 8004198:	2200      	movs	r2, #0
 800419a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800419c:	4b3f      	ldr	r3, [pc, #252]	; (800429c <HAL_FLASHEx_Erase+0x134>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d013      	beq.n	80041d0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80041a8:	4b3c      	ldr	r3, [pc, #240]	; (800429c <HAL_FLASHEx_Erase+0x134>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80041b4:	4b39      	ldr	r3, [pc, #228]	; (800429c <HAL_FLASHEx_Erase+0x134>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a38      	ldr	r2, [pc, #224]	; (800429c <HAL_FLASHEx_Erase+0x134>)
 80041ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041be:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80041c0:	4b35      	ldr	r3, [pc, #212]	; (8004298 <HAL_FLASHEx_Erase+0x130>)
 80041c2:	2203      	movs	r2, #3
 80041c4:	771a      	strb	r2, [r3, #28]
 80041c6:	e016      	b.n	80041f6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80041c8:	4b33      	ldr	r3, [pc, #204]	; (8004298 <HAL_FLASHEx_Erase+0x130>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	771a      	strb	r2, [r3, #28]
 80041ce:	e012      	b.n	80041f6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80041d0:	4b32      	ldr	r3, [pc, #200]	; (800429c <HAL_FLASHEx_Erase+0x134>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80041dc:	4b2f      	ldr	r3, [pc, #188]	; (800429c <HAL_FLASHEx_Erase+0x134>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a2e      	ldr	r2, [pc, #184]	; (800429c <HAL_FLASHEx_Erase+0x134>)
 80041e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041e6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80041e8:	4b2b      	ldr	r3, [pc, #172]	; (8004298 <HAL_FLASHEx_Erase+0x130>)
 80041ea:	2202      	movs	r2, #2
 80041ec:	771a      	strb	r2, [r3, #28]
 80041ee:	e002      	b.n	80041f6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80041f0:	4b29      	ldr	r3, [pc, #164]	; (8004298 <HAL_FLASHEx_Erase+0x130>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d113      	bne.n	8004226 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f84c 	bl	80042a0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800420c:	f7ff fefa 	bl	8004004 <FLASH_WaitForLastOperation>
 8004210:	4603      	mov	r3, r0
 8004212:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8004214:	4b21      	ldr	r3, [pc, #132]	; (800429c <HAL_FLASHEx_Erase+0x134>)
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <HAL_FLASHEx_Erase+0x134>)
 800421a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800421e:	f023 0304 	bic.w	r3, r3, #4
 8004222:	6153      	str	r3, [r2, #20]
 8004224:	e02d      	b.n	8004282 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f04f 32ff 	mov.w	r2, #4294967295
 800422c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	e01d      	b.n	8004272 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4619      	mov	r1, r3
 800423c:	68b8      	ldr	r0, [r7, #8]
 800423e:	f000 f857 	bl	80042f0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004242:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004246:	f7ff fedd 	bl	8004004 <FLASH_WaitForLastOperation>
 800424a:	4603      	mov	r3, r0
 800424c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800424e:	4b13      	ldr	r3, [pc, #76]	; (800429c <HAL_FLASHEx_Erase+0x134>)
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	4a12      	ldr	r2, [pc, #72]	; (800429c <HAL_FLASHEx_Erase+0x134>)
 8004254:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004258:	f023 0302 	bic.w	r3, r3, #2
 800425c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	601a      	str	r2, [r3, #0]
          break;
 800426a:	e00a      	b.n	8004282 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	3301      	adds	r3, #1
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	4413      	add	r3, r2
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	d3d9      	bcc.n	8004236 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004282:	f000 f86b 	bl	800435c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004286:	4b04      	ldr	r3, [pc, #16]	; (8004298 <HAL_FLASHEx_Erase+0x130>)
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]

  return status;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	2000000c 	.word	0x2000000c
 800429c:	40022000 	.word	0x40022000

080042a0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80042b2:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <FLASH_MassErase+0x4c>)
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	4a0d      	ldr	r2, [pc, #52]	; (80042ec <FLASH_MassErase+0x4c>)
 80042b8:	f043 0304 	orr.w	r3, r3, #4
 80042bc:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80042c8:	4b08      	ldr	r3, [pc, #32]	; (80042ec <FLASH_MassErase+0x4c>)
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	4a07      	ldr	r2, [pc, #28]	; (80042ec <FLASH_MassErase+0x4c>)
 80042ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <FLASH_MassErase+0x4c>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	4a04      	ldr	r2, [pc, #16]	; (80042ec <FLASH_MassErase+0x4c>)
 80042da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042de:	6153      	str	r3, [r2, #20]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40022000 	.word	0x40022000

080042f0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d006      	beq.n	8004312 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <FLASH_PageErase+0x68>)
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	4a13      	ldr	r2, [pc, #76]	; (8004358 <FLASH_PageErase+0x68>)
 800430a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800430e:	6153      	str	r3, [r2, #20]
 8004310:	e005      	b.n	800431e <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <FLASH_PageErase+0x68>)
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	4a10      	ldr	r2, [pc, #64]	; (8004358 <FLASH_PageErase+0x68>)
 8004318:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800431c:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800431e:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <FLASH_PageErase+0x68>)
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800432e:	490a      	ldr	r1, [pc, #40]	; (8004358 <FLASH_PageErase+0x68>)
 8004330:	4313      	orrs	r3, r2
 8004332:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004334:	4b08      	ldr	r3, [pc, #32]	; (8004358 <FLASH_PageErase+0x68>)
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	4a07      	ldr	r2, [pc, #28]	; (8004358 <FLASH_PageErase+0x68>)
 800433a:	f043 0302 	orr.w	r3, r3, #2
 800433e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <FLASH_PageErase+0x68>)
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	4a04      	ldr	r2, [pc, #16]	; (8004358 <FLASH_PageErase+0x68>)
 8004346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434a:	6153      	str	r3, [r2, #20]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40022000 	.word	0x40022000

0800435c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004362:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <FLASH_FlushCaches+0x8c>)
 8004364:	7f1b      	ldrb	r3, [r3, #28]
 8004366:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d002      	beq.n	8004374 <FLASH_FlushCaches+0x18>
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	2b03      	cmp	r3, #3
 8004372:	d117      	bne.n	80043a4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004374:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <FLASH_FlushCaches+0x90>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <FLASH_FlushCaches+0x90>)
 800437a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800437e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <FLASH_FlushCaches+0x90>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a19      	ldr	r2, [pc, #100]	; (80043ec <FLASH_FlushCaches+0x90>)
 8004386:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b17      	ldr	r3, [pc, #92]	; (80043ec <FLASH_FlushCaches+0x90>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a16      	ldr	r2, [pc, #88]	; (80043ec <FLASH_FlushCaches+0x90>)
 8004392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004396:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004398:	4b14      	ldr	r3, [pc, #80]	; (80043ec <FLASH_FlushCaches+0x90>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a13      	ldr	r2, [pc, #76]	; (80043ec <FLASH_FlushCaches+0x90>)
 800439e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d002      	beq.n	80043b0 <FLASH_FlushCaches+0x54>
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d111      	bne.n	80043d4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <FLASH_FlushCaches+0x90>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <FLASH_FlushCaches+0x90>)
 80043b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <FLASH_FlushCaches+0x90>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <FLASH_FlushCaches+0x90>)
 80043c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80043c8:	4b08      	ldr	r3, [pc, #32]	; (80043ec <FLASH_FlushCaches+0x90>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a07      	ldr	r2, [pc, #28]	; (80043ec <FLASH_FlushCaches+0x90>)
 80043ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043d2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <FLASH_FlushCaches+0x8c>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	771a      	strb	r2, [r3, #28]
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	2000000c 	.word	0x2000000c
 80043ec:	40022000 	.word	0x40022000

080043f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043fe:	e17f      	b.n	8004700 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	2101      	movs	r1, #1
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	4013      	ands	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8171 	beq.w	80046fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d005      	beq.n	8004430 <HAL_GPIO_Init+0x40>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d130      	bne.n	8004492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	2203      	movs	r2, #3
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4013      	ands	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004466:	2201      	movs	r2, #1
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4013      	ands	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	f003 0201 	and.w	r2, r3, #1
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	2b03      	cmp	r3, #3
 800449c:	d118      	bne.n	80044d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80044a4:	2201      	movs	r2, #1
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4013      	ands	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	08db      	lsrs	r3, r3, #3
 80044ba:	f003 0201 	and.w	r2, r3, #1
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d017      	beq.n	800450c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	2203      	movs	r2, #3
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4013      	ands	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d123      	bne.n	8004560 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	08da      	lsrs	r2, r3, #3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3208      	adds	r2, #8
 8004520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	220f      	movs	r2, #15
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	08da      	lsrs	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3208      	adds	r2, #8
 800455a:	6939      	ldr	r1, [r7, #16]
 800455c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	2203      	movs	r2, #3
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0203 	and.w	r2, r3, #3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80ac 	beq.w	80046fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045a2:	4b5f      	ldr	r3, [pc, #380]	; (8004720 <HAL_GPIO_Init+0x330>)
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	4a5e      	ldr	r2, [pc, #376]	; (8004720 <HAL_GPIO_Init+0x330>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6613      	str	r3, [r2, #96]	; 0x60
 80045ae:	4b5c      	ldr	r3, [pc, #368]	; (8004720 <HAL_GPIO_Init+0x330>)
 80045b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045ba:	4a5a      	ldr	r2, [pc, #360]	; (8004724 <HAL_GPIO_Init+0x334>)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	089b      	lsrs	r3, r3, #2
 80045c0:	3302      	adds	r3, #2
 80045c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	220f      	movs	r2, #15
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045e4:	d025      	beq.n	8004632 <HAL_GPIO_Init+0x242>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a4f      	ldr	r2, [pc, #316]	; (8004728 <HAL_GPIO_Init+0x338>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01f      	beq.n	800462e <HAL_GPIO_Init+0x23e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a4e      	ldr	r2, [pc, #312]	; (800472c <HAL_GPIO_Init+0x33c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d019      	beq.n	800462a <HAL_GPIO_Init+0x23a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a4d      	ldr	r2, [pc, #308]	; (8004730 <HAL_GPIO_Init+0x340>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <HAL_GPIO_Init+0x236>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a4c      	ldr	r2, [pc, #304]	; (8004734 <HAL_GPIO_Init+0x344>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00d      	beq.n	8004622 <HAL_GPIO_Init+0x232>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a4b      	ldr	r2, [pc, #300]	; (8004738 <HAL_GPIO_Init+0x348>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <HAL_GPIO_Init+0x22e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a4a      	ldr	r2, [pc, #296]	; (800473c <HAL_GPIO_Init+0x34c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d101      	bne.n	800461a <HAL_GPIO_Init+0x22a>
 8004616:	2306      	movs	r3, #6
 8004618:	e00c      	b.n	8004634 <HAL_GPIO_Init+0x244>
 800461a:	2307      	movs	r3, #7
 800461c:	e00a      	b.n	8004634 <HAL_GPIO_Init+0x244>
 800461e:	2305      	movs	r3, #5
 8004620:	e008      	b.n	8004634 <HAL_GPIO_Init+0x244>
 8004622:	2304      	movs	r3, #4
 8004624:	e006      	b.n	8004634 <HAL_GPIO_Init+0x244>
 8004626:	2303      	movs	r3, #3
 8004628:	e004      	b.n	8004634 <HAL_GPIO_Init+0x244>
 800462a:	2302      	movs	r3, #2
 800462c:	e002      	b.n	8004634 <HAL_GPIO_Init+0x244>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_GPIO_Init+0x244>
 8004632:	2300      	movs	r3, #0
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	f002 0203 	and.w	r2, r2, #3
 800463a:	0092      	lsls	r2, r2, #2
 800463c:	4093      	lsls	r3, r2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004644:	4937      	ldr	r1, [pc, #220]	; (8004724 <HAL_GPIO_Init+0x334>)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	089b      	lsrs	r3, r3, #2
 800464a:	3302      	adds	r3, #2
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004652:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <HAL_GPIO_Init+0x350>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	43db      	mvns	r3, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004676:	4a32      	ldr	r2, [pc, #200]	; (8004740 <HAL_GPIO_Init+0x350>)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800467c:	4b30      	ldr	r3, [pc, #192]	; (8004740 <HAL_GPIO_Init+0x350>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	43db      	mvns	r3, r3
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4013      	ands	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046a0:	4a27      	ldr	r2, [pc, #156]	; (8004740 <HAL_GPIO_Init+0x350>)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046a6:	4b26      	ldr	r3, [pc, #152]	; (8004740 <HAL_GPIO_Init+0x350>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4013      	ands	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046ca:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <HAL_GPIO_Init+0x350>)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80046d0:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <HAL_GPIO_Init+0x350>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	43db      	mvns	r3, r3
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4013      	ands	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046f4:	4a12      	ldr	r2, [pc, #72]	; (8004740 <HAL_GPIO_Init+0x350>)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	3301      	adds	r3, #1
 80046fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	fa22 f303 	lsr.w	r3, r2, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	f47f ae78 	bne.w	8004400 <HAL_GPIO_Init+0x10>
  }
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000
 8004724:	40010000 	.word	0x40010000
 8004728:	48000400 	.word	0x48000400
 800472c:	48000800 	.word	0x48000800
 8004730:	48000c00 	.word	0x48000c00
 8004734:	48001000 	.word	0x48001000
 8004738:	48001400 	.word	0x48001400
 800473c:	48001800 	.word	0x48001800
 8004740:	40010400 	.word	0x40010400

08004744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	887b      	ldrh	r3, [r7, #2]
 8004756:	4013      	ands	r3, r2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	e001      	b.n	8004766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	807b      	strh	r3, [r7, #2]
 8004780:	4613      	mov	r3, r2
 8004782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004784:	787b      	ldrb	r3, [r7, #1]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800478a:	887a      	ldrh	r2, [r7, #2]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004790:	e002      	b.n	8004798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004792:	887a      	ldrh	r2, [r7, #2]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047b6:	887a      	ldrh	r2, [r7, #2]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4013      	ands	r3, r2
 80047bc:	041a      	lsls	r2, r3, #16
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	43d9      	mvns	r1, r3
 80047c2:	887b      	ldrh	r3, [r7, #2]
 80047c4:	400b      	ands	r3, r1
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	619a      	str	r2, [r3, #24]
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d006      	beq.n	80047fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047ee:	4a05      	ldr	r2, [pc, #20]	; (8004804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe f822 	bl	8002840 <HAL_GPIO_EXTI_Callback>
  }
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40010400 	.word	0x40010400

08004808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e081      	b.n	800491e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fe fef0 	bl	8003614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2224      	movs	r2, #36	; 0x24
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004858:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004868:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d107      	bne.n	8004882 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	e006      	b.n	8004890 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800488e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d104      	bne.n	80048a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69d9      	ldr	r1, [r3, #28]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1a      	ldr	r2, [r3, #32]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	4608      	mov	r0, r1
 8004932:	4611      	mov	r1, r2
 8004934:	461a      	mov	r2, r3
 8004936:	4603      	mov	r3, r0
 8004938:	817b      	strh	r3, [r7, #10]
 800493a:	460b      	mov	r3, r1
 800493c:	813b      	strh	r3, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b20      	cmp	r3, #32
 800494c:	f040 80fd 	bne.w	8004b4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_I2C_Mem_Read+0x34>
 8004956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004958:	2b00      	cmp	r3, #0
 800495a:	d105      	bne.n	8004968 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004962:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0f1      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_I2C_Mem_Read+0x4e>
 8004972:	2302      	movs	r3, #2
 8004974:	e0ea      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800497e:	f7ff f985 	bl	8003c8c <HAL_GetTick>
 8004982:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	2319      	movs	r3, #25
 800498a:	2201      	movs	r2, #1
 800498c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f95b 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0d5      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2222      	movs	r2, #34	; 0x22
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049c8:	88f8      	ldrh	r0, [r7, #6]
 80049ca:	893a      	ldrh	r2, [r7, #8]
 80049cc:	8979      	ldrh	r1, [r7, #10]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	4603      	mov	r3, r0
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f8bf 	bl	8004b5c <I2C_RequestMemoryRead>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0ad      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2bff      	cmp	r3, #255	; 0xff
 80049f8:	d90e      	bls.n	8004a18 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	22ff      	movs	r2, #255	; 0xff
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	8979      	ldrh	r1, [r7, #10]
 8004a08:	4b52      	ldr	r3, [pc, #328]	; (8004b54 <HAL_I2C_Mem_Read+0x22c>)
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fac3 	bl	8004f9c <I2C_TransferConfig>
 8004a16:	e00f      	b.n	8004a38 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	8979      	ldrh	r1, [r7, #10]
 8004a2a:	4b4a      	ldr	r3, [pc, #296]	; (8004b54 <HAL_I2C_Mem_Read+0x22c>)
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fab2 	bl	8004f9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2104      	movs	r1, #4
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f902 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e07c      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d034      	beq.n	8004af8 <HAL_I2C_Mem_Read+0x1d0>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d130      	bne.n	8004af8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f8d3 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e04d      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2bff      	cmp	r3, #255	; 0xff
 8004ab8:	d90e      	bls.n	8004ad8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22ff      	movs	r2, #255	; 0xff
 8004abe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	8979      	ldrh	r1, [r7, #10]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fa63 	bl	8004f9c <I2C_TransferConfig>
 8004ad6:	e00f      	b.n	8004af8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	8979      	ldrh	r1, [r7, #10]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fa52 	bl	8004f9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d19a      	bne.n	8004a38 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f920 	bl	8004d4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e01a      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_I2C_Mem_Read+0x230>)
 8004b2a:	400b      	ands	r3, r1
 8004b2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e000      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
  }
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	80002400 	.word	0x80002400
 8004b58:	fe00e800 	.word	0xfe00e800

08004b5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	4608      	mov	r0, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	817b      	strh	r3, [r7, #10]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	813b      	strh	r3, [r7, #8]
 8004b72:	4613      	mov	r3, r2
 8004b74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	8979      	ldrh	r1, [r7, #10]
 8004b7c:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <I2C_RequestMemoryRead+0xa4>)
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	2300      	movs	r3, #0
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fa0a 	bl	8004f9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	69b9      	ldr	r1, [r7, #24]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f89d 	bl	8004ccc <I2C_WaitOnTXISFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e02c      	b.n	8004bf6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d105      	bne.n	8004bae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba2:	893b      	ldrh	r3, [r7, #8]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	629a      	str	r2, [r3, #40]	; 0x28
 8004bac:	e015      	b.n	8004bda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bae:	893b      	ldrh	r3, [r7, #8]
 8004bb0:	0a1b      	lsrs	r3, r3, #8
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	69b9      	ldr	r1, [r7, #24]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f883 	bl	8004ccc <I2C_WaitOnTXISFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e012      	b.n	8004bf6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bd0:	893b      	ldrh	r3, [r7, #8]
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2140      	movs	r1, #64	; 0x40
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f831 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	80002000 	.word	0x80002000

08004c04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d103      	bne.n	8004c22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d007      	beq.n	8004c40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	619a      	str	r2, [r3, #24]
  }
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c5c:	e022      	b.n	8004ca4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d01e      	beq.n	8004ca4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c66:	f7ff f811 	bl	8003c8c <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d302      	bcc.n	8004c7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d113      	bne.n	8004ca4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c80:	f043 0220 	orr.w	r2, r3, #32
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e00f      	b.n	8004cc4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4013      	ands	r3, r2
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d0cd      	beq.n	8004c5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cd8:	e02c      	b.n	8004d34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f870 	bl	8004dc4 <I2C_IsErrorOccurred>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e02a      	b.n	8004d44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	d01e      	beq.n	8004d34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf6:	f7fe ffc9 	bl	8003c8c <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d302      	bcc.n	8004d0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d113      	bne.n	8004d34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d10:	f043 0220 	orr.w	r2, r3, #32
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e007      	b.n	8004d44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d1cb      	bne.n	8004cda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d58:	e028      	b.n	8004dac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f830 	bl	8004dc4 <I2C_IsErrorOccurred>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e026      	b.n	8004dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7fe ff8d 	bl	8003c8c <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d113      	bne.n	8004dac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e007      	b.n	8004dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d1cf      	bne.n	8004d5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	; 0x28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d075      	beq.n	8004edc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2210      	movs	r2, #16
 8004df6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004df8:	e056      	b.n	8004ea8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d052      	beq.n	8004ea8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e02:	f7fe ff43 	bl	8003c8c <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d302      	bcc.n	8004e18 <I2C_IsErrorOccurred+0x54>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d147      	bne.n	8004ea8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3a:	d12e      	bne.n	8004e9a <I2C_IsErrorOccurred+0xd6>
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e42:	d02a      	beq.n	8004e9a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004e44:	7cfb      	ldrb	r3, [r7, #19]
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d027      	beq.n	8004e9a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e5a:	f7fe ff17 	bl	8003c8c <HAL_GetTick>
 8004e5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e60:	e01b      	b.n	8004e9a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e62:	f7fe ff13 	bl	8003c8c <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b19      	cmp	r3, #25
 8004e6e:	d914      	bls.n	8004e9a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e74:	f043 0220 	orr.w	r2, r3, #32
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d1dc      	bne.n	8004e62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d003      	beq.n	8004ebe <I2C_IsErrorOccurred+0xfa>
 8004eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d09d      	beq.n	8004dfa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d103      	bne.n	8004ece <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	f043 0304 	orr.w	r3, r3, #4
 8004ed4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004efe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00b      	beq.n	8004f28 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	f043 0308 	orr.w	r3, r3, #8
 8004f16:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01c      	beq.n	8004f8c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff fe56 	bl	8004c04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6859      	ldr	r1, [r3, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <I2C_IsErrorOccurred+0x1d4>)
 8004f64:	400b      	ands	r3, r1
 8004f66:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	fe00e800 	.word	0xfe00e800

08004f9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	817b      	strh	r3, [r7, #10]
 8004faa:	4613      	mov	r3, r2
 8004fac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fae:	897b      	ldrh	r3, [r7, #10]
 8004fb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fb4:	7a7b      	ldrb	r3, [r7, #9]
 8004fb6:	041b      	lsls	r3, r3, #16
 8004fb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	0d5b      	lsrs	r3, r3, #21
 8004fd6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004fda:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <I2C_TransferConfig+0x60>)
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	ea02 0103 	and.w	r1, r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	03ff63ff 	.word	0x03ff63ff

08005000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b20      	cmp	r3, #32
 8005014:	d138      	bne.n	8005088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005020:	2302      	movs	r3, #2
 8005022:	e032      	b.n	800508a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2224      	movs	r2, #36	; 0x24
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e000      	b.n	800508a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005088:	2302      	movs	r3, #2
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d139      	bne.n	8005120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e033      	b.n	8005122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2224      	movs	r2, #36	; 0x24
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	e000      	b.n	8005122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005120:	2302      	movs	r3, #2
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005134:	4b04      	ldr	r3, [pc, #16]	; (8005148 <HAL_PWREx_GetVoltageRange+0x18>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800513c:	4618      	mov	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40007000 	.word	0x40007000

0800514c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800515a:	d130      	bne.n	80051be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800515c:	4b23      	ldr	r3, [pc, #140]	; (80051ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005168:	d038      	beq.n	80051dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800516a:	4b20      	ldr	r3, [pc, #128]	; (80051ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005172:	4a1e      	ldr	r2, [pc, #120]	; (80051ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005174:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005178:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800517a:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2232      	movs	r2, #50	; 0x32
 8005180:	fb02 f303 	mul.w	r3, r2, r3
 8005184:	4a1b      	ldr	r2, [pc, #108]	; (80051f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	0c9b      	lsrs	r3, r3, #18
 800518c:	3301      	adds	r3, #1
 800518e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005190:	e002      	b.n	8005198 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3b01      	subs	r3, #1
 8005196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005198:	4b14      	ldr	r3, [pc, #80]	; (80051ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a4:	d102      	bne.n	80051ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f2      	bne.n	8005192 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051ac:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b8:	d110      	bne.n	80051dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e00f      	b.n	80051de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80051be:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ca:	d007      	beq.n	80051dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051d4:	4a05      	ldr	r2, [pc, #20]	; (80051ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40007000 	.word	0x40007000
 80051f0:	20000000 	.word	0x20000000
 80051f4:	431bde83 	.word	0x431bde83

080051f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e3ca      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800520a:	4b97      	ldr	r3, [pc, #604]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005214:	4b94      	ldr	r3, [pc, #592]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 80e4 	beq.w	80053f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <HAL_RCC_OscConfig+0x4a>
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b0c      	cmp	r3, #12
 8005236:	f040 808b 	bne.w	8005350 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b01      	cmp	r3, #1
 800523e:	f040 8087 	bne.w	8005350 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005242:	4b89      	ldr	r3, [pc, #548]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_RCC_OscConfig+0x62>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e3a2      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1a      	ldr	r2, [r3, #32]
 800525e:	4b82      	ldr	r3, [pc, #520]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d004      	beq.n	8005274 <HAL_RCC_OscConfig+0x7c>
 800526a:	4b7f      	ldr	r3, [pc, #508]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005272:	e005      	b.n	8005280 <HAL_RCC_OscConfig+0x88>
 8005274:	4b7c      	ldr	r3, [pc, #496]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 8005276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527a:	091b      	lsrs	r3, r3, #4
 800527c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005280:	4293      	cmp	r3, r2
 8005282:	d223      	bcs.n	80052cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fd55 	bl	8005d38 <RCC_SetFlashLatencyFromMSIRange>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e383      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005298:	4b73      	ldr	r3, [pc, #460]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a72      	ldr	r2, [pc, #456]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 800529e:	f043 0308 	orr.w	r3, r3, #8
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	4b70      	ldr	r3, [pc, #448]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	496d      	ldr	r1, [pc, #436]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052b6:	4b6c      	ldr	r3, [pc, #432]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	4968      	ldr	r1, [pc, #416]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	604b      	str	r3, [r1, #4]
 80052ca:	e025      	b.n	8005318 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052cc:	4b66      	ldr	r3, [pc, #408]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a65      	ldr	r2, [pc, #404]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80052d2:	f043 0308 	orr.w	r3, r3, #8
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	4b63      	ldr	r3, [pc, #396]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	4960      	ldr	r1, [pc, #384]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ea:	4b5f      	ldr	r3, [pc, #380]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	495b      	ldr	r1, [pc, #364]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fd15 	bl	8005d38 <RCC_SetFlashLatencyFromMSIRange>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e343      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005318:	f000 fc4a 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b52      	ldr	r3, [pc, #328]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	4950      	ldr	r1, [pc, #320]	; (800546c <HAL_RCC_OscConfig+0x274>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
 8005334:	4a4e      	ldr	r2, [pc, #312]	; (8005470 <HAL_RCC_OscConfig+0x278>)
 8005336:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005338:	4b4e      	ldr	r3, [pc, #312]	; (8005474 <HAL_RCC_OscConfig+0x27c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f7fe fc55 	bl	8003bec <HAL_InitTick>
 8005342:	4603      	mov	r3, r0
 8005344:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d052      	beq.n	80053f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	e327      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d032      	beq.n	80053be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005358:	4b43      	ldr	r3, [pc, #268]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a42      	ldr	r2, [pc, #264]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005364:	f7fe fc92 	bl	8003c8c <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800536c:	f7fe fc8e 	bl	8003c8c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e310      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800537e:	4b3a      	ldr	r3, [pc, #232]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f0      	beq.n	800536c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800538a:	4b37      	ldr	r3, [pc, #220]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a36      	ldr	r2, [pc, #216]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 8005390:	f043 0308 	orr.w	r3, r3, #8
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	4b34      	ldr	r3, [pc, #208]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	4931      	ldr	r1, [pc, #196]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053a8:	4b2f      	ldr	r3, [pc, #188]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	492c      	ldr	r1, [pc, #176]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	604b      	str	r3, [r1, #4]
 80053bc:	e01a      	b.n	80053f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053be:	4b2a      	ldr	r3, [pc, #168]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a29      	ldr	r2, [pc, #164]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053ca:	f7fe fc5f 	bl	8003c8c <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053d2:	f7fe fc5b 	bl	8003c8c <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e2dd      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053e4:	4b20      	ldr	r3, [pc, #128]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f0      	bne.n	80053d2 <HAL_RCC_OscConfig+0x1da>
 80053f0:	e000      	b.n	80053f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d074      	beq.n	80054ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	2b08      	cmp	r3, #8
 8005404:	d005      	beq.n	8005412 <HAL_RCC_OscConfig+0x21a>
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b0c      	cmp	r3, #12
 800540a:	d10e      	bne.n	800542a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d10b      	bne.n	800542a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005412:	4b15      	ldr	r3, [pc, #84]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d064      	beq.n	80054e8 <HAL_RCC_OscConfig+0x2f0>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d160      	bne.n	80054e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e2ba      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005432:	d106      	bne.n	8005442 <HAL_RCC_OscConfig+0x24a>
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a0b      	ldr	r2, [pc, #44]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 800543a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	e026      	b.n	8005490 <HAL_RCC_OscConfig+0x298>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800544a:	d115      	bne.n	8005478 <HAL_RCC_OscConfig+0x280>
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a05      	ldr	r2, [pc, #20]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 8005452:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	4b03      	ldr	r3, [pc, #12]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a02      	ldr	r2, [pc, #8]	; (8005468 <HAL_RCC_OscConfig+0x270>)
 800545e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	e014      	b.n	8005490 <HAL_RCC_OscConfig+0x298>
 8005466:	bf00      	nop
 8005468:	40021000 	.word	0x40021000
 800546c:	08013f58 	.word	0x08013f58
 8005470:	20000000 	.word	0x20000000
 8005474:	20000004 	.word	0x20000004
 8005478:	4ba0      	ldr	r3, [pc, #640]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a9f      	ldr	r2, [pc, #636]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 800547e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	4b9d      	ldr	r3, [pc, #628]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a9c      	ldr	r2, [pc, #624]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 800548a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d013      	beq.n	80054c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fe fbf8 	bl	8003c8c <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a0:	f7fe fbf4 	bl	8003c8c <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b64      	cmp	r3, #100	; 0x64
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e276      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054b2:	4b92      	ldr	r3, [pc, #584]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0x2a8>
 80054be:	e014      	b.n	80054ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c0:	f7fe fbe4 	bl	8003c8c <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054c8:	f7fe fbe0 	bl	8003c8c <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b64      	cmp	r3, #100	; 0x64
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e262      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054da:	4b88      	ldr	r3, [pc, #544]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x2d0>
 80054e6:	e000      	b.n	80054ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d060      	beq.n	80055b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d005      	beq.n	8005508 <HAL_RCC_OscConfig+0x310>
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b0c      	cmp	r3, #12
 8005500:	d119      	bne.n	8005536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d116      	bne.n	8005536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005508:	4b7c      	ldr	r3, [pc, #496]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_RCC_OscConfig+0x328>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e23f      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005520:	4b76      	ldr	r3, [pc, #472]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	061b      	lsls	r3, r3, #24
 800552e:	4973      	ldr	r1, [pc, #460]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005530:	4313      	orrs	r3, r2
 8005532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005534:	e040      	b.n	80055b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d023      	beq.n	8005586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800553e:	4b6f      	ldr	r3, [pc, #444]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a6e      	ldr	r2, [pc, #440]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554a:	f7fe fb9f 	bl	8003c8c <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005552:	f7fe fb9b 	bl	8003c8c <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e21d      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005564:	4b65      	ldr	r3, [pc, #404]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f0      	beq.n	8005552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005570:	4b62      	ldr	r3, [pc, #392]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	061b      	lsls	r3, r3, #24
 800557e:	495f      	ldr	r1, [pc, #380]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005580:	4313      	orrs	r3, r2
 8005582:	604b      	str	r3, [r1, #4]
 8005584:	e018      	b.n	80055b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005586:	4b5d      	ldr	r3, [pc, #372]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a5c      	ldr	r2, [pc, #368]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 800558c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005592:	f7fe fb7b 	bl	8003c8c <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800559a:	f7fe fb77 	bl	8003c8c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e1f9      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ac:	4b53      	ldr	r3, [pc, #332]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f0      	bne.n	800559a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d03c      	beq.n	800563e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01c      	beq.n	8005606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055cc:	4b4b      	ldr	r3, [pc, #300]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 80055ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d2:	4a4a      	ldr	r2, [pc, #296]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055dc:	f7fe fb56 	bl	8003c8c <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055e4:	f7fe fb52 	bl	8003c8c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e1d4      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055f6:	4b41      	ldr	r3, [pc, #260]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 80055f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0ef      	beq.n	80055e4 <HAL_RCC_OscConfig+0x3ec>
 8005604:	e01b      	b.n	800563e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005606:	4b3d      	ldr	r3, [pc, #244]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800560c:	4a3b      	ldr	r2, [pc, #236]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 800560e:	f023 0301 	bic.w	r3, r3, #1
 8005612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005616:	f7fe fb39 	bl	8003c8c <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800561e:	f7fe fb35 	bl	8003c8c <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e1b7      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005630:	4b32      	ldr	r3, [pc, #200]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ef      	bne.n	800561e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80a6 	beq.w	8005798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800564c:	2300      	movs	r3, #0
 800564e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005650:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10d      	bne.n	8005678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800565c:	4b27      	ldr	r3, [pc, #156]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 800565e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005660:	4a26      	ldr	r2, [pc, #152]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 8005662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005666:	6593      	str	r3, [r2, #88]	; 0x58
 8005668:	4b24      	ldr	r3, [pc, #144]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005674:	2301      	movs	r3, #1
 8005676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005678:	4b21      	ldr	r3, [pc, #132]	; (8005700 <HAL_RCC_OscConfig+0x508>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005680:	2b00      	cmp	r3, #0
 8005682:	d118      	bne.n	80056b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005684:	4b1e      	ldr	r3, [pc, #120]	; (8005700 <HAL_RCC_OscConfig+0x508>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <HAL_RCC_OscConfig+0x508>)
 800568a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005690:	f7fe fafc 	bl	8003c8c <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005698:	f7fe faf8 	bl	8003c8c <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e17a      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056aa:	4b15      	ldr	r3, [pc, #84]	; (8005700 <HAL_RCC_OscConfig+0x508>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f0      	beq.n	8005698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d108      	bne.n	80056d0 <HAL_RCC_OscConfig+0x4d8>
 80056be:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c4:	4a0d      	ldr	r2, [pc, #52]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 80056c6:	f043 0301 	orr.w	r3, r3, #1
 80056ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056ce:	e029      	b.n	8005724 <HAL_RCC_OscConfig+0x52c>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b05      	cmp	r3, #5
 80056d6:	d115      	bne.n	8005704 <HAL_RCC_OscConfig+0x50c>
 80056d8:	4b08      	ldr	r3, [pc, #32]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	4a07      	ldr	r2, [pc, #28]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 80056e0:	f043 0304 	orr.w	r3, r3, #4
 80056e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056e8:	4b04      	ldr	r3, [pc, #16]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	4a03      	ldr	r2, [pc, #12]	; (80056fc <HAL_RCC_OscConfig+0x504>)
 80056f0:	f043 0301 	orr.w	r3, r3, #1
 80056f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056f8:	e014      	b.n	8005724 <HAL_RCC_OscConfig+0x52c>
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000
 8005700:	40007000 	.word	0x40007000
 8005704:	4b9c      	ldr	r3, [pc, #624]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570a:	4a9b      	ldr	r2, [pc, #620]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005714:	4b98      	ldr	r3, [pc, #608]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571a:	4a97      	ldr	r2, [pc, #604]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 800571c:	f023 0304 	bic.w	r3, r3, #4
 8005720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d016      	beq.n	800575a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7fe faae 	bl	8003c8c <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005732:	e00a      	b.n	800574a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005734:	f7fe faaa 	bl	8003c8c <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e12a      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800574a:	4b8b      	ldr	r3, [pc, #556]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0ed      	beq.n	8005734 <HAL_RCC_OscConfig+0x53c>
 8005758:	e015      	b.n	8005786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575a:	f7fe fa97 	bl	8003c8c <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005760:	e00a      	b.n	8005778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005762:	f7fe fa93 	bl	8003c8c <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005770:	4293      	cmp	r3, r2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e113      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005778:	4b7f      	ldr	r3, [pc, #508]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1ed      	bne.n	8005762 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005786:	7ffb      	ldrb	r3, [r7, #31]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d105      	bne.n	8005798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800578c:	4b7a      	ldr	r3, [pc, #488]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 800578e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005790:	4a79      	ldr	r2, [pc, #484]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 8005792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005796:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80fe 	beq.w	800599e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	f040 80d0 	bne.w	800594c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80057ac:	4b72      	ldr	r3, [pc, #456]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f003 0203 	and.w	r2, r3, #3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	429a      	cmp	r2, r3
 80057be:	d130      	bne.n	8005822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	3b01      	subs	r3, #1
 80057cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d127      	bne.n	8005822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057de:	429a      	cmp	r2, r3
 80057e0:	d11f      	bne.n	8005822 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057ec:	2a07      	cmp	r2, #7
 80057ee:	bf14      	ite	ne
 80057f0:	2201      	movne	r2, #1
 80057f2:	2200      	moveq	r2, #0
 80057f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d113      	bne.n	8005822 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	3b01      	subs	r3, #1
 8005808:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800580a:	429a      	cmp	r2, r3
 800580c:	d109      	bne.n	8005822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	085b      	lsrs	r3, r3, #1
 800581a:	3b01      	subs	r3, #1
 800581c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800581e:	429a      	cmp	r2, r3
 8005820:	d06e      	beq.n	8005900 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b0c      	cmp	r3, #12
 8005826:	d069      	beq.n	80058fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005828:	4b53      	ldr	r3, [pc, #332]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d105      	bne.n	8005840 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005834:	4b50      	ldr	r3, [pc, #320]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e0ad      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005844:	4b4c      	ldr	r3, [pc, #304]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a4b      	ldr	r2, [pc, #300]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 800584a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800584e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005850:	f7fe fa1c 	bl	8003c8c <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005858:	f7fe fa18 	bl	8003c8c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e09a      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800586a:	4b43      	ldr	r3, [pc, #268]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005876:	4b40      	ldr	r3, [pc, #256]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	4b40      	ldr	r3, [pc, #256]	; (800597c <HAL_RCC_OscConfig+0x784>)
 800587c:	4013      	ands	r3, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005886:	3a01      	subs	r2, #1
 8005888:	0112      	lsls	r2, r2, #4
 800588a:	4311      	orrs	r1, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005890:	0212      	lsls	r2, r2, #8
 8005892:	4311      	orrs	r1, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005898:	0852      	lsrs	r2, r2, #1
 800589a:	3a01      	subs	r2, #1
 800589c:	0552      	lsls	r2, r2, #21
 800589e:	4311      	orrs	r1, r2
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058a4:	0852      	lsrs	r2, r2, #1
 80058a6:	3a01      	subs	r2, #1
 80058a8:	0652      	lsls	r2, r2, #25
 80058aa:	4311      	orrs	r1, r2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058b0:	0912      	lsrs	r2, r2, #4
 80058b2:	0452      	lsls	r2, r2, #17
 80058b4:	430a      	orrs	r2, r1
 80058b6:	4930      	ldr	r1, [pc, #192]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058bc:	4b2e      	ldr	r3, [pc, #184]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2d      	ldr	r2, [pc, #180]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 80058c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058c8:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 80058ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058d4:	f7fe f9da 	bl	8003c8c <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058dc:	f7fe f9d6 	bl	8003c8c <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e058      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ee:	4b22      	ldr	r3, [pc, #136]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058fa:	e050      	b.n	800599e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e04f      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005900:	4b1d      	ldr	r3, [pc, #116]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d148      	bne.n	800599e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800590c:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a19      	ldr	r2, [pc, #100]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 8005912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005918:	4b17      	ldr	r3, [pc, #92]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4a16      	ldr	r2, [pc, #88]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 800591e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005924:	f7fe f9b2 	bl	8003c8c <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800592c:	f7fe f9ae 	bl	8003c8c <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e030      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800593e:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0x734>
 800594a:	e028      	b.n	800599e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b0c      	cmp	r3, #12
 8005950:	d023      	beq.n	800599a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a08      	ldr	r2, [pc, #32]	; (8005978 <HAL_RCC_OscConfig+0x780>)
 8005958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800595c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595e:	f7fe f995 	bl	8003c8c <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005964:	e00c      	b.n	8005980 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005966:	f7fe f991 	bl	8003c8c <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d905      	bls.n	8005980 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e013      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
 8005978:	40021000 	.word	0x40021000
 800597c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005980:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <HAL_RCC_OscConfig+0x7b0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1ec      	bne.n	8005966 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <HAL_RCC_OscConfig+0x7b0>)
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	4905      	ldr	r1, [pc, #20]	; (80059a8 <HAL_RCC_OscConfig+0x7b0>)
 8005992:	4b06      	ldr	r3, [pc, #24]	; (80059ac <HAL_RCC_OscConfig+0x7b4>)
 8005994:	4013      	ands	r3, r2
 8005996:	60cb      	str	r3, [r1, #12]
 8005998:	e001      	b.n	800599e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40021000 	.word	0x40021000
 80059ac:	feeefffc 	.word	0xfeeefffc

080059b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e0e7      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059c4:	4b75      	ldr	r3, [pc, #468]	; (8005b9c <HAL_RCC_ClockConfig+0x1ec>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d910      	bls.n	80059f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d2:	4b72      	ldr	r3, [pc, #456]	; (8005b9c <HAL_RCC_ClockConfig+0x1ec>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f023 0207 	bic.w	r2, r3, #7
 80059da:	4970      	ldr	r1, [pc, #448]	; (8005b9c <HAL_RCC_ClockConfig+0x1ec>)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	4313      	orrs	r3, r2
 80059e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e2:	4b6e      	ldr	r3, [pc, #440]	; (8005b9c <HAL_RCC_ClockConfig+0x1ec>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0cf      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d010      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	4b66      	ldr	r3, [pc, #408]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d908      	bls.n	8005a22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a10:	4b63      	ldr	r3, [pc, #396]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	4960      	ldr	r1, [pc, #384]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d04c      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d107      	bne.n	8005a46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a36:	4b5a      	ldr	r3, [pc, #360]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d121      	bne.n	8005a86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e0a6      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d107      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a4e:	4b54      	ldr	r3, [pc, #336]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d115      	bne.n	8005a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e09a      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d107      	bne.n	8005a76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a66:	4b4e      	ldr	r3, [pc, #312]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e08e      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a76:	4b4a      	ldr	r3, [pc, #296]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e086      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a86:	4b46      	ldr	r3, [pc, #280]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f023 0203 	bic.w	r2, r3, #3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	4943      	ldr	r1, [pc, #268]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a98:	f7fe f8f8 	bl	8003c8c <HAL_GetTick>
 8005a9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9e:	e00a      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aa0:	f7fe f8f4 	bl	8003c8c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e06e      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab6:	4b3a      	ldr	r3, [pc, #232]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 020c 	and.w	r2, r3, #12
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d1eb      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d010      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	4b31      	ldr	r3, [pc, #196]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d208      	bcs.n	8005af6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ae4:	4b2e      	ldr	r3, [pc, #184]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	492b      	ldr	r1, [pc, #172]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005af6:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <HAL_RCC_ClockConfig+0x1ec>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d210      	bcs.n	8005b26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b04:	4b25      	ldr	r3, [pc, #148]	; (8005b9c <HAL_RCC_ClockConfig+0x1ec>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f023 0207 	bic.w	r2, r3, #7
 8005b0c:	4923      	ldr	r1, [pc, #140]	; (8005b9c <HAL_RCC_ClockConfig+0x1ec>)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b14:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <HAL_RCC_ClockConfig+0x1ec>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d001      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e036      	b.n	8005b94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b32:	4b1b      	ldr	r3, [pc, #108]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	4918      	ldr	r1, [pc, #96]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0308 	and.w	r3, r3, #8
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b50:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4910      	ldr	r1, [pc, #64]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b64:	f000 f824 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	091b      	lsrs	r3, r3, #4
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	490b      	ldr	r1, [pc, #44]	; (8005ba4 <HAL_RCC_ClockConfig+0x1f4>)
 8005b76:	5ccb      	ldrb	r3, [r1, r3]
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b80:	4a09      	ldr	r2, [pc, #36]	; (8005ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8005b82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b84:	4b09      	ldr	r3, [pc, #36]	; (8005bac <HAL_RCC_ClockConfig+0x1fc>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe f82f 	bl	8003bec <HAL_InitTick>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	72fb      	strb	r3, [r7, #11]

  return status;
 8005b92:	7afb      	ldrb	r3, [r7, #11]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40022000 	.word	0x40022000
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	08013f58 	.word	0x08013f58
 8005ba8:	20000000 	.word	0x20000000
 8005bac:	20000004 	.word	0x20000004

08005bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b089      	sub	sp, #36	; 0x24
 8005bb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bbe:	4b3e      	ldr	r3, [pc, #248]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bc8:	4b3b      	ldr	r3, [pc, #236]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2b0c      	cmp	r3, #12
 8005bdc:	d121      	bne.n	8005c22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d11e      	bne.n	8005c22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005be4:	4b34      	ldr	r3, [pc, #208]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d107      	bne.n	8005c00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005bf0:	4b31      	ldr	r3, [pc, #196]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf6:	0a1b      	lsrs	r3, r3, #8
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	e005      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c00:	4b2d      	ldr	r3, [pc, #180]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	091b      	lsrs	r3, r3, #4
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c0c:	4a2b      	ldr	r2, [pc, #172]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10d      	bne.n	8005c38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c20:	e00a      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d102      	bne.n	8005c2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c28:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	e004      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d101      	bne.n	8005c38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c34:	4b23      	ldr	r3, [pc, #140]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b0c      	cmp	r3, #12
 8005c3c:	d134      	bne.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c3e:	4b1e      	ldr	r3, [pc, #120]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d003      	beq.n	8005c56 <HAL_RCC_GetSysClockFreq+0xa6>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d003      	beq.n	8005c5c <HAL_RCC_GetSysClockFreq+0xac>
 8005c54:	e005      	b.n	8005c62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c56:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c58:	617b      	str	r3, [r7, #20]
      break;
 8005c5a:	e005      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c5c:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c5e:	617b      	str	r3, [r7, #20]
      break;
 8005c60:	e002      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	617b      	str	r3, [r7, #20]
      break;
 8005c66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c68:	4b13      	ldr	r3, [pc, #76]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	091b      	lsrs	r3, r3, #4
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	3301      	adds	r3, #1
 8005c74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c76:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	0a1b      	lsrs	r3, r3, #8
 8005c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	fb03 f202 	mul.w	r2, r3, r2
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c8e:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	0e5b      	lsrs	r3, r3, #25
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	3301      	adds	r3, #1
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ca8:	69bb      	ldr	r3, [r7, #24]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3724      	adds	r7, #36	; 0x24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	08013f70 	.word	0x08013f70
 8005cc0:	00f42400 	.word	0x00f42400
 8005cc4:	007a1200 	.word	0x007a1200

08005cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ccc:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cce:	681b      	ldr	r3, [r3, #0]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	20000000 	.word	0x20000000

08005ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ce4:	f7ff fff0 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	4904      	ldr	r1, [pc, #16]	; (8005d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cf6:	5ccb      	ldrb	r3, [r1, r3]
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40021000 	.word	0x40021000
 8005d08:	08013f68 	.word	0x08013f68

08005d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d10:	f7ff ffda 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 8005d14:	4602      	mov	r2, r0
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	0adb      	lsrs	r3, r3, #11
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	4904      	ldr	r1, [pc, #16]	; (8005d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d22:	5ccb      	ldrb	r3, [r1, r3]
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40021000 	.word	0x40021000
 8005d34:	08013f68 	.word	0x08013f68

08005d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d40:	2300      	movs	r3, #0
 8005d42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d44:	4b2a      	ldr	r3, [pc, #168]	; (8005df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d50:	f7ff f9ee 	bl	8005130 <HAL_PWREx_GetVoltageRange>
 8005d54:	6178      	str	r0, [r7, #20]
 8005d56:	e014      	b.n	8005d82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d58:	4b25      	ldr	r3, [pc, #148]	; (8005df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	4a24      	ldr	r2, [pc, #144]	; (8005df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d62:	6593      	str	r3, [r2, #88]	; 0x58
 8005d64:	4b22      	ldr	r3, [pc, #136]	; (8005df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d70:	f7ff f9de 	bl	8005130 <HAL_PWREx_GetVoltageRange>
 8005d74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d76:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7a:	4a1d      	ldr	r2, [pc, #116]	; (8005df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d88:	d10b      	bne.n	8005da2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b80      	cmp	r3, #128	; 0x80
 8005d8e:	d919      	bls.n	8005dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2ba0      	cmp	r3, #160	; 0xa0
 8005d94:	d902      	bls.n	8005d9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d96:	2302      	movs	r3, #2
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	e013      	b.n	8005dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	613b      	str	r3, [r7, #16]
 8005da0:	e010      	b.n	8005dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b80      	cmp	r3, #128	; 0x80
 8005da6:	d902      	bls.n	8005dae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005da8:	2303      	movs	r3, #3
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	e00a      	b.n	8005dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b80      	cmp	r3, #128	; 0x80
 8005db2:	d102      	bne.n	8005dba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005db4:	2302      	movs	r3, #2
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	e004      	b.n	8005dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b70      	cmp	r3, #112	; 0x70
 8005dbe:	d101      	bne.n	8005dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f023 0207 	bic.w	r2, r3, #7
 8005dcc:	4909      	ldr	r1, [pc, #36]	; (8005df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005dd4:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d001      	beq.n	8005de6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40021000 	.word	0x40021000
 8005df4:	40022000 	.word	0x40022000

08005df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e00:	2300      	movs	r3, #0
 8005e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e04:	2300      	movs	r3, #0
 8005e06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d041      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e1c:	d02a      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005e1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e22:	d824      	bhi.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e28:	d008      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e2e:	d81e      	bhi.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e38:	d010      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e3a:	e018      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e3c:	4b86      	ldr	r3, [pc, #536]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	4a85      	ldr	r2, [pc, #532]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e48:	e015      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fabb 	bl	80063cc <RCCEx_PLLSAI1_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e5a:	e00c      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3320      	adds	r3, #32
 8005e60:	2100      	movs	r1, #0
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fba6 	bl	80065b4 <RCCEx_PLLSAI2_Config>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e6c:	e003      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	74fb      	strb	r3, [r7, #19]
      break;
 8005e72:	e000      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e76:	7cfb      	ldrb	r3, [r7, #19]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10b      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e7c:	4b76      	ldr	r3, [pc, #472]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e8a:	4973      	ldr	r1, [pc, #460]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e92:	e001      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e94:	7cfb      	ldrb	r3, [r7, #19]
 8005e96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d041      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005eac:	d02a      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005eae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005eb2:	d824      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eb8:	d008      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005eba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ebe:	d81e      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00a      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ec8:	d010      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005eca:	e018      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ecc:	4b62      	ldr	r3, [pc, #392]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4a61      	ldr	r2, [pc, #388]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ed8:	e015      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3304      	adds	r3, #4
 8005ede:	2100      	movs	r1, #0
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fa73 	bl	80063cc <RCCEx_PLLSAI1_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005eea:	e00c      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3320      	adds	r3, #32
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fb5e 	bl	80065b4 <RCCEx_PLLSAI2_Config>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005efc:	e003      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	74fb      	strb	r3, [r7, #19]
      break;
 8005f02:	e000      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f06:	7cfb      	ldrb	r3, [r7, #19]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10b      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f0c:	4b52      	ldr	r3, [pc, #328]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f1a:	494f      	ldr	r1, [pc, #316]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f22:	e001      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f24:	7cfb      	ldrb	r3, [r7, #19]
 8005f26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80a0 	beq.w	8006076 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f36:	2300      	movs	r3, #0
 8005f38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f3a:	4b47      	ldr	r3, [pc, #284]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00d      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f50:	4b41      	ldr	r3, [pc, #260]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f54:	4a40      	ldr	r2, [pc, #256]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f5c:	4b3e      	ldr	r3, [pc, #248]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f6c:	4b3b      	ldr	r3, [pc, #236]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a3a      	ldr	r2, [pc, #232]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f78:	f7fd fe88 	bl	8003c8c <HAL_GetTick>
 8005f7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f7e:	e009      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f80:	f7fd fe84 	bl	8003c8c <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d902      	bls.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	74fb      	strb	r3, [r7, #19]
        break;
 8005f92:	e005      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f94:	4b31      	ldr	r3, [pc, #196]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0ef      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005fa0:	7cfb      	ldrb	r3, [r7, #19]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d15c      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fa6:	4b2c      	ldr	r3, [pc, #176]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01f      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d019      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fc4:	4b24      	ldr	r3, [pc, #144]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fd0:	4b21      	ldr	r3, [pc, #132]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd6:	4a20      	ldr	r2, [pc, #128]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fe0:	4b1d      	ldr	r3, [pc, #116]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe6:	4a1c      	ldr	r2, [pc, #112]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ff0:	4a19      	ldr	r2, [pc, #100]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d016      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006002:	f7fd fe43 	bl	8003c8c <HAL_GetTick>
 8006006:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006008:	e00b      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800600a:	f7fd fe3f 	bl	8003c8c <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	f241 3288 	movw	r2, #5000	; 0x1388
 8006018:	4293      	cmp	r3, r2
 800601a:	d902      	bls.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	74fb      	strb	r3, [r7, #19]
            break;
 8006020:	e006      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006022:	4b0d      	ldr	r3, [pc, #52]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0ec      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006030:	7cfb      	ldrb	r3, [r7, #19]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10c      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006036:	4b08      	ldr	r3, [pc, #32]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006046:	4904      	ldr	r1, [pc, #16]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800604e:	e009      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006050:	7cfb      	ldrb	r3, [r7, #19]
 8006052:	74bb      	strb	r3, [r7, #18]
 8006054:	e006      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006056:	bf00      	nop
 8006058:	40021000 	.word	0x40021000
 800605c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006060:	7cfb      	ldrb	r3, [r7, #19]
 8006062:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006064:	7c7b      	ldrb	r3, [r7, #17]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d105      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800606a:	4b9e      	ldr	r3, [pc, #632]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606e:	4a9d      	ldr	r2, [pc, #628]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006074:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006082:	4b98      	ldr	r3, [pc, #608]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006088:	f023 0203 	bic.w	r2, r3, #3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	4994      	ldr	r1, [pc, #592]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006092:	4313      	orrs	r3, r2
 8006094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060a4:	4b8f      	ldr	r3, [pc, #572]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060aa:	f023 020c 	bic.w	r2, r3, #12
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	498c      	ldr	r1, [pc, #560]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060c6:	4b87      	ldr	r3, [pc, #540]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	4983      	ldr	r1, [pc, #524]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00a      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060e8:	4b7e      	ldr	r3, [pc, #504]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f6:	497b      	ldr	r1, [pc, #492]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800610a:	4b76      	ldr	r3, [pc, #472]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800610c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006118:	4972      	ldr	r1, [pc, #456]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00a      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800612c:	4b6d      	ldr	r3, [pc, #436]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006132:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613a:	496a      	ldr	r1, [pc, #424]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800614e:	4b65      	ldr	r3, [pc, #404]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615c:	4961      	ldr	r1, [pc, #388]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006170:	4b5c      	ldr	r3, [pc, #368]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617e:	4959      	ldr	r1, [pc, #356]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006192:	4b54      	ldr	r3, [pc, #336]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006198:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a0:	4950      	ldr	r1, [pc, #320]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061b4:	4b4b      	ldr	r3, [pc, #300]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c2:	4948      	ldr	r1, [pc, #288]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061d6:	4b43      	ldr	r3, [pc, #268]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e4:	493f      	ldr	r1, [pc, #252]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d028      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061f8:	4b3a      	ldr	r3, [pc, #232]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006206:	4937      	ldr	r1, [pc, #220]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006216:	d106      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006218:	4b32      	ldr	r3, [pc, #200]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4a31      	ldr	r2, [pc, #196]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006222:	60d3      	str	r3, [r2, #12]
 8006224:	e011      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800622a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800622e:	d10c      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3304      	adds	r3, #4
 8006234:	2101      	movs	r1, #1
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f8c8 	bl	80063cc <RCCEx_PLLSAI1_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006240:	7cfb      	ldrb	r3, [r7, #19]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006246:	7cfb      	ldrb	r3, [r7, #19]
 8006248:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d028      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006256:	4b23      	ldr	r3, [pc, #140]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006264:	491f      	ldr	r1, [pc, #124]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006274:	d106      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006276:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	4a1a      	ldr	r2, [pc, #104]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800627c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006280:	60d3      	str	r3, [r2, #12]
 8006282:	e011      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800628c:	d10c      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3304      	adds	r3, #4
 8006292:	2101      	movs	r1, #1
 8006294:	4618      	mov	r0, r3
 8006296:	f000 f899 	bl	80063cc <RCCEx_PLLSAI1_Config>
 800629a:	4603      	mov	r3, r0
 800629c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800629e:	7cfb      	ldrb	r3, [r7, #19]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80062a4:	7cfb      	ldrb	r3, [r7, #19]
 80062a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d02b      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062b4:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c2:	4908      	ldr	r1, [pc, #32]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062d2:	d109      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	4a02      	ldr	r2, [pc, #8]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062de:	60d3      	str	r3, [r2, #12]
 80062e0:	e014      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80062e2:	bf00      	nop
 80062e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062f0:	d10c      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3304      	adds	r3, #4
 80062f6:	2101      	movs	r1, #1
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 f867 	bl	80063cc <RCCEx_PLLSAI1_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006302:	7cfb      	ldrb	r3, [r7, #19]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006308:	7cfb      	ldrb	r3, [r7, #19]
 800630a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d02f      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006318:	4b2b      	ldr	r3, [pc, #172]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006326:	4928      	ldr	r1, [pc, #160]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006336:	d10d      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	2102      	movs	r1, #2
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f844 	bl	80063cc <RCCEx_PLLSAI1_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006348:	7cfb      	ldrb	r3, [r7, #19]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d014      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800634e:	7cfb      	ldrb	r3, [r7, #19]
 8006350:	74bb      	strb	r3, [r7, #18]
 8006352:	e011      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800635c:	d10c      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3320      	adds	r3, #32
 8006362:	2102      	movs	r1, #2
 8006364:	4618      	mov	r0, r3
 8006366:	f000 f925 	bl	80065b4 <RCCEx_PLLSAI2_Config>
 800636a:	4603      	mov	r3, r0
 800636c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800636e:	7cfb      	ldrb	r3, [r7, #19]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006374:	7cfb      	ldrb	r3, [r7, #19]
 8006376:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006384:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006392:	490d      	ldr	r1, [pc, #52]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063a6:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063b6:	4904      	ldr	r1, [pc, #16]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063be:	7cbb      	ldrb	r3, [r7, #18]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40021000 	.word	0x40021000

080063cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063da:	4b75      	ldr	r3, [pc, #468]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d018      	beq.n	8006418 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063e6:	4b72      	ldr	r3, [pc, #456]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f003 0203 	and.w	r2, r3, #3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d10d      	bne.n	8006412 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
       ||
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d009      	beq.n	8006412 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80063fe:	4b6c      	ldr	r3, [pc, #432]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	091b      	lsrs	r3, r3, #4
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
       ||
 800640e:	429a      	cmp	r2, r3
 8006410:	d047      	beq.n	80064a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	73fb      	strb	r3, [r7, #15]
 8006416:	e044      	b.n	80064a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d018      	beq.n	8006452 <RCCEx_PLLSAI1_Config+0x86>
 8006420:	2b03      	cmp	r3, #3
 8006422:	d825      	bhi.n	8006470 <RCCEx_PLLSAI1_Config+0xa4>
 8006424:	2b01      	cmp	r3, #1
 8006426:	d002      	beq.n	800642e <RCCEx_PLLSAI1_Config+0x62>
 8006428:	2b02      	cmp	r3, #2
 800642a:	d009      	beq.n	8006440 <RCCEx_PLLSAI1_Config+0x74>
 800642c:	e020      	b.n	8006470 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800642e:	4b60      	ldr	r3, [pc, #384]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d11d      	bne.n	8006476 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800643e:	e01a      	b.n	8006476 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006440:	4b5b      	ldr	r3, [pc, #364]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006448:	2b00      	cmp	r3, #0
 800644a:	d116      	bne.n	800647a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006450:	e013      	b.n	800647a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006452:	4b57      	ldr	r3, [pc, #348]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10f      	bne.n	800647e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800645e:	4b54      	ldr	r3, [pc, #336]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800646e:	e006      	b.n	800647e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	e004      	b.n	8006480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006476:	bf00      	nop
 8006478:	e002      	b.n	8006480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800647a:	bf00      	nop
 800647c:	e000      	b.n	8006480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800647e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10d      	bne.n	80064a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006486:	4b4a      	ldr	r3, [pc, #296]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6819      	ldr	r1, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	3b01      	subs	r3, #1
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	430b      	orrs	r3, r1
 800649c:	4944      	ldr	r1, [pc, #272]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d17d      	bne.n	80065a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064a8:	4b41      	ldr	r3, [pc, #260]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a40      	ldr	r2, [pc, #256]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b4:	f7fd fbea 	bl	8003c8c <HAL_GetTick>
 80064b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064ba:	e009      	b.n	80064d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064bc:	f7fd fbe6 	bl	8003c8c <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d902      	bls.n	80064d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	73fb      	strb	r3, [r7, #15]
        break;
 80064ce:	e005      	b.n	80064dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064d0:	4b37      	ldr	r3, [pc, #220]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1ef      	bne.n	80064bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d160      	bne.n	80065a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d111      	bne.n	800650c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064e8:	4b31      	ldr	r3, [pc, #196]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80064f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6892      	ldr	r2, [r2, #8]
 80064f8:	0211      	lsls	r1, r2, #8
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68d2      	ldr	r2, [r2, #12]
 80064fe:	0912      	lsrs	r2, r2, #4
 8006500:	0452      	lsls	r2, r2, #17
 8006502:	430a      	orrs	r2, r1
 8006504:	492a      	ldr	r1, [pc, #168]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006506:	4313      	orrs	r3, r2
 8006508:	610b      	str	r3, [r1, #16]
 800650a:	e027      	b.n	800655c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d112      	bne.n	8006538 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006512:	4b27      	ldr	r3, [pc, #156]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800651a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6892      	ldr	r2, [r2, #8]
 8006522:	0211      	lsls	r1, r2, #8
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6912      	ldr	r2, [r2, #16]
 8006528:	0852      	lsrs	r2, r2, #1
 800652a:	3a01      	subs	r2, #1
 800652c:	0552      	lsls	r2, r2, #21
 800652e:	430a      	orrs	r2, r1
 8006530:	491f      	ldr	r1, [pc, #124]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006532:	4313      	orrs	r3, r2
 8006534:	610b      	str	r3, [r1, #16]
 8006536:	e011      	b.n	800655c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006538:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006540:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6892      	ldr	r2, [r2, #8]
 8006548:	0211      	lsls	r1, r2, #8
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6952      	ldr	r2, [r2, #20]
 800654e:	0852      	lsrs	r2, r2, #1
 8006550:	3a01      	subs	r2, #1
 8006552:	0652      	lsls	r2, r2, #25
 8006554:	430a      	orrs	r2, r1
 8006556:	4916      	ldr	r1, [pc, #88]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006558:	4313      	orrs	r3, r2
 800655a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800655c:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006562:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006566:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006568:	f7fd fb90 	bl	8003c8c <HAL_GetTick>
 800656c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800656e:	e009      	b.n	8006584 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006570:	f7fd fb8c 	bl	8003c8c <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d902      	bls.n	8006584 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	73fb      	strb	r3, [r7, #15]
          break;
 8006582:	e005      	b.n	8006590 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006584:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0ef      	beq.n	8006570 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006596:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	4904      	ldr	r1, [pc, #16]	; (80065b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000

080065b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065c2:	4b6a      	ldr	r3, [pc, #424]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d018      	beq.n	8006600 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065ce:	4b67      	ldr	r3, [pc, #412]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f003 0203 	and.w	r2, r3, #3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d10d      	bne.n	80065fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
       ||
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d009      	beq.n	80065fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80065e6:	4b61      	ldr	r3, [pc, #388]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	091b      	lsrs	r3, r3, #4
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
       ||
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d047      	beq.n	800668a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	73fb      	strb	r3, [r7, #15]
 80065fe:	e044      	b.n	800668a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b03      	cmp	r3, #3
 8006606:	d018      	beq.n	800663a <RCCEx_PLLSAI2_Config+0x86>
 8006608:	2b03      	cmp	r3, #3
 800660a:	d825      	bhi.n	8006658 <RCCEx_PLLSAI2_Config+0xa4>
 800660c:	2b01      	cmp	r3, #1
 800660e:	d002      	beq.n	8006616 <RCCEx_PLLSAI2_Config+0x62>
 8006610:	2b02      	cmp	r3, #2
 8006612:	d009      	beq.n	8006628 <RCCEx_PLLSAI2_Config+0x74>
 8006614:	e020      	b.n	8006658 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006616:	4b55      	ldr	r3, [pc, #340]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d11d      	bne.n	800665e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006626:	e01a      	b.n	800665e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006628:	4b50      	ldr	r3, [pc, #320]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006630:	2b00      	cmp	r3, #0
 8006632:	d116      	bne.n	8006662 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006638:	e013      	b.n	8006662 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800663a:	4b4c      	ldr	r3, [pc, #304]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10f      	bne.n	8006666 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006646:	4b49      	ldr	r3, [pc, #292]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d109      	bne.n	8006666 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006656:	e006      	b.n	8006666 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
      break;
 800665c:	e004      	b.n	8006668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800665e:	bf00      	nop
 8006660:	e002      	b.n	8006668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006662:	bf00      	nop
 8006664:	e000      	b.n	8006668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006666:	bf00      	nop
    }

    if(status == HAL_OK)
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10d      	bne.n	800668a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800666e:	4b3f      	ldr	r3, [pc, #252]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6819      	ldr	r1, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	3b01      	subs	r3, #1
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	430b      	orrs	r3, r1
 8006684:	4939      	ldr	r1, [pc, #228]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006686:	4313      	orrs	r3, r2
 8006688:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d167      	bne.n	8006760 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006690:	4b36      	ldr	r3, [pc, #216]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a35      	ldr	r2, [pc, #212]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800669a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800669c:	f7fd faf6 	bl	8003c8c <HAL_GetTick>
 80066a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066a2:	e009      	b.n	80066b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066a4:	f7fd faf2 	bl	8003c8c <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d902      	bls.n	80066b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	73fb      	strb	r3, [r7, #15]
        break;
 80066b6:	e005      	b.n	80066c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066b8:	4b2c      	ldr	r3, [pc, #176]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1ef      	bne.n	80066a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d14a      	bne.n	8006760 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d111      	bne.n	80066f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066d0:	4b26      	ldr	r3, [pc, #152]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80066d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6892      	ldr	r2, [r2, #8]
 80066e0:	0211      	lsls	r1, r2, #8
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	68d2      	ldr	r2, [r2, #12]
 80066e6:	0912      	lsrs	r2, r2, #4
 80066e8:	0452      	lsls	r2, r2, #17
 80066ea:	430a      	orrs	r2, r1
 80066ec:	491f      	ldr	r1, [pc, #124]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	614b      	str	r3, [r1, #20]
 80066f2:	e011      	b.n	8006718 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066f4:	4b1d      	ldr	r3, [pc, #116]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6892      	ldr	r2, [r2, #8]
 8006704:	0211      	lsls	r1, r2, #8
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6912      	ldr	r2, [r2, #16]
 800670a:	0852      	lsrs	r2, r2, #1
 800670c:	3a01      	subs	r2, #1
 800670e:	0652      	lsls	r2, r2, #25
 8006710:	430a      	orrs	r2, r1
 8006712:	4916      	ldr	r1, [pc, #88]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006714:	4313      	orrs	r3, r2
 8006716:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006718:	4b14      	ldr	r3, [pc, #80]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a13      	ldr	r2, [pc, #76]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 800671e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006722:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006724:	f7fd fab2 	bl	8003c8c <HAL_GetTick>
 8006728:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800672a:	e009      	b.n	8006740 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800672c:	f7fd faae 	bl	8003c8c <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d902      	bls.n	8006740 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	73fb      	strb	r3, [r7, #15]
          break;
 800673e:	e005      	b.n	800674c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006740:	4b0a      	ldr	r3, [pc, #40]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0ef      	beq.n	800672c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006752:	4b06      	ldr	r3, [pc, #24]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	4904      	ldr	r1, [pc, #16]	; (800676c <RCCEx_PLLSAI2_Config+0x1b8>)
 800675c:	4313      	orrs	r3, r2
 800675e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	40021000 	.word	0x40021000

08006770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e095      	b.n	80068ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	d108      	bne.n	800679c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006792:	d009      	beq.n	80067a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	61da      	str	r2, [r3, #28]
 800679a:	e005      	b.n	80067a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fc ff84 	bl	80036d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067e8:	d902      	bls.n	80067f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	e002      	b.n	80067f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80067fe:	d007      	beq.n	8006810 <HAL_SPI_Init+0xa0>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006808:	d002      	beq.n	8006810 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006848:	431a      	orrs	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006852:	ea42 0103 	orr.w	r1, r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	0c1b      	lsrs	r3, r3, #16
 800686c:	f003 0204 	and.w	r2, r3, #4
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800688c:	ea42 0103 	orr.w	r1, r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b08a      	sub	sp, #40	; 0x28
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068c4:	2301      	movs	r3, #1
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d101      	bne.n	80068dc <HAL_SPI_TransmitReceive+0x26>
 80068d8:	2302      	movs	r3, #2
 80068da:	e1fb      	b.n	8006cd4 <HAL_SPI_TransmitReceive+0x41e>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068e4:	f7fd f9d2 	bl	8003c8c <HAL_GetTick>
 80068e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80068f8:	887b      	ldrh	r3, [r7, #2]
 80068fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80068fc:	887b      	ldrh	r3, [r7, #2]
 80068fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006900:	7efb      	ldrb	r3, [r7, #27]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d00e      	beq.n	8006924 <HAL_SPI_TransmitReceive+0x6e>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800690c:	d106      	bne.n	800691c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d102      	bne.n	800691c <HAL_SPI_TransmitReceive+0x66>
 8006916:	7efb      	ldrb	r3, [r7, #27]
 8006918:	2b04      	cmp	r3, #4
 800691a:	d003      	beq.n	8006924 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800691c:	2302      	movs	r3, #2
 800691e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006922:	e1cd      	b.n	8006cc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_SPI_TransmitReceive+0x80>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_SPI_TransmitReceive+0x80>
 8006930:	887b      	ldrh	r3, [r7, #2]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d103      	bne.n	800693e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800693c:	e1c0      	b.n	8006cc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b04      	cmp	r3, #4
 8006948:	d003      	beq.n	8006952 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2205      	movs	r2, #5
 800694e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	887a      	ldrh	r2, [r7, #2]
 8006962:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	887a      	ldrh	r2, [r7, #2]
 800696a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	887a      	ldrh	r2, [r7, #2]
 8006978:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	887a      	ldrh	r2, [r7, #2]
 800697e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006994:	d802      	bhi.n	800699c <HAL_SPI_TransmitReceive+0xe6>
 8006996:	8a3b      	ldrh	r3, [r7, #16]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d908      	bls.n	80069ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069aa:	605a      	str	r2, [r3, #4]
 80069ac:	e007      	b.n	80069be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c8:	2b40      	cmp	r3, #64	; 0x40
 80069ca:	d007      	beq.n	80069dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069e4:	d97c      	bls.n	8006ae0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_SPI_TransmitReceive+0x13e>
 80069ee:	8a7b      	ldrh	r3, [r7, #18]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d169      	bne.n	8006ac8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	881a      	ldrh	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	1c9a      	adds	r2, r3, #2
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a18:	e056      	b.n	8006ac8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d11b      	bne.n	8006a60 <HAL_SPI_TransmitReceive+0x1aa>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d016      	beq.n	8006a60 <HAL_SPI_TransmitReceive+0x1aa>
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d113      	bne.n	8006a60 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	881a      	ldrh	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	1c9a      	adds	r2, r3, #2
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d11c      	bne.n	8006aa8 <HAL_SPI_TransmitReceive+0x1f2>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d016      	beq.n	8006aa8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	b292      	uxth	r2, r2
 8006a86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8c:	1c9a      	adds	r2, r3, #2
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006aa8:	f7fd f8f0 	bl	8003c8c <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d807      	bhi.n	8006ac8 <HAL_SPI_TransmitReceive+0x212>
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d003      	beq.n	8006ac8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006ac6:	e0fb      	b.n	8006cc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1a3      	bne.n	8006a1a <HAL_SPI_TransmitReceive+0x164>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d19d      	bne.n	8006a1a <HAL_SPI_TransmitReceive+0x164>
 8006ade:	e0df      	b.n	8006ca0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <HAL_SPI_TransmitReceive+0x23a>
 8006ae8:	8a7b      	ldrh	r3, [r7, #18]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	f040 80cb 	bne.w	8006c86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d912      	bls.n	8006b20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	881a      	ldrh	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	1c9a      	adds	r2, r3, #2
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	3b02      	subs	r3, #2
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b1e:	e0b2      	b.n	8006c86 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	7812      	ldrb	r2, [r2, #0]
 8006b2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b46:	e09e      	b.n	8006c86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d134      	bne.n	8006bc0 <HAL_SPI_TransmitReceive+0x30a>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d02f      	beq.n	8006bc0 <HAL_SPI_TransmitReceive+0x30a>
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d12c      	bne.n	8006bc0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d912      	bls.n	8006b96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b74:	881a      	ldrh	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	1c9a      	adds	r2, r3, #2
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b02      	subs	r3, #2
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b94:	e012      	b.n	8006bbc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	7812      	ldrb	r2, [r2, #0]
 8006ba2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d148      	bne.n	8006c60 <HAL_SPI_TransmitReceive+0x3aa>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d042      	beq.n	8006c60 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d923      	bls.n	8006c2e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	b292      	uxth	r2, r2
 8006bf2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	1c9a      	adds	r2, r3, #2
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b02      	subs	r3, #2
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d81f      	bhi.n	8006c5c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c2a:	605a      	str	r2, [r3, #4]
 8006c2c:	e016      	b.n	8006c5c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f103 020c 	add.w	r2, r3, #12
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	7812      	ldrb	r2, [r2, #0]
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c60:	f7fd f814 	bl	8003c8c <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d803      	bhi.n	8006c78 <HAL_SPI_TransmitReceive+0x3c2>
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c76:	d102      	bne.n	8006c7e <HAL_SPI_TransmitReceive+0x3c8>
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006c84:	e01c      	b.n	8006cc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f47f af5b 	bne.w	8006b48 <HAL_SPI_TransmitReceive+0x292>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f47f af54 	bne.w	8006b48 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f937 	bl	8006f18 <SPI_EndRxTxTransaction>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d006      	beq.n	8006cbe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	661a      	str	r2, [r3, #96]	; 0x60
 8006cbc:	e000      	b.n	8006cc0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006cbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3728      	adds	r7, #40	; 0x28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006cec:	f7fc ffce 	bl	8003c8c <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006cfc:	f7fc ffc6 	bl	8003c8c <HAL_GetTick>
 8006d00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d02:	4b39      	ldr	r3, [pc, #228]	; (8006de8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	015b      	lsls	r3, r3, #5
 8006d08:	0d1b      	lsrs	r3, r3, #20
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	fb02 f303 	mul.w	r3, r2, r3
 8006d10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d12:	e054      	b.n	8006dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1a:	d050      	beq.n	8006dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d1c:	f7fc ffb6 	bl	8003c8c <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d902      	bls.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d13d      	bne.n	8006dae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d4a:	d111      	bne.n	8006d70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d54:	d004      	beq.n	8006d60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d5e:	d107      	bne.n	8006d70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d78:	d10f      	bne.n	8006d9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e017      	b.n	8006dde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	bf0c      	ite	eq
 8006dce:	2301      	moveq	r3, #1
 8006dd0:	2300      	movne	r3, #0
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d19b      	bne.n	8006d14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000000 	.word	0x20000000

08006dec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08a      	sub	sp, #40	; 0x28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006dfe:	f7fc ff45 	bl	8003c8c <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	1a9b      	subs	r3, r3, r2
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006e0e:	f7fc ff3d 	bl	8003c8c <HAL_GetTick>
 8006e12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e1c:	4b3d      	ldr	r3, [pc, #244]	; (8006f14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	00da      	lsls	r2, r3, #3
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	0d1b      	lsrs	r3, r3, #20
 8006e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
 8006e32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006e34:	e060      	b.n	8006ef8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e3c:	d107      	bne.n	8006e4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d104      	bne.n	8006e4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e54:	d050      	beq.n	8006ef8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e56:	f7fc ff19 	bl	8003c8c <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d902      	bls.n	8006e6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d13d      	bne.n	8006ee8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e84:	d111      	bne.n	8006eaa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e8e:	d004      	beq.n	8006e9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e98:	d107      	bne.n	8006eaa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb2:	d10f      	bne.n	8006ed4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ed2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e010      	b.n	8006f0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689a      	ldr	r2, [r3, #8]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	4013      	ands	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d196      	bne.n	8006e36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3728      	adds	r7, #40	; 0x28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000000 	.word	0x20000000

08006f18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af02      	add	r7, sp, #8
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f7ff ff5b 	bl	8006dec <SPI_WaitFifoStateUntilTimeout>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f40:	f043 0220 	orr.w	r2, r3, #32
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e027      	b.n	8006f9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2200      	movs	r2, #0
 8006f54:	2180      	movs	r1, #128	; 0x80
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f7ff fec0 	bl	8006cdc <SPI_WaitFlagStateUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d007      	beq.n	8006f72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f66:	f043 0220 	orr.w	r2, r3, #32
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e014      	b.n	8006f9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7ff ff34 	bl	8006dec <SPI_WaitFifoStateUntilTimeout>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d007      	beq.n	8006f9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f8e:	f043 0220 	orr.w	r2, r3, #32
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e000      	b.n	8006f9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e049      	b.n	800704a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fc fbe8 	bl	80037a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	f000 fd1e 	bl	8007a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	d001      	beq.n	800706c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e047      	b.n	80070fc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a23      	ldr	r2, [pc, #140]	; (8007108 <HAL_TIM_Base_Start+0xb4>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d01d      	beq.n	80070ba <HAL_TIM_Base_Start+0x66>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007086:	d018      	beq.n	80070ba <HAL_TIM_Base_Start+0x66>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a1f      	ldr	r2, [pc, #124]	; (800710c <HAL_TIM_Base_Start+0xb8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d013      	beq.n	80070ba <HAL_TIM_Base_Start+0x66>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a1e      	ldr	r2, [pc, #120]	; (8007110 <HAL_TIM_Base_Start+0xbc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d00e      	beq.n	80070ba <HAL_TIM_Base_Start+0x66>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a1c      	ldr	r2, [pc, #112]	; (8007114 <HAL_TIM_Base_Start+0xc0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d009      	beq.n	80070ba <HAL_TIM_Base_Start+0x66>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a1b      	ldr	r2, [pc, #108]	; (8007118 <HAL_TIM_Base_Start+0xc4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d004      	beq.n	80070ba <HAL_TIM_Base_Start+0x66>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a19      	ldr	r2, [pc, #100]	; (800711c <HAL_TIM_Base_Start+0xc8>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d115      	bne.n	80070e6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	4b17      	ldr	r3, [pc, #92]	; (8007120 <HAL_TIM_Base_Start+0xcc>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b06      	cmp	r3, #6
 80070ca:	d015      	beq.n	80070f8 <HAL_TIM_Base_Start+0xa4>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d2:	d011      	beq.n	80070f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e4:	e008      	b.n	80070f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0201 	orr.w	r2, r2, #1
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	e000      	b.n	80070fa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	40012c00 	.word	0x40012c00
 800710c:	40000400 	.word	0x40000400
 8007110:	40000800 	.word	0x40000800
 8007114:	40000c00 	.word	0x40000c00
 8007118:	40013400 	.word	0x40013400
 800711c:	40014000 	.word	0x40014000
 8007120:	00010007 	.word	0x00010007

08007124 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6a1a      	ldr	r2, [r3, #32]
 8007132:	f241 1311 	movw	r3, #4369	; 0x1111
 8007136:	4013      	ands	r3, r2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10f      	bne.n	800715c <HAL_TIM_Base_Stop+0x38>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	f240 4344 	movw	r3, #1092	; 0x444
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d107      	bne.n	800715c <HAL_TIM_Base_Stop+0x38>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0201 	bic.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b082      	sub	sp, #8
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e049      	b.n	8007218 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d106      	bne.n	800719e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7fc fadb 	bl	8003754 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2202      	movs	r2, #2
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3304      	adds	r3, #4
 80071ae:	4619      	mov	r1, r3
 80071b0:	4610      	mov	r0, r2
 80071b2:	f000 fc37 	bl	8007a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d109      	bne.n	8007244 <HAL_TIM_PWM_Start+0x24>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b01      	cmp	r3, #1
 800723a:	bf14      	ite	ne
 800723c:	2301      	movne	r3, #1
 800723e:	2300      	moveq	r3, #0
 8007240:	b2db      	uxtb	r3, r3
 8007242:	e03c      	b.n	80072be <HAL_TIM_PWM_Start+0x9e>
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2b04      	cmp	r3, #4
 8007248:	d109      	bne.n	800725e <HAL_TIM_PWM_Start+0x3e>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b01      	cmp	r3, #1
 8007254:	bf14      	ite	ne
 8007256:	2301      	movne	r3, #1
 8007258:	2300      	moveq	r3, #0
 800725a:	b2db      	uxtb	r3, r3
 800725c:	e02f      	b.n	80072be <HAL_TIM_PWM_Start+0x9e>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b08      	cmp	r3, #8
 8007262:	d109      	bne.n	8007278 <HAL_TIM_PWM_Start+0x58>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b01      	cmp	r3, #1
 800726e:	bf14      	ite	ne
 8007270:	2301      	movne	r3, #1
 8007272:	2300      	moveq	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	e022      	b.n	80072be <HAL_TIM_PWM_Start+0x9e>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b0c      	cmp	r3, #12
 800727c:	d109      	bne.n	8007292 <HAL_TIM_PWM_Start+0x72>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b01      	cmp	r3, #1
 8007288:	bf14      	ite	ne
 800728a:	2301      	movne	r3, #1
 800728c:	2300      	moveq	r3, #0
 800728e:	b2db      	uxtb	r3, r3
 8007290:	e015      	b.n	80072be <HAL_TIM_PWM_Start+0x9e>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b10      	cmp	r3, #16
 8007296:	d109      	bne.n	80072ac <HAL_TIM_PWM_Start+0x8c>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	bf14      	ite	ne
 80072a4:	2301      	movne	r3, #1
 80072a6:	2300      	moveq	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	e008      	b.n	80072be <HAL_TIM_PWM_Start+0x9e>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	bf14      	ite	ne
 80072b8:	2301      	movne	r3, #1
 80072ba:	2300      	moveq	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e09c      	b.n	8007400 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <HAL_TIM_PWM_Start+0xb6>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d4:	e023      	b.n	800731e <HAL_TIM_PWM_Start+0xfe>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d104      	bne.n	80072e6 <HAL_TIM_PWM_Start+0xc6>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e4:	e01b      	b.n	800731e <HAL_TIM_PWM_Start+0xfe>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d104      	bne.n	80072f6 <HAL_TIM_PWM_Start+0xd6>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072f4:	e013      	b.n	800731e <HAL_TIM_PWM_Start+0xfe>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b0c      	cmp	r3, #12
 80072fa:	d104      	bne.n	8007306 <HAL_TIM_PWM_Start+0xe6>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007304:	e00b      	b.n	800731e <HAL_TIM_PWM_Start+0xfe>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b10      	cmp	r3, #16
 800730a:	d104      	bne.n	8007316 <HAL_TIM_PWM_Start+0xf6>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007314:	e003      	b.n	800731e <HAL_TIM_PWM_Start+0xfe>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2202      	movs	r2, #2
 800731a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2201      	movs	r2, #1
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	4618      	mov	r0, r3
 8007328:	f000 feec 	bl	8008104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a35      	ldr	r2, [pc, #212]	; (8007408 <HAL_TIM_PWM_Start+0x1e8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <HAL_TIM_PWM_Start+0x13e>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a34      	ldr	r2, [pc, #208]	; (800740c <HAL_TIM_PWM_Start+0x1ec>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00e      	beq.n	800735e <HAL_TIM_PWM_Start+0x13e>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a32      	ldr	r2, [pc, #200]	; (8007410 <HAL_TIM_PWM_Start+0x1f0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d009      	beq.n	800735e <HAL_TIM_PWM_Start+0x13e>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a31      	ldr	r2, [pc, #196]	; (8007414 <HAL_TIM_PWM_Start+0x1f4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d004      	beq.n	800735e <HAL_TIM_PWM_Start+0x13e>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a2f      	ldr	r2, [pc, #188]	; (8007418 <HAL_TIM_PWM_Start+0x1f8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d101      	bne.n	8007362 <HAL_TIM_PWM_Start+0x142>
 800735e:	2301      	movs	r3, #1
 8007360:	e000      	b.n	8007364 <HAL_TIM_PWM_Start+0x144>
 8007362:	2300      	movs	r3, #0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d007      	beq.n	8007378 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007376:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a22      	ldr	r2, [pc, #136]	; (8007408 <HAL_TIM_PWM_Start+0x1e8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d01d      	beq.n	80073be <HAL_TIM_PWM_Start+0x19e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738a:	d018      	beq.n	80073be <HAL_TIM_PWM_Start+0x19e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a22      	ldr	r2, [pc, #136]	; (800741c <HAL_TIM_PWM_Start+0x1fc>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d013      	beq.n	80073be <HAL_TIM_PWM_Start+0x19e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a21      	ldr	r2, [pc, #132]	; (8007420 <HAL_TIM_PWM_Start+0x200>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00e      	beq.n	80073be <HAL_TIM_PWM_Start+0x19e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a1f      	ldr	r2, [pc, #124]	; (8007424 <HAL_TIM_PWM_Start+0x204>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d009      	beq.n	80073be <HAL_TIM_PWM_Start+0x19e>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a17      	ldr	r2, [pc, #92]	; (800740c <HAL_TIM_PWM_Start+0x1ec>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d004      	beq.n	80073be <HAL_TIM_PWM_Start+0x19e>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a15      	ldr	r2, [pc, #84]	; (8007410 <HAL_TIM_PWM_Start+0x1f0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d115      	bne.n	80073ea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	4b18      	ldr	r3, [pc, #96]	; (8007428 <HAL_TIM_PWM_Start+0x208>)
 80073c6:	4013      	ands	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b06      	cmp	r3, #6
 80073ce:	d015      	beq.n	80073fc <HAL_TIM_PWM_Start+0x1dc>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d6:	d011      	beq.n	80073fc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0201 	orr.w	r2, r2, #1
 80073e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e8:	e008      	b.n	80073fc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0201 	orr.w	r2, r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	e000      	b.n	80073fe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40013400 	.word	0x40013400
 8007410:	40014000 	.word	0x40014000
 8007414:	40014400 	.word	0x40014400
 8007418:	40014800 	.word	0x40014800
 800741c:	40000400 	.word	0x40000400
 8007420:	40000800 	.word	0x40000800
 8007424:	40000c00 	.word	0x40000c00
 8007428:	00010007 	.word	0x00010007

0800742c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fe60 	bl	8008104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a3e      	ldr	r2, [pc, #248]	; (8007544 <HAL_TIM_PWM_Stop+0x118>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d013      	beq.n	8007476 <HAL_TIM_PWM_Stop+0x4a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a3d      	ldr	r2, [pc, #244]	; (8007548 <HAL_TIM_PWM_Stop+0x11c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00e      	beq.n	8007476 <HAL_TIM_PWM_Stop+0x4a>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a3b      	ldr	r2, [pc, #236]	; (800754c <HAL_TIM_PWM_Stop+0x120>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d009      	beq.n	8007476 <HAL_TIM_PWM_Stop+0x4a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a3a      	ldr	r2, [pc, #232]	; (8007550 <HAL_TIM_PWM_Stop+0x124>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d004      	beq.n	8007476 <HAL_TIM_PWM_Stop+0x4a>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a38      	ldr	r2, [pc, #224]	; (8007554 <HAL_TIM_PWM_Stop+0x128>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d101      	bne.n	800747a <HAL_TIM_PWM_Stop+0x4e>
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <HAL_TIM_PWM_Stop+0x50>
 800747a:	2300      	movs	r3, #0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d017      	beq.n	80074b0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	f241 1311 	movw	r3, #4369	; 0x1111
 800748a:	4013      	ands	r3, r2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10f      	bne.n	80074b0 <HAL_TIM_PWM_Stop+0x84>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6a1a      	ldr	r2, [r3, #32]
 8007496:	f240 4344 	movw	r3, #1092	; 0x444
 800749a:	4013      	ands	r3, r2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d107      	bne.n	80074b0 <HAL_TIM_PWM_Stop+0x84>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6a1a      	ldr	r2, [r3, #32]
 80074b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80074ba:	4013      	ands	r3, r2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10f      	bne.n	80074e0 <HAL_TIM_PWM_Stop+0xb4>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6a1a      	ldr	r2, [r3, #32]
 80074c6:	f240 4344 	movw	r3, #1092	; 0x444
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d107      	bne.n	80074e0 <HAL_TIM_PWM_Stop+0xb4>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 0201 	bic.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d104      	bne.n	80074f0 <HAL_TIM_PWM_Stop+0xc4>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074ee:	e023      	b.n	8007538 <HAL_TIM_PWM_Stop+0x10c>
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d104      	bne.n	8007500 <HAL_TIM_PWM_Stop+0xd4>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074fe:	e01b      	b.n	8007538 <HAL_TIM_PWM_Stop+0x10c>
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b08      	cmp	r3, #8
 8007504:	d104      	bne.n	8007510 <HAL_TIM_PWM_Stop+0xe4>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800750e:	e013      	b.n	8007538 <HAL_TIM_PWM_Stop+0x10c>
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b0c      	cmp	r3, #12
 8007514:	d104      	bne.n	8007520 <HAL_TIM_PWM_Stop+0xf4>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800751e:	e00b      	b.n	8007538 <HAL_TIM_PWM_Stop+0x10c>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b10      	cmp	r3, #16
 8007524:	d104      	bne.n	8007530 <HAL_TIM_PWM_Stop+0x104>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800752e:	e003      	b.n	8007538 <HAL_TIM_PWM_Stop+0x10c>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	40012c00 	.word	0x40012c00
 8007548:	40013400 	.word	0x40013400
 800754c:	40014000 	.word	0x40014000
 8007550:	40014400 	.word	0x40014400
 8007554:	40014800 	.word	0x40014800

08007558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	2b02      	cmp	r3, #2
 800756c:	d122      	bne.n	80075b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b02      	cmp	r3, #2
 800757a:	d11b      	bne.n	80075b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f06f 0202 	mvn.w	r2, #2
 8007584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fa24 	bl	80079e8 <HAL_TIM_IC_CaptureCallback>
 80075a0:	e005      	b.n	80075ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa16 	bl	80079d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fa27 	bl	80079fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d122      	bne.n	8007608 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d11b      	bne.n	8007608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0204 	mvn.w	r2, #4
 80075d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2202      	movs	r2, #2
 80075de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f9fa 	bl	80079e8 <HAL_TIM_IC_CaptureCallback>
 80075f4:	e005      	b.n	8007602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f9ec 	bl	80079d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f9fd 	bl	80079fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b08      	cmp	r3, #8
 8007614:	d122      	bne.n	800765c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f003 0308 	and.w	r3, r3, #8
 8007620:	2b08      	cmp	r3, #8
 8007622:	d11b      	bne.n	800765c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f06f 0208 	mvn.w	r2, #8
 800762c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2204      	movs	r2, #4
 8007632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f9d0 	bl	80079e8 <HAL_TIM_IC_CaptureCallback>
 8007648:	e005      	b.n	8007656 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f9c2 	bl	80079d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f9d3 	bl	80079fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f003 0310 	and.w	r3, r3, #16
 8007666:	2b10      	cmp	r3, #16
 8007668:	d122      	bne.n	80076b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b10      	cmp	r3, #16
 8007676:	d11b      	bne.n	80076b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f06f 0210 	mvn.w	r2, #16
 8007680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2208      	movs	r2, #8
 8007686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f9a6 	bl	80079e8 <HAL_TIM_IC_CaptureCallback>
 800769c:	e005      	b.n	80076aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f998 	bl	80079d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f9a9 	bl	80079fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d10e      	bne.n	80076dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d107      	bne.n	80076dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f06f 0201 	mvn.w	r2, #1
 80076d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f972 	bl	80079c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e6:	2b80      	cmp	r3, #128	; 0x80
 80076e8:	d10e      	bne.n	8007708 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f4:	2b80      	cmp	r3, #128	; 0x80
 80076f6:	d107      	bne.n	8007708 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fdb6 	bl	8008274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007716:	d10e      	bne.n	8007736 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007722:	2b80      	cmp	r3, #128	; 0x80
 8007724:	d107      	bne.n	8007736 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800772e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fda9 	bl	8008288 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007740:	2b40      	cmp	r3, #64	; 0x40
 8007742:	d10e      	bne.n	8007762 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774e:	2b40      	cmp	r3, #64	; 0x40
 8007750:	d107      	bne.n	8007762 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800775a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f957 	bl	8007a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b20      	cmp	r3, #32
 800776e:	d10e      	bne.n	800778e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b20      	cmp	r3, #32
 800777c:	d107      	bne.n	800778e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f06f 0220 	mvn.w	r2, #32
 8007786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fd69 	bl	8008260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800778e:	bf00      	nop
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e0ff      	b.n	80079b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b14      	cmp	r3, #20
 80077c2:	f200 80f0 	bhi.w	80079a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80077c6:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	08007821 	.word	0x08007821
 80077d0:	080079a7 	.word	0x080079a7
 80077d4:	080079a7 	.word	0x080079a7
 80077d8:	080079a7 	.word	0x080079a7
 80077dc:	08007861 	.word	0x08007861
 80077e0:	080079a7 	.word	0x080079a7
 80077e4:	080079a7 	.word	0x080079a7
 80077e8:	080079a7 	.word	0x080079a7
 80077ec:	080078a3 	.word	0x080078a3
 80077f0:	080079a7 	.word	0x080079a7
 80077f4:	080079a7 	.word	0x080079a7
 80077f8:	080079a7 	.word	0x080079a7
 80077fc:	080078e3 	.word	0x080078e3
 8007800:	080079a7 	.word	0x080079a7
 8007804:	080079a7 	.word	0x080079a7
 8007808:	080079a7 	.word	0x080079a7
 800780c:	08007925 	.word	0x08007925
 8007810:	080079a7 	.word	0x080079a7
 8007814:	080079a7 	.word	0x080079a7
 8007818:	080079a7 	.word	0x080079a7
 800781c:	08007965 	.word	0x08007965
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 f996 	bl	8007b58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0208 	orr.w	r2, r2, #8
 800783a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0204 	bic.w	r2, r2, #4
 800784a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6999      	ldr	r1, [r3, #24]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	691a      	ldr	r2, [r3, #16]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	619a      	str	r2, [r3, #24]
      break;
 800785e:	e0a5      	b.n	80079ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68b9      	ldr	r1, [r7, #8]
 8007866:	4618      	mov	r0, r3
 8007868:	f000 fa06 	bl	8007c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800787a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800788a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6999      	ldr	r1, [r3, #24]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	021a      	lsls	r2, r3, #8
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	619a      	str	r2, [r3, #24]
      break;
 80078a0:	e084      	b.n	80079ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fa6f 	bl	8007d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0208 	orr.w	r2, r2, #8
 80078bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0204 	bic.w	r2, r2, #4
 80078cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69d9      	ldr	r1, [r3, #28]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	61da      	str	r2, [r3, #28]
      break;
 80078e0:	e064      	b.n	80079ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68b9      	ldr	r1, [r7, #8]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 fad7 	bl	8007e9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	69da      	ldr	r2, [r3, #28]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800790c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69d9      	ldr	r1, [r3, #28]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	021a      	lsls	r2, r3, #8
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	61da      	str	r2, [r3, #28]
      break;
 8007922:	e043      	b.n	80079ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68b9      	ldr	r1, [r7, #8]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fb20 	bl	8007f70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0208 	orr.w	r2, r2, #8
 800793e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0204 	bic.w	r2, r2, #4
 800794e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	691a      	ldr	r2, [r3, #16]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007962:	e023      	b.n	80079ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68b9      	ldr	r1, [r7, #8]
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fb64 	bl	8008038 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800797e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800798e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	021a      	lsls	r2, r3, #8
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80079a4:	e002      	b.n	80079ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	75fb      	strb	r3, [r7, #23]
      break;
 80079aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop

080079c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a40      	ldr	r2, [pc, #256]	; (8007b38 <TIM_Base_SetConfig+0x114>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d013      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a42:	d00f      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a3d      	ldr	r2, [pc, #244]	; (8007b3c <TIM_Base_SetConfig+0x118>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00b      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a3c      	ldr	r2, [pc, #240]	; (8007b40 <TIM_Base_SetConfig+0x11c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d007      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a3b      	ldr	r2, [pc, #236]	; (8007b44 <TIM_Base_SetConfig+0x120>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d003      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a3a      	ldr	r2, [pc, #232]	; (8007b48 <TIM_Base_SetConfig+0x124>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d108      	bne.n	8007a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a2f      	ldr	r2, [pc, #188]	; (8007b38 <TIM_Base_SetConfig+0x114>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d01f      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a84:	d01b      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a2c      	ldr	r2, [pc, #176]	; (8007b3c <TIM_Base_SetConfig+0x118>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d017      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a2b      	ldr	r2, [pc, #172]	; (8007b40 <TIM_Base_SetConfig+0x11c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d013      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a2a      	ldr	r2, [pc, #168]	; (8007b44 <TIM_Base_SetConfig+0x120>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00f      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a29      	ldr	r2, [pc, #164]	; (8007b48 <TIM_Base_SetConfig+0x124>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00b      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a28      	ldr	r2, [pc, #160]	; (8007b4c <TIM_Base_SetConfig+0x128>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d007      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a27      	ldr	r2, [pc, #156]	; (8007b50 <TIM_Base_SetConfig+0x12c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d003      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a26      	ldr	r2, [pc, #152]	; (8007b54 <TIM_Base_SetConfig+0x130>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d108      	bne.n	8007ad0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a10      	ldr	r2, [pc, #64]	; (8007b38 <TIM_Base_SetConfig+0x114>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00f      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a12      	ldr	r2, [pc, #72]	; (8007b48 <TIM_Base_SetConfig+0x124>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d00b      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a11      	ldr	r2, [pc, #68]	; (8007b4c <TIM_Base_SetConfig+0x128>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d007      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a10      	ldr	r2, [pc, #64]	; (8007b50 <TIM_Base_SetConfig+0x12c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a0f      	ldr	r2, [pc, #60]	; (8007b54 <TIM_Base_SetConfig+0x130>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d103      	bne.n	8007b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	691a      	ldr	r2, [r3, #16]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	615a      	str	r2, [r3, #20]
}
 8007b2a:	bf00      	nop
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40012c00 	.word	0x40012c00
 8007b3c:	40000400 	.word	0x40000400
 8007b40:	40000800 	.word	0x40000800
 8007b44:	40000c00 	.word	0x40000c00
 8007b48:	40013400 	.word	0x40013400
 8007b4c:	40014000 	.word	0x40014000
 8007b50:	40014400 	.word	0x40014400
 8007b54:	40014800 	.word	0x40014800

08007b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	f023 0201 	bic.w	r2, r3, #1
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f023 0302 	bic.w	r3, r3, #2
 8007ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a2c      	ldr	r2, [pc, #176]	; (8007c64 <TIM_OC1_SetConfig+0x10c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d00f      	beq.n	8007bd8 <TIM_OC1_SetConfig+0x80>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a2b      	ldr	r2, [pc, #172]	; (8007c68 <TIM_OC1_SetConfig+0x110>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00b      	beq.n	8007bd8 <TIM_OC1_SetConfig+0x80>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a2a      	ldr	r2, [pc, #168]	; (8007c6c <TIM_OC1_SetConfig+0x114>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d007      	beq.n	8007bd8 <TIM_OC1_SetConfig+0x80>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a29      	ldr	r2, [pc, #164]	; (8007c70 <TIM_OC1_SetConfig+0x118>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d003      	beq.n	8007bd8 <TIM_OC1_SetConfig+0x80>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a28      	ldr	r2, [pc, #160]	; (8007c74 <TIM_OC1_SetConfig+0x11c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d10c      	bne.n	8007bf2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f023 0308 	bic.w	r3, r3, #8
 8007bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f023 0304 	bic.w	r3, r3, #4
 8007bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a1b      	ldr	r2, [pc, #108]	; (8007c64 <TIM_OC1_SetConfig+0x10c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00f      	beq.n	8007c1a <TIM_OC1_SetConfig+0xc2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a1a      	ldr	r2, [pc, #104]	; (8007c68 <TIM_OC1_SetConfig+0x110>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00b      	beq.n	8007c1a <TIM_OC1_SetConfig+0xc2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a19      	ldr	r2, [pc, #100]	; (8007c6c <TIM_OC1_SetConfig+0x114>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d007      	beq.n	8007c1a <TIM_OC1_SetConfig+0xc2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a18      	ldr	r2, [pc, #96]	; (8007c70 <TIM_OC1_SetConfig+0x118>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d003      	beq.n	8007c1a <TIM_OC1_SetConfig+0xc2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a17      	ldr	r2, [pc, #92]	; (8007c74 <TIM_OC1_SetConfig+0x11c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d111      	bne.n	8007c3e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	621a      	str	r2, [r3, #32]
}
 8007c58:	bf00      	nop
 8007c5a:	371c      	adds	r7, #28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	40012c00 	.word	0x40012c00
 8007c68:	40013400 	.word	0x40013400
 8007c6c:	40014000 	.word	0x40014000
 8007c70:	40014400 	.word	0x40014400
 8007c74:	40014800 	.word	0x40014800

08007c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	f023 0210 	bic.w	r2, r3, #16
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	021b      	lsls	r3, r3, #8
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f023 0320 	bic.w	r3, r3, #32
 8007cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a28      	ldr	r2, [pc, #160]	; (8007d78 <TIM_OC2_SetConfig+0x100>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d003      	beq.n	8007ce4 <TIM_OC2_SetConfig+0x6c>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a27      	ldr	r2, [pc, #156]	; (8007d7c <TIM_OC2_SetConfig+0x104>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d10d      	bne.n	8007d00 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	011b      	lsls	r3, r3, #4
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a1d      	ldr	r2, [pc, #116]	; (8007d78 <TIM_OC2_SetConfig+0x100>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00f      	beq.n	8007d28 <TIM_OC2_SetConfig+0xb0>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <TIM_OC2_SetConfig+0x104>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00b      	beq.n	8007d28 <TIM_OC2_SetConfig+0xb0>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a1b      	ldr	r2, [pc, #108]	; (8007d80 <TIM_OC2_SetConfig+0x108>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d007      	beq.n	8007d28 <TIM_OC2_SetConfig+0xb0>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a1a      	ldr	r2, [pc, #104]	; (8007d84 <TIM_OC2_SetConfig+0x10c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <TIM_OC2_SetConfig+0xb0>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a19      	ldr	r2, [pc, #100]	; (8007d88 <TIM_OC2_SetConfig+0x110>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d113      	bne.n	8007d50 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	621a      	str	r2, [r3, #32]
}
 8007d6a:	bf00      	nop
 8007d6c:	371c      	adds	r7, #28
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40012c00 	.word	0x40012c00
 8007d7c:	40013400 	.word	0x40013400
 8007d80:	40014000 	.word	0x40014000
 8007d84:	40014400 	.word	0x40014400
 8007d88:	40014800 	.word	0x40014800

08007d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0303 	bic.w	r3, r3, #3
 8007dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	021b      	lsls	r3, r3, #8
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a27      	ldr	r2, [pc, #156]	; (8007e88 <TIM_OC3_SetConfig+0xfc>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d003      	beq.n	8007df6 <TIM_OC3_SetConfig+0x6a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a26      	ldr	r2, [pc, #152]	; (8007e8c <TIM_OC3_SetConfig+0x100>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d10d      	bne.n	8007e12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	021b      	lsls	r3, r3, #8
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a1c      	ldr	r2, [pc, #112]	; (8007e88 <TIM_OC3_SetConfig+0xfc>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00f      	beq.n	8007e3a <TIM_OC3_SetConfig+0xae>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a1b      	ldr	r2, [pc, #108]	; (8007e8c <TIM_OC3_SetConfig+0x100>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00b      	beq.n	8007e3a <TIM_OC3_SetConfig+0xae>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a1a      	ldr	r2, [pc, #104]	; (8007e90 <TIM_OC3_SetConfig+0x104>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d007      	beq.n	8007e3a <TIM_OC3_SetConfig+0xae>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a19      	ldr	r2, [pc, #100]	; (8007e94 <TIM_OC3_SetConfig+0x108>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d003      	beq.n	8007e3a <TIM_OC3_SetConfig+0xae>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a18      	ldr	r2, [pc, #96]	; (8007e98 <TIM_OC3_SetConfig+0x10c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d113      	bne.n	8007e62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	621a      	str	r2, [r3, #32]
}
 8007e7c:	bf00      	nop
 8007e7e:	371c      	adds	r7, #28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	40012c00 	.word	0x40012c00
 8007e8c:	40013400 	.word	0x40013400
 8007e90:	40014000 	.word	0x40014000
 8007e94:	40014400 	.word	0x40014400
 8007e98:	40014800 	.word	0x40014800

08007e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	031b      	lsls	r3, r3, #12
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a18      	ldr	r2, [pc, #96]	; (8007f5c <TIM_OC4_SetConfig+0xc0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00f      	beq.n	8007f20 <TIM_OC4_SetConfig+0x84>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a17      	ldr	r2, [pc, #92]	; (8007f60 <TIM_OC4_SetConfig+0xc4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00b      	beq.n	8007f20 <TIM_OC4_SetConfig+0x84>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a16      	ldr	r2, [pc, #88]	; (8007f64 <TIM_OC4_SetConfig+0xc8>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d007      	beq.n	8007f20 <TIM_OC4_SetConfig+0x84>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <TIM_OC4_SetConfig+0xcc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_OC4_SetConfig+0x84>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a14      	ldr	r2, [pc, #80]	; (8007f6c <TIM_OC4_SetConfig+0xd0>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d109      	bne.n	8007f34 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	019b      	lsls	r3, r3, #6
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	621a      	str	r2, [r3, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	371c      	adds	r7, #28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	40012c00 	.word	0x40012c00
 8007f60:	40013400 	.word	0x40013400
 8007f64:	40014000 	.word	0x40014000
 8007f68:	40014400 	.word	0x40014400
 8007f6c:	40014800 	.word	0x40014800

08007f70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	041b      	lsls	r3, r3, #16
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a17      	ldr	r2, [pc, #92]	; (8008024 <TIM_OC5_SetConfig+0xb4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d00f      	beq.n	8007fea <TIM_OC5_SetConfig+0x7a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a16      	ldr	r2, [pc, #88]	; (8008028 <TIM_OC5_SetConfig+0xb8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00b      	beq.n	8007fea <TIM_OC5_SetConfig+0x7a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a15      	ldr	r2, [pc, #84]	; (800802c <TIM_OC5_SetConfig+0xbc>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d007      	beq.n	8007fea <TIM_OC5_SetConfig+0x7a>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a14      	ldr	r2, [pc, #80]	; (8008030 <TIM_OC5_SetConfig+0xc0>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d003      	beq.n	8007fea <TIM_OC5_SetConfig+0x7a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a13      	ldr	r2, [pc, #76]	; (8008034 <TIM_OC5_SetConfig+0xc4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d109      	bne.n	8007ffe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	021b      	lsls	r3, r3, #8
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	621a      	str	r2, [r3, #32]
}
 8008018:	bf00      	nop
 800801a:	371c      	adds	r7, #28
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	40012c00 	.word	0x40012c00
 8008028:	40013400 	.word	0x40013400
 800802c:	40014000 	.word	0x40014000
 8008030:	40014400 	.word	0x40014400
 8008034:	40014800 	.word	0x40014800

08008038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800806a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	4313      	orrs	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800807e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	051b      	lsls	r3, r3, #20
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4313      	orrs	r3, r2
 800808a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a18      	ldr	r2, [pc, #96]	; (80080f0 <TIM_OC6_SetConfig+0xb8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00f      	beq.n	80080b4 <TIM_OC6_SetConfig+0x7c>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a17      	ldr	r2, [pc, #92]	; (80080f4 <TIM_OC6_SetConfig+0xbc>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00b      	beq.n	80080b4 <TIM_OC6_SetConfig+0x7c>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a16      	ldr	r2, [pc, #88]	; (80080f8 <TIM_OC6_SetConfig+0xc0>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d007      	beq.n	80080b4 <TIM_OC6_SetConfig+0x7c>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a15      	ldr	r2, [pc, #84]	; (80080fc <TIM_OC6_SetConfig+0xc4>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d003      	beq.n	80080b4 <TIM_OC6_SetConfig+0x7c>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a14      	ldr	r2, [pc, #80]	; (8008100 <TIM_OC6_SetConfig+0xc8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d109      	bne.n	80080c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	029b      	lsls	r3, r3, #10
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	621a      	str	r2, [r3, #32]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40012c00 	.word	0x40012c00
 80080f4:	40013400 	.word	0x40013400
 80080f8:	40014000 	.word	0x40014000
 80080fc:	40014400 	.word	0x40014400
 8008100:	40014800 	.word	0x40014800

08008104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f003 031f 	and.w	r3, r3, #31
 8008116:	2201      	movs	r2, #1
 8008118:	fa02 f303 	lsl.w	r3, r2, r3
 800811c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a1a      	ldr	r2, [r3, #32]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	43db      	mvns	r3, r3
 8008126:	401a      	ands	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a1a      	ldr	r2, [r3, #32]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f003 031f 	and.w	r3, r3, #31
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	fa01 f303 	lsl.w	r3, r1, r3
 800813c:	431a      	orrs	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	621a      	str	r2, [r3, #32]
}
 8008142:	bf00      	nop
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
	...

08008150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008160:	2b01      	cmp	r3, #1
 8008162:	d101      	bne.n	8008168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008164:	2302      	movs	r3, #2
 8008166:	e068      	b.n	800823a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a2e      	ldr	r2, [pc, #184]	; (8008248 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d004      	beq.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a2d      	ldr	r2, [pc, #180]	; (800824c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d108      	bne.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a1e      	ldr	r2, [pc, #120]	; (8008248 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d01d      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081da:	d018      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a1b      	ldr	r2, [pc, #108]	; (8008250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a1a      	ldr	r2, [pc, #104]	; (8008254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00e      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a18      	ldr	r2, [pc, #96]	; (8008258 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d009      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a13      	ldr	r2, [pc, #76]	; (800824c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d004      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a14      	ldr	r2, [pc, #80]	; (800825c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d10c      	bne.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4313      	orrs	r3, r2
 800821e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	40012c00 	.word	0x40012c00
 800824c:	40013400 	.word	0x40013400
 8008250:	40000400 	.word	0x40000400
 8008254:	40000800 	.word	0x40000800
 8008258:	40000c00 	.word	0x40000c00
 800825c:	40014000 	.word	0x40014000

08008260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e040      	b.n	8008330 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7fb fae0 	bl	8003884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2224      	movs	r2, #36	; 0x24
 80082c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0201 	bic.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f992 	bl	8008604 <UART_SetConfig>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e022      	b.n	8008330 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fc3e 	bl	8008b74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f042 0201 	orr.w	r2, r2, #1
 8008326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fcc5 	bl	8008cb8 <UART_CheckIdleState>
 800832e:	4603      	mov	r3, r0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	; 0x28
 800833c:	af02      	add	r7, sp, #8
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	4613      	mov	r3, r2
 8008346:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800834c:	2b20      	cmp	r3, #32
 800834e:	f040 8082 	bne.w	8008456 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <HAL_UART_Transmit+0x26>
 8008358:	88fb      	ldrh	r3, [r7, #6]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e07a      	b.n	8008458 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_UART_Transmit+0x38>
 800836c:	2302      	movs	r3, #2
 800836e:	e073      	b.n	8008458 <HAL_UART_Transmit+0x120>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2221      	movs	r2, #33	; 0x21
 8008384:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008386:	f7fb fc81 	bl	8003c8c <HAL_GetTick>
 800838a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	88fa      	ldrh	r2, [r7, #6]
 8008390:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	88fa      	ldrh	r2, [r7, #6]
 8008398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a4:	d108      	bne.n	80083b8 <HAL_UART_Transmit+0x80>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d104      	bne.n	80083b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	61bb      	str	r3, [r7, #24]
 80083b6:	e003      	b.n	80083c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083bc:	2300      	movs	r3, #0
 80083be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80083c8:	e02d      	b.n	8008426 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2200      	movs	r2, #0
 80083d2:	2180      	movs	r1, #128	; 0x80
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f000 fcb8 	bl	8008d4a <UART_WaitOnFlagUntilTimeout>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e039      	b.n	8008458 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10b      	bne.n	8008402 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	881a      	ldrh	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083f6:	b292      	uxth	r2, r2
 80083f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	3302      	adds	r3, #2
 80083fe:	61bb      	str	r3, [r7, #24]
 8008400:	e008      	b.n	8008414 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	781a      	ldrb	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	b292      	uxth	r2, r2
 800840c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	3301      	adds	r3, #1
 8008412:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800841a:	b29b      	uxth	r3, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	b29a      	uxth	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800842c:	b29b      	uxth	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1cb      	bne.n	80083ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2200      	movs	r2, #0
 800843a:	2140      	movs	r1, #64	; 0x40
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 fc84 	bl	8008d4a <UART_WaitOnFlagUntilTimeout>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e005      	b.n	8008458 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2220      	movs	r2, #32
 8008450:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	e000      	b.n	8008458 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008456:	2302      	movs	r3, #2
  }
}
 8008458:	4618      	mov	r0, r3
 800845a:	3720      	adds	r7, #32
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08a      	sub	sp, #40	; 0x28
 8008464:	af02      	add	r7, sp, #8
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	4613      	mov	r3, r2
 800846e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008474:	2b20      	cmp	r3, #32
 8008476:	f040 80bf 	bne.w	80085f8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <HAL_UART_Receive+0x26>
 8008480:	88fb      	ldrh	r3, [r7, #6]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e0b7      	b.n	80085fa <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008490:	2b01      	cmp	r3, #1
 8008492:	d101      	bne.n	8008498 <HAL_UART_Receive+0x38>
 8008494:	2302      	movs	r3, #2
 8008496:	e0b0      	b.n	80085fa <HAL_UART_Receive+0x19a>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2222      	movs	r2, #34	; 0x22
 80084ac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084b4:	f7fb fbea 	bl	8003c8c <HAL_GetTick>
 80084b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	88fa      	ldrh	r2, [r7, #6]
 80084be:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	88fa      	ldrh	r2, [r7, #6]
 80084c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d2:	d10e      	bne.n	80084f2 <HAL_UART_Receive+0x92>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d105      	bne.n	80084e8 <HAL_UART_Receive+0x88>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80084e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084e6:	e02d      	b.n	8008544 <HAL_UART_Receive+0xe4>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	22ff      	movs	r2, #255	; 0xff
 80084ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084f0:	e028      	b.n	8008544 <HAL_UART_Receive+0xe4>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10d      	bne.n	8008516 <HAL_UART_Receive+0xb6>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <HAL_UART_Receive+0xac>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	22ff      	movs	r2, #255	; 0xff
 8008506:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800850a:	e01b      	b.n	8008544 <HAL_UART_Receive+0xe4>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	227f      	movs	r2, #127	; 0x7f
 8008510:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008514:	e016      	b.n	8008544 <HAL_UART_Receive+0xe4>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800851e:	d10d      	bne.n	800853c <HAL_UART_Receive+0xdc>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d104      	bne.n	8008532 <HAL_UART_Receive+0xd2>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	227f      	movs	r2, #127	; 0x7f
 800852c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008530:	e008      	b.n	8008544 <HAL_UART_Receive+0xe4>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	223f      	movs	r2, #63	; 0x3f
 8008536:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800853a:	e003      	b.n	8008544 <HAL_UART_Receive+0xe4>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800854a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008554:	d108      	bne.n	8008568 <HAL_UART_Receive+0x108>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d104      	bne.n	8008568 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800855e:	2300      	movs	r3, #0
 8008560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	61bb      	str	r3, [r7, #24]
 8008566:	e003      	b.n	8008570 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800856c:	2300      	movs	r3, #0
 800856e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008578:	e033      	b.n	80085e2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	2200      	movs	r2, #0
 8008582:	2120      	movs	r1, #32
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 fbe0 	bl	8008d4a <UART_WaitOnFlagUntilTimeout>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e032      	b.n	80085fa <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10c      	bne.n	80085b4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	8a7b      	ldrh	r3, [r7, #18]
 80085a4:	4013      	ands	r3, r2
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	3302      	adds	r3, #2
 80085b0:	61bb      	str	r3, [r7, #24]
 80085b2:	e00d      	b.n	80085d0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	8a7b      	ldrh	r3, [r7, #18]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	4013      	ands	r3, r2
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	3301      	adds	r3, #1
 80085ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	3b01      	subs	r3, #1
 80085da:	b29a      	uxth	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1c5      	bne.n	800857a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2220      	movs	r2, #32
 80085f2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	e000      	b.n	80085fa <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80085f8:	2302      	movs	r3, #2
  }
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3720      	adds	r7, #32
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
	...

08008604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008608:	b08a      	sub	sp, #40	; 0x28
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	431a      	orrs	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	431a      	orrs	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	4313      	orrs	r3, r2
 800862a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	4ba4      	ldr	r3, [pc, #656]	; (80088c4 <UART_SetConfig+0x2c0>)
 8008634:	4013      	ands	r3, r2
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	6812      	ldr	r2, [r2, #0]
 800863a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800863c:	430b      	orrs	r3, r1
 800863e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a99      	ldr	r2, [pc, #612]	; (80088c8 <UART_SetConfig+0x2c4>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d004      	beq.n	8008670 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800866c:	4313      	orrs	r3, r2
 800866e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008680:	430a      	orrs	r2, r1
 8008682:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a90      	ldr	r2, [pc, #576]	; (80088cc <UART_SetConfig+0x2c8>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d126      	bne.n	80086dc <UART_SetConfig+0xd8>
 800868e:	4b90      	ldr	r3, [pc, #576]	; (80088d0 <UART_SetConfig+0x2cc>)
 8008690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	2b03      	cmp	r3, #3
 800869a:	d81b      	bhi.n	80086d4 <UART_SetConfig+0xd0>
 800869c:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <UART_SetConfig+0xa0>)
 800869e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a2:	bf00      	nop
 80086a4:	080086b5 	.word	0x080086b5
 80086a8:	080086c5 	.word	0x080086c5
 80086ac:	080086bd 	.word	0x080086bd
 80086b0:	080086cd 	.word	0x080086cd
 80086b4:	2301      	movs	r3, #1
 80086b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ba:	e116      	b.n	80088ea <UART_SetConfig+0x2e6>
 80086bc:	2302      	movs	r3, #2
 80086be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086c2:	e112      	b.n	80088ea <UART_SetConfig+0x2e6>
 80086c4:	2304      	movs	r3, #4
 80086c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ca:	e10e      	b.n	80088ea <UART_SetConfig+0x2e6>
 80086cc:	2308      	movs	r3, #8
 80086ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086d2:	e10a      	b.n	80088ea <UART_SetConfig+0x2e6>
 80086d4:	2310      	movs	r3, #16
 80086d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086da:	e106      	b.n	80088ea <UART_SetConfig+0x2e6>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a7c      	ldr	r2, [pc, #496]	; (80088d4 <UART_SetConfig+0x2d0>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d138      	bne.n	8008758 <UART_SetConfig+0x154>
 80086e6:	4b7a      	ldr	r3, [pc, #488]	; (80088d0 <UART_SetConfig+0x2cc>)
 80086e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ec:	f003 030c 	and.w	r3, r3, #12
 80086f0:	2b0c      	cmp	r3, #12
 80086f2:	d82d      	bhi.n	8008750 <UART_SetConfig+0x14c>
 80086f4:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <UART_SetConfig+0xf8>)
 80086f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fa:	bf00      	nop
 80086fc:	08008731 	.word	0x08008731
 8008700:	08008751 	.word	0x08008751
 8008704:	08008751 	.word	0x08008751
 8008708:	08008751 	.word	0x08008751
 800870c:	08008741 	.word	0x08008741
 8008710:	08008751 	.word	0x08008751
 8008714:	08008751 	.word	0x08008751
 8008718:	08008751 	.word	0x08008751
 800871c:	08008739 	.word	0x08008739
 8008720:	08008751 	.word	0x08008751
 8008724:	08008751 	.word	0x08008751
 8008728:	08008751 	.word	0x08008751
 800872c:	08008749 	.word	0x08008749
 8008730:	2300      	movs	r3, #0
 8008732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008736:	e0d8      	b.n	80088ea <UART_SetConfig+0x2e6>
 8008738:	2302      	movs	r3, #2
 800873a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800873e:	e0d4      	b.n	80088ea <UART_SetConfig+0x2e6>
 8008740:	2304      	movs	r3, #4
 8008742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008746:	e0d0      	b.n	80088ea <UART_SetConfig+0x2e6>
 8008748:	2308      	movs	r3, #8
 800874a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800874e:	e0cc      	b.n	80088ea <UART_SetConfig+0x2e6>
 8008750:	2310      	movs	r3, #16
 8008752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008756:	e0c8      	b.n	80088ea <UART_SetConfig+0x2e6>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a5e      	ldr	r2, [pc, #376]	; (80088d8 <UART_SetConfig+0x2d4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d125      	bne.n	80087ae <UART_SetConfig+0x1aa>
 8008762:	4b5b      	ldr	r3, [pc, #364]	; (80088d0 <UART_SetConfig+0x2cc>)
 8008764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008768:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800876c:	2b30      	cmp	r3, #48	; 0x30
 800876e:	d016      	beq.n	800879e <UART_SetConfig+0x19a>
 8008770:	2b30      	cmp	r3, #48	; 0x30
 8008772:	d818      	bhi.n	80087a6 <UART_SetConfig+0x1a2>
 8008774:	2b20      	cmp	r3, #32
 8008776:	d00a      	beq.n	800878e <UART_SetConfig+0x18a>
 8008778:	2b20      	cmp	r3, #32
 800877a:	d814      	bhi.n	80087a6 <UART_SetConfig+0x1a2>
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <UART_SetConfig+0x182>
 8008780:	2b10      	cmp	r3, #16
 8008782:	d008      	beq.n	8008796 <UART_SetConfig+0x192>
 8008784:	e00f      	b.n	80087a6 <UART_SetConfig+0x1a2>
 8008786:	2300      	movs	r3, #0
 8008788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800878c:	e0ad      	b.n	80088ea <UART_SetConfig+0x2e6>
 800878e:	2302      	movs	r3, #2
 8008790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008794:	e0a9      	b.n	80088ea <UART_SetConfig+0x2e6>
 8008796:	2304      	movs	r3, #4
 8008798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800879c:	e0a5      	b.n	80088ea <UART_SetConfig+0x2e6>
 800879e:	2308      	movs	r3, #8
 80087a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087a4:	e0a1      	b.n	80088ea <UART_SetConfig+0x2e6>
 80087a6:	2310      	movs	r3, #16
 80087a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ac:	e09d      	b.n	80088ea <UART_SetConfig+0x2e6>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a4a      	ldr	r2, [pc, #296]	; (80088dc <UART_SetConfig+0x2d8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d125      	bne.n	8008804 <UART_SetConfig+0x200>
 80087b8:	4b45      	ldr	r3, [pc, #276]	; (80088d0 <UART_SetConfig+0x2cc>)
 80087ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80087c2:	2bc0      	cmp	r3, #192	; 0xc0
 80087c4:	d016      	beq.n	80087f4 <UART_SetConfig+0x1f0>
 80087c6:	2bc0      	cmp	r3, #192	; 0xc0
 80087c8:	d818      	bhi.n	80087fc <UART_SetConfig+0x1f8>
 80087ca:	2b80      	cmp	r3, #128	; 0x80
 80087cc:	d00a      	beq.n	80087e4 <UART_SetConfig+0x1e0>
 80087ce:	2b80      	cmp	r3, #128	; 0x80
 80087d0:	d814      	bhi.n	80087fc <UART_SetConfig+0x1f8>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <UART_SetConfig+0x1d8>
 80087d6:	2b40      	cmp	r3, #64	; 0x40
 80087d8:	d008      	beq.n	80087ec <UART_SetConfig+0x1e8>
 80087da:	e00f      	b.n	80087fc <UART_SetConfig+0x1f8>
 80087dc:	2300      	movs	r3, #0
 80087de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e2:	e082      	b.n	80088ea <UART_SetConfig+0x2e6>
 80087e4:	2302      	movs	r3, #2
 80087e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ea:	e07e      	b.n	80088ea <UART_SetConfig+0x2e6>
 80087ec:	2304      	movs	r3, #4
 80087ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087f2:	e07a      	b.n	80088ea <UART_SetConfig+0x2e6>
 80087f4:	2308      	movs	r3, #8
 80087f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087fa:	e076      	b.n	80088ea <UART_SetConfig+0x2e6>
 80087fc:	2310      	movs	r3, #16
 80087fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008802:	e072      	b.n	80088ea <UART_SetConfig+0x2e6>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a35      	ldr	r2, [pc, #212]	; (80088e0 <UART_SetConfig+0x2dc>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d12a      	bne.n	8008864 <UART_SetConfig+0x260>
 800880e:	4b30      	ldr	r3, [pc, #192]	; (80088d0 <UART_SetConfig+0x2cc>)
 8008810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800881c:	d01a      	beq.n	8008854 <UART_SetConfig+0x250>
 800881e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008822:	d81b      	bhi.n	800885c <UART_SetConfig+0x258>
 8008824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008828:	d00c      	beq.n	8008844 <UART_SetConfig+0x240>
 800882a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800882e:	d815      	bhi.n	800885c <UART_SetConfig+0x258>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <UART_SetConfig+0x238>
 8008834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008838:	d008      	beq.n	800884c <UART_SetConfig+0x248>
 800883a:	e00f      	b.n	800885c <UART_SetConfig+0x258>
 800883c:	2300      	movs	r3, #0
 800883e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008842:	e052      	b.n	80088ea <UART_SetConfig+0x2e6>
 8008844:	2302      	movs	r3, #2
 8008846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800884a:	e04e      	b.n	80088ea <UART_SetConfig+0x2e6>
 800884c:	2304      	movs	r3, #4
 800884e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008852:	e04a      	b.n	80088ea <UART_SetConfig+0x2e6>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800885a:	e046      	b.n	80088ea <UART_SetConfig+0x2e6>
 800885c:	2310      	movs	r3, #16
 800885e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008862:	e042      	b.n	80088ea <UART_SetConfig+0x2e6>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <UART_SetConfig+0x2c4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d13a      	bne.n	80088e4 <UART_SetConfig+0x2e0>
 800886e:	4b18      	ldr	r3, [pc, #96]	; (80088d0 <UART_SetConfig+0x2cc>)
 8008870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008874:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008878:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800887c:	d01a      	beq.n	80088b4 <UART_SetConfig+0x2b0>
 800887e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008882:	d81b      	bhi.n	80088bc <UART_SetConfig+0x2b8>
 8008884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008888:	d00c      	beq.n	80088a4 <UART_SetConfig+0x2a0>
 800888a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800888e:	d815      	bhi.n	80088bc <UART_SetConfig+0x2b8>
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <UART_SetConfig+0x298>
 8008894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008898:	d008      	beq.n	80088ac <UART_SetConfig+0x2a8>
 800889a:	e00f      	b.n	80088bc <UART_SetConfig+0x2b8>
 800889c:	2300      	movs	r3, #0
 800889e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a2:	e022      	b.n	80088ea <UART_SetConfig+0x2e6>
 80088a4:	2302      	movs	r3, #2
 80088a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088aa:	e01e      	b.n	80088ea <UART_SetConfig+0x2e6>
 80088ac:	2304      	movs	r3, #4
 80088ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088b2:	e01a      	b.n	80088ea <UART_SetConfig+0x2e6>
 80088b4:	2308      	movs	r3, #8
 80088b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ba:	e016      	b.n	80088ea <UART_SetConfig+0x2e6>
 80088bc:	2310      	movs	r3, #16
 80088be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088c2:	e012      	b.n	80088ea <UART_SetConfig+0x2e6>
 80088c4:	efff69f3 	.word	0xefff69f3
 80088c8:	40008000 	.word	0x40008000
 80088cc:	40013800 	.word	0x40013800
 80088d0:	40021000 	.word	0x40021000
 80088d4:	40004400 	.word	0x40004400
 80088d8:	40004800 	.word	0x40004800
 80088dc:	40004c00 	.word	0x40004c00
 80088e0:	40005000 	.word	0x40005000
 80088e4:	2310      	movs	r3, #16
 80088e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a9f      	ldr	r2, [pc, #636]	; (8008b6c <UART_SetConfig+0x568>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d17a      	bne.n	80089ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088f8:	2b08      	cmp	r3, #8
 80088fa:	d824      	bhi.n	8008946 <UART_SetConfig+0x342>
 80088fc:	a201      	add	r2, pc, #4	; (adr r2, 8008904 <UART_SetConfig+0x300>)
 80088fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008902:	bf00      	nop
 8008904:	08008929 	.word	0x08008929
 8008908:	08008947 	.word	0x08008947
 800890c:	08008931 	.word	0x08008931
 8008910:	08008947 	.word	0x08008947
 8008914:	08008937 	.word	0x08008937
 8008918:	08008947 	.word	0x08008947
 800891c:	08008947 	.word	0x08008947
 8008920:	08008947 	.word	0x08008947
 8008924:	0800893f 	.word	0x0800893f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008928:	f7fd f9da 	bl	8005ce0 <HAL_RCC_GetPCLK1Freq>
 800892c:	61f8      	str	r0, [r7, #28]
        break;
 800892e:	e010      	b.n	8008952 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008930:	4b8f      	ldr	r3, [pc, #572]	; (8008b70 <UART_SetConfig+0x56c>)
 8008932:	61fb      	str	r3, [r7, #28]
        break;
 8008934:	e00d      	b.n	8008952 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008936:	f7fd f93b 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 800893a:	61f8      	str	r0, [r7, #28]
        break;
 800893c:	e009      	b.n	8008952 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800893e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008942:	61fb      	str	r3, [r7, #28]
        break;
 8008944:	e005      	b.n	8008952 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008950:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 80fb 	beq.w	8008b50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	4413      	add	r3, r2
 8008964:	69fa      	ldr	r2, [r7, #28]
 8008966:	429a      	cmp	r2, r3
 8008968:	d305      	bcc.n	8008976 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008970:	69fa      	ldr	r2, [r7, #28]
 8008972:	429a      	cmp	r2, r3
 8008974:	d903      	bls.n	800897e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800897c:	e0e8      	b.n	8008b50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	2200      	movs	r2, #0
 8008982:	461c      	mov	r4, r3
 8008984:	4615      	mov	r5, r2
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	f04f 0300 	mov.w	r3, #0
 800898e:	022b      	lsls	r3, r5, #8
 8008990:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008994:	0222      	lsls	r2, r4, #8
 8008996:	68f9      	ldr	r1, [r7, #12]
 8008998:	6849      	ldr	r1, [r1, #4]
 800899a:	0849      	lsrs	r1, r1, #1
 800899c:	2000      	movs	r0, #0
 800899e:	4688      	mov	r8, r1
 80089a0:	4681      	mov	r9, r0
 80089a2:	eb12 0a08 	adds.w	sl, r2, r8
 80089a6:	eb43 0b09 	adc.w	fp, r3, r9
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	603b      	str	r3, [r7, #0]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b8:	4650      	mov	r0, sl
 80089ba:	4659      	mov	r1, fp
 80089bc:	f7f8 f904 	bl	8000bc8 <__aeabi_uldivmod>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4613      	mov	r3, r2
 80089c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089ce:	d308      	bcc.n	80089e2 <UART_SetConfig+0x3de>
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089d6:	d204      	bcs.n	80089e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	60da      	str	r2, [r3, #12]
 80089e0:	e0b6      	b.n	8008b50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80089e8:	e0b2      	b.n	8008b50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089f2:	d15e      	bne.n	8008ab2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80089f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d828      	bhi.n	8008a4e <UART_SetConfig+0x44a>
 80089fc:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <UART_SetConfig+0x400>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008a29 	.word	0x08008a29
 8008a08:	08008a31 	.word	0x08008a31
 8008a0c:	08008a39 	.word	0x08008a39
 8008a10:	08008a4f 	.word	0x08008a4f
 8008a14:	08008a3f 	.word	0x08008a3f
 8008a18:	08008a4f 	.word	0x08008a4f
 8008a1c:	08008a4f 	.word	0x08008a4f
 8008a20:	08008a4f 	.word	0x08008a4f
 8008a24:	08008a47 	.word	0x08008a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a28:	f7fd f95a 	bl	8005ce0 <HAL_RCC_GetPCLK1Freq>
 8008a2c:	61f8      	str	r0, [r7, #28]
        break;
 8008a2e:	e014      	b.n	8008a5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a30:	f7fd f96c 	bl	8005d0c <HAL_RCC_GetPCLK2Freq>
 8008a34:	61f8      	str	r0, [r7, #28]
        break;
 8008a36:	e010      	b.n	8008a5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a38:	4b4d      	ldr	r3, [pc, #308]	; (8008b70 <UART_SetConfig+0x56c>)
 8008a3a:	61fb      	str	r3, [r7, #28]
        break;
 8008a3c:	e00d      	b.n	8008a5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a3e:	f7fd f8b7 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8008a42:	61f8      	str	r0, [r7, #28]
        break;
 8008a44:	e009      	b.n	8008a5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a4a:	61fb      	str	r3, [r7, #28]
        break;
 8008a4c:	e005      	b.n	8008a5a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d077      	beq.n	8008b50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	005a      	lsls	r2, r3, #1
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	085b      	lsrs	r3, r3, #1
 8008a6a:	441a      	add	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	2b0f      	cmp	r3, #15
 8008a7a:	d916      	bls.n	8008aaa <UART_SetConfig+0x4a6>
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a82:	d212      	bcs.n	8008aaa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	f023 030f 	bic.w	r3, r3, #15
 8008a8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	085b      	lsrs	r3, r3, #1
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	f003 0307 	and.w	r3, r3, #7
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	8afb      	ldrh	r3, [r7, #22]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	8afa      	ldrh	r2, [r7, #22]
 8008aa6:	60da      	str	r2, [r3, #12]
 8008aa8:	e052      	b.n	8008b50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ab0:	e04e      	b.n	8008b50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ab6:	2b08      	cmp	r3, #8
 8008ab8:	d827      	bhi.n	8008b0a <UART_SetConfig+0x506>
 8008aba:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <UART_SetConfig+0x4bc>)
 8008abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac0:	08008ae5 	.word	0x08008ae5
 8008ac4:	08008aed 	.word	0x08008aed
 8008ac8:	08008af5 	.word	0x08008af5
 8008acc:	08008b0b 	.word	0x08008b0b
 8008ad0:	08008afb 	.word	0x08008afb
 8008ad4:	08008b0b 	.word	0x08008b0b
 8008ad8:	08008b0b 	.word	0x08008b0b
 8008adc:	08008b0b 	.word	0x08008b0b
 8008ae0:	08008b03 	.word	0x08008b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ae4:	f7fd f8fc 	bl	8005ce0 <HAL_RCC_GetPCLK1Freq>
 8008ae8:	61f8      	str	r0, [r7, #28]
        break;
 8008aea:	e014      	b.n	8008b16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aec:	f7fd f90e 	bl	8005d0c <HAL_RCC_GetPCLK2Freq>
 8008af0:	61f8      	str	r0, [r7, #28]
        break;
 8008af2:	e010      	b.n	8008b16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008af4:	4b1e      	ldr	r3, [pc, #120]	; (8008b70 <UART_SetConfig+0x56c>)
 8008af6:	61fb      	str	r3, [r7, #28]
        break;
 8008af8:	e00d      	b.n	8008b16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008afa:	f7fd f859 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8008afe:	61f8      	str	r0, [r7, #28]
        break;
 8008b00:	e009      	b.n	8008b16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b06:	61fb      	str	r3, [r7, #28]
        break;
 8008b08:	e005      	b.n	8008b16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b14:	bf00      	nop
    }

    if (pclk != 0U)
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d019      	beq.n	8008b50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	085a      	lsrs	r2, r3, #1
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	441a      	add	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	2b0f      	cmp	r3, #15
 8008b34:	d909      	bls.n	8008b4a <UART_SetConfig+0x546>
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b3c:	d205      	bcs.n	8008b4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	60da      	str	r2, [r3, #12]
 8008b48:	e002      	b.n	8008b50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008b5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3728      	adds	r7, #40	; 0x28
 8008b64:	46bd      	mov	sp, r7
 8008b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b6a:	bf00      	nop
 8008b6c:	40008000 	.word	0x40008000
 8008b70:	00f42400 	.word	0x00f42400

08008b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	f003 0310 	and.w	r3, r3, #16
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01a      	beq.n	8008c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c72:	d10a      	bne.n	8008c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	605a      	str	r2, [r3, #4]
  }
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cc8:	f7fa ffe0 	bl	8003c8c <HAL_GetTick>
 8008ccc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0308 	and.w	r3, r3, #8
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d10e      	bne.n	8008cfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f82d 	bl	8008d4a <UART_WaitOnFlagUntilTimeout>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e023      	b.n	8008d42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d10e      	bne.n	8008d26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f817 	bl	8008d4a <UART_WaitOnFlagUntilTimeout>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e00d      	b.n	8008d42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b09c      	sub	sp, #112	; 0x70
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	60f8      	str	r0, [r7, #12]
 8008d52:	60b9      	str	r1, [r7, #8]
 8008d54:	603b      	str	r3, [r7, #0]
 8008d56:	4613      	mov	r3, r2
 8008d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d5a:	e0a5      	b.n	8008ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d62:	f000 80a1 	beq.w	8008ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d66:	f7fa ff91 	bl	8003c8c <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d302      	bcc.n	8008d7c <UART_WaitOnFlagUntilTimeout+0x32>
 8008d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d13e      	bne.n	8008dfa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d84:	e853 3f00 	ldrex	r3, [r3]
 8008d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d90:	667b      	str	r3, [r7, #100]	; 0x64
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008da0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008da2:	e841 2300 	strex	r3, r2, [r1]
 8008da6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1e6      	bne.n	8008d7c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3308      	adds	r3, #8
 8008db4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db8:	e853 3f00 	ldrex	r3, [r3]
 8008dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc0:	f023 0301 	bic.w	r3, r3, #1
 8008dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3308      	adds	r3, #8
 8008dcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008dce:	64ba      	str	r2, [r7, #72]	; 0x48
 8008dd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dd6:	e841 2300 	strex	r3, r2, [r1]
 8008dda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1e5      	bne.n	8008dae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2220      	movs	r2, #32
 8008de6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2220      	movs	r2, #32
 8008dec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e067      	b.n	8008eca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0304 	and.w	r3, r3, #4
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d04f      	beq.n	8008ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	69db      	ldr	r3, [r3, #28]
 8008e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e16:	d147      	bne.n	8008ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e20:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e40:	637b      	str	r3, [r7, #52]	; 0x34
 8008e42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e48:	e841 2300 	strex	r3, r2, [r1]
 8008e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e6      	bne.n	8008e22 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3308      	adds	r3, #8
 8008e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	613b      	str	r3, [r7, #16]
   return(result);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f023 0301 	bic.w	r3, r3, #1
 8008e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3308      	adds	r3, #8
 8008e72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e74:	623a      	str	r2, [r7, #32]
 8008e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	69f9      	ldr	r1, [r7, #28]
 8008e7a:	6a3a      	ldr	r2, [r7, #32]
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e5      	bne.n	8008e54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2220      	movs	r2, #32
 8008e92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2220      	movs	r2, #32
 8008e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e010      	b.n	8008eca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	69da      	ldr	r2, [r3, #28]
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	bf0c      	ite	eq
 8008eb8:	2301      	moveq	r3, #1
 8008eba:	2300      	movne	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	f43f af4a 	beq.w	8008d5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3770      	adds	r7, #112	; 0x70
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008ed8:	4904      	ldr	r1, [pc, #16]	; (8008eec <MX_FATFS_Init+0x18>)
 8008eda:	4805      	ldr	r0, [pc, #20]	; (8008ef0 <MX_FATFS_Init+0x1c>)
 8008edc:	f003 f950 	bl	800c180 <FATFS_LinkDriver>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	4b03      	ldr	r3, [pc, #12]	; (8008ef4 <MX_FATFS_Init+0x20>)
 8008ee6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008ee8:	bf00      	nop
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	2000082c 	.word	0x2000082c
 8008ef0:	2000002c 	.word	0x2000002c
 8008ef4:	20000828 	.word	0x20000828

08008ef8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008efc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 f9d9 	bl	80092cc <USER_SPI_initialize>
 8008f1a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fab7 	bl	80094a4 <USER_SPI_status>
 8008f36:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60b9      	str	r1, [r7, #8]
 8008f48:	607a      	str	r2, [r7, #4]
 8008f4a:	603b      	str	r3, [r7, #0]
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008f50:	7bf8      	ldrb	r0, [r7, #15]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	68b9      	ldr	r1, [r7, #8]
 8008f58:	f000 faba 	bl	80094d0 <USER_SPI_read>
 8008f5c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]
 8008f72:	4603      	mov	r3, r0
 8008f74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8008f76:	7bf8      	ldrb	r0, [r7, #15]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	68b9      	ldr	r1, [r7, #8]
 8008f7e:	f000 fb0d 	bl	800959c <USER_SPI_write>
 8008f82:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	603a      	str	r2, [r7, #0]
 8008f96:	71fb      	strb	r3, [r7, #7]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8008f9c:	79b9      	ldrb	r1, [r7, #6]
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 fb76 	bl	8009694 <USER_SPI_ioctl>
 8008fa8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
	...

08008fb4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008fbc:	f7fa fe66 	bl	8003c8c <HAL_GetTick>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	4a04      	ldr	r2, [pc, #16]	; (8008fd4 <SPI_Timer_On+0x20>)
 8008fc4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8008fc6:	4a04      	ldr	r2, [pc, #16]	; (8008fd8 <SPI_Timer_On+0x24>)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6013      	str	r3, [r2, #0]
}
 8008fcc:	bf00      	nop
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	20000834 	.word	0x20000834
 8008fd8:	20000838 	.word	0x20000838

08008fdc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008fe0:	f7fa fe54 	bl	8003c8c <HAL_GetTick>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	4b06      	ldr	r3, [pc, #24]	; (8009000 <SPI_Timer_Status+0x24>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	1ad2      	subs	r2, r2, r3
 8008fec:	4b05      	ldr	r3, [pc, #20]	; (8009004 <SPI_Timer_Status+0x28>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	bf34      	ite	cc
 8008ff4:	2301      	movcc	r3, #1
 8008ff6:	2300      	movcs	r3, #0
 8008ff8:	b2db      	uxtb	r3, r3
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20000834 	.word	0x20000834
 8009004:	20000838 	.word	0x20000838

08009008 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af02      	add	r7, sp, #8
 800900e:	4603      	mov	r3, r0
 8009010:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009012:	f107 020f 	add.w	r2, r7, #15
 8009016:	1df9      	adds	r1, r7, #7
 8009018:	2332      	movs	r3, #50	; 0x32
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	2301      	movs	r3, #1
 800901e:	4804      	ldr	r0, [pc, #16]	; (8009030 <xchg_spi+0x28>)
 8009020:	f7fd fc49 	bl	80068b6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009024:	7bfb      	ldrb	r3, [r7, #15]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20000638 	.word	0x20000638

08009034 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009034:	b590      	push	{r4, r7, lr}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
 8009042:	e00a      	b.n	800905a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	18d4      	adds	r4, r2, r3
 800904a:	20ff      	movs	r0, #255	; 0xff
 800904c:	f7ff ffdc 	bl	8009008 <xchg_spi>
 8009050:	4603      	mov	r3, r0
 8009052:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3301      	adds	r3, #1
 8009058:	60fb      	str	r3, [r7, #12]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	429a      	cmp	r2, r3
 8009060:	d3f0      	bcc.n	8009044 <rcvr_spi_multi+0x10>
	}
}
 8009062:	bf00      	nop
 8009064:	bf00      	nop
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	bd90      	pop	{r4, r7, pc}

0800906c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8009076:	2300      	movs	r3, #0
 8009078:	60fb      	str	r3, [r7, #12]
 800907a:	e009      	b.n	8009090 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4413      	add	r3, r2
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	4618      	mov	r0, r3
 8009086:	f7ff ffbf 	bl	8009008 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3301      	adds	r3, #1
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d3f1      	bcc.n	800907c <xmit_spi_multi+0x10>
	}
}
 8009098:	bf00      	nop
 800909a:	bf00      	nop
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b086      	sub	sp, #24
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80090aa:	f7fa fdef 	bl	8003c8c <HAL_GetTick>
 80090ae:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80090b4:	20ff      	movs	r0, #255	; 0xff
 80090b6:	f7ff ffa7 	bl	8009008 <xchg_spi>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	2bff      	cmp	r3, #255	; 0xff
 80090c2:	d007      	beq.n	80090d4 <wait_ready+0x32>
 80090c4:	f7fa fde2 	bl	8003c8c <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d8ef      	bhi.n	80090b4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	2bff      	cmp	r3, #255	; 0xff
 80090d8:	bf0c      	ite	eq
 80090da:	2301      	moveq	r3, #1
 80090dc:	2300      	movne	r3, #0
 80090de:	b2db      	uxtb	r3, r3
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80090ec:	2201      	movs	r2, #1
 80090ee:	2140      	movs	r1, #64	; 0x40
 80090f0:	4803      	ldr	r0, [pc, #12]	; (8009100 <despiselect+0x18>)
 80090f2:	f7fb fb3f 	bl	8004774 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80090f6:	20ff      	movs	r0, #255	; 0xff
 80090f8:	f7ff ff86 	bl	8009008 <xchg_spi>

}
 80090fc:	bf00      	nop
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	48000400 	.word	0x48000400

08009104 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009108:	2200      	movs	r2, #0
 800910a:	2140      	movs	r1, #64	; 0x40
 800910c:	4809      	ldr	r0, [pc, #36]	; (8009134 <spiselect+0x30>)
 800910e:	f7fb fb31 	bl	8004774 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009112:	20ff      	movs	r0, #255	; 0xff
 8009114:	f7ff ff78 	bl	8009008 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009118:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800911c:	f7ff ffc1 	bl	80090a2 <wait_ready>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <spiselect+0x26>
 8009126:	2301      	movs	r3, #1
 8009128:	e002      	b.n	8009130 <spiselect+0x2c>

	despiselect();
 800912a:	f7ff ffdd 	bl	80090e8 <despiselect>
	return 0;	/* Timeout */
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	bd80      	pop	{r7, pc}
 8009134:	48000400 	.word	0x48000400

08009138 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009142:	20c8      	movs	r0, #200	; 0xc8
 8009144:	f7ff ff36 	bl	8008fb4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009148:	20ff      	movs	r0, #255	; 0xff
 800914a:	f7ff ff5d 	bl	8009008 <xchg_spi>
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2bff      	cmp	r3, #255	; 0xff
 8009156:	d104      	bne.n	8009162 <rcvr_datablock+0x2a>
 8009158:	f7ff ff40 	bl	8008fdc <SPI_Timer_Status>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1f2      	bne.n	8009148 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	2bfe      	cmp	r3, #254	; 0xfe
 8009166:	d001      	beq.n	800916c <rcvr_datablock+0x34>
 8009168:	2300      	movs	r3, #0
 800916a:	e00a      	b.n	8009182 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7ff ff60 	bl	8009034 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009174:	20ff      	movs	r0, #255	; 0xff
 8009176:	f7ff ff47 	bl	8009008 <xchg_spi>
 800917a:	20ff      	movs	r0, #255	; 0xff
 800917c:	f7ff ff44 	bl	8009008 <xchg_spi>

	return 1;						/* Function succeeded */
 8009180:	2301      	movs	r3, #1
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	460b      	mov	r3, r1
 8009194:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009196:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800919a:	f7ff ff82 	bl	80090a2 <wait_ready>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <xmit_datablock+0x1e>
 80091a4:	2300      	movs	r3, #0
 80091a6:	e01e      	b.n	80091e6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff ff2c 	bl	8009008 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	2bfd      	cmp	r3, #253	; 0xfd
 80091b4:	d016      	beq.n	80091e4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80091b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7ff ff56 	bl	800906c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80091c0:	20ff      	movs	r0, #255	; 0xff
 80091c2:	f7ff ff21 	bl	8009008 <xchg_spi>
 80091c6:	20ff      	movs	r0, #255	; 0xff
 80091c8:	f7ff ff1e 	bl	8009008 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80091cc:	20ff      	movs	r0, #255	; 0xff
 80091ce:	f7ff ff1b 	bl	8009008 <xchg_spi>
 80091d2:	4603      	mov	r3, r0
 80091d4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
 80091d8:	f003 031f 	and.w	r3, r3, #31
 80091dc:	2b05      	cmp	r3, #5
 80091de:	d001      	beq.n	80091e4 <xmit_datablock+0x5a>
 80091e0:	2300      	movs	r3, #0
 80091e2:	e000      	b.n	80091e6 <xmit_datablock+0x5c>
	}
	return 1;
 80091e4:	2301      	movs	r3, #1
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b084      	sub	sp, #16
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	4603      	mov	r3, r0
 80091f6:	6039      	str	r1, [r7, #0]
 80091f8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80091fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	da0e      	bge.n	8009220 <send_cmd+0x32>
		cmd &= 0x7F;
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009208:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800920a:	2100      	movs	r1, #0
 800920c:	2037      	movs	r0, #55	; 0x37
 800920e:	f7ff ffee 	bl	80091ee <send_cmd>
 8009212:	4603      	mov	r3, r0
 8009214:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009216:	7bbb      	ldrb	r3, [r7, #14]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d901      	bls.n	8009220 <send_cmd+0x32>
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	e051      	b.n	80092c4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009220:	79fb      	ldrb	r3, [r7, #7]
 8009222:	2b0c      	cmp	r3, #12
 8009224:	d008      	beq.n	8009238 <send_cmd+0x4a>
		despiselect();
 8009226:	f7ff ff5f 	bl	80090e8 <despiselect>
		if (!spiselect()) return 0xFF;
 800922a:	f7ff ff6b 	bl	8009104 <spiselect>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <send_cmd+0x4a>
 8009234:	23ff      	movs	r3, #255	; 0xff
 8009236:	e045      	b.n	80092c4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800923e:	b2db      	uxtb	r3, r3
 8009240:	4618      	mov	r0, r3
 8009242:	f7ff fee1 	bl	8009008 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	0e1b      	lsrs	r3, r3, #24
 800924a:	b2db      	uxtb	r3, r3
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff fedb 	bl	8009008 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	0c1b      	lsrs	r3, r3, #16
 8009256:	b2db      	uxtb	r3, r3
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff fed5 	bl	8009008 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	0a1b      	lsrs	r3, r3, #8
 8009262:	b2db      	uxtb	r3, r3
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff fecf 	bl	8009008 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff feca 	bl	8009008 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009274:	2301      	movs	r3, #1
 8009276:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009278:	79fb      	ldrb	r3, [r7, #7]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <send_cmd+0x94>
 800927e:	2395      	movs	r3, #149	; 0x95
 8009280:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	2b08      	cmp	r3, #8
 8009286:	d101      	bne.n	800928c <send_cmd+0x9e>
 8009288:	2387      	movs	r3, #135	; 0x87
 800928a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	4618      	mov	r0, r3
 8009290:	f7ff feba 	bl	8009008 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	2b0c      	cmp	r3, #12
 8009298:	d102      	bne.n	80092a0 <send_cmd+0xb2>
 800929a:	20ff      	movs	r0, #255	; 0xff
 800929c:	f7ff feb4 	bl	8009008 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80092a0:	230a      	movs	r3, #10
 80092a2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80092a4:	20ff      	movs	r0, #255	; 0xff
 80092a6:	f7ff feaf 	bl	8009008 <xchg_spi>
 80092aa:	4603      	mov	r3, r0
 80092ac:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80092ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	da05      	bge.n	80092c2 <send_cmd+0xd4>
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	73fb      	strb	r3, [r7, #15]
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1f0      	bne.n	80092a4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80092cc:	b590      	push	{r4, r7, lr}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d001      	beq.n	80092e0 <USER_SPI_initialize+0x14>
 80092dc:	2301      	movs	r3, #1
 80092de:	e0d6      	b.n	800948e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80092e0:	4b6d      	ldr	r3, [pc, #436]	; (8009498 <USER_SPI_initialize+0x1cc>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <USER_SPI_initialize+0x2a>
 80092ee:	4b6a      	ldr	r3, [pc, #424]	; (8009498 <USER_SPI_initialize+0x1cc>)
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	e0cb      	b.n	800948e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80092f6:	4b69      	ldr	r3, [pc, #420]	; (800949c <USER_SPI_initialize+0x1d0>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009300:	4b66      	ldr	r3, [pc, #408]	; (800949c <USER_SPI_initialize+0x1d0>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8009308:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800930a:	230a      	movs	r3, #10
 800930c:	73fb      	strb	r3, [r7, #15]
 800930e:	e005      	b.n	800931c <USER_SPI_initialize+0x50>
 8009310:	20ff      	movs	r0, #255	; 0xff
 8009312:	f7ff fe79 	bl	8009008 <xchg_spi>
 8009316:	7bfb      	ldrb	r3, [r7, #15]
 8009318:	3b01      	subs	r3, #1
 800931a:	73fb      	strb	r3, [r7, #15]
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1f6      	bne.n	8009310 <USER_SPI_initialize+0x44>

	ty = 0;
 8009322:	2300      	movs	r3, #0
 8009324:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009326:	2100      	movs	r1, #0
 8009328:	2000      	movs	r0, #0
 800932a:	f7ff ff60 	bl	80091ee <send_cmd>
 800932e:	4603      	mov	r3, r0
 8009330:	2b01      	cmp	r3, #1
 8009332:	f040 808b 	bne.w	800944c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800933a:	f7ff fe3b 	bl	8008fb4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800933e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009342:	2008      	movs	r0, #8
 8009344:	f7ff ff53 	bl	80091ee <send_cmd>
 8009348:	4603      	mov	r3, r0
 800934a:	2b01      	cmp	r3, #1
 800934c:	d151      	bne.n	80093f2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800934e:	2300      	movs	r3, #0
 8009350:	73fb      	strb	r3, [r7, #15]
 8009352:	e00d      	b.n	8009370 <USER_SPI_initialize+0xa4>
 8009354:	7bfc      	ldrb	r4, [r7, #15]
 8009356:	20ff      	movs	r0, #255	; 0xff
 8009358:	f7ff fe56 	bl	8009008 <xchg_spi>
 800935c:	4603      	mov	r3, r0
 800935e:	461a      	mov	r2, r3
 8009360:	f104 0310 	add.w	r3, r4, #16
 8009364:	443b      	add	r3, r7
 8009366:	f803 2c08 	strb.w	r2, [r3, #-8]
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	3301      	adds	r3, #1
 800936e:	73fb      	strb	r3, [r7, #15]
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	2b03      	cmp	r3, #3
 8009374:	d9ee      	bls.n	8009354 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009376:	7abb      	ldrb	r3, [r7, #10]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d167      	bne.n	800944c <USER_SPI_initialize+0x180>
 800937c:	7afb      	ldrb	r3, [r7, #11]
 800937e:	2baa      	cmp	r3, #170	; 0xaa
 8009380:	d164      	bne.n	800944c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8009382:	bf00      	nop
 8009384:	f7ff fe2a 	bl	8008fdc <SPI_Timer_Status>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <USER_SPI_initialize+0xd2>
 800938e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009392:	20a9      	movs	r0, #169	; 0xa9
 8009394:	f7ff ff2b 	bl	80091ee <send_cmd>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1f2      	bne.n	8009384 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800939e:	f7ff fe1d 	bl	8008fdc <SPI_Timer_Status>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d051      	beq.n	800944c <USER_SPI_initialize+0x180>
 80093a8:	2100      	movs	r1, #0
 80093aa:	203a      	movs	r0, #58	; 0x3a
 80093ac:	f7ff ff1f 	bl	80091ee <send_cmd>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d14a      	bne.n	800944c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]
 80093ba:	e00d      	b.n	80093d8 <USER_SPI_initialize+0x10c>
 80093bc:	7bfc      	ldrb	r4, [r7, #15]
 80093be:	20ff      	movs	r0, #255	; 0xff
 80093c0:	f7ff fe22 	bl	8009008 <xchg_spi>
 80093c4:	4603      	mov	r3, r0
 80093c6:	461a      	mov	r2, r3
 80093c8:	f104 0310 	add.w	r3, r4, #16
 80093cc:	443b      	add	r3, r7
 80093ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
 80093d4:	3301      	adds	r3, #1
 80093d6:	73fb      	strb	r3, [r7, #15]
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d9ee      	bls.n	80093bc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80093de:	7a3b      	ldrb	r3, [r7, #8]
 80093e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <USER_SPI_initialize+0x120>
 80093e8:	230c      	movs	r3, #12
 80093ea:	e000      	b.n	80093ee <USER_SPI_initialize+0x122>
 80093ec:	2304      	movs	r3, #4
 80093ee:	737b      	strb	r3, [r7, #13]
 80093f0:	e02c      	b.n	800944c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80093f2:	2100      	movs	r1, #0
 80093f4:	20a9      	movs	r0, #169	; 0xa9
 80093f6:	f7ff fefa 	bl	80091ee <send_cmd>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d804      	bhi.n	800940a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009400:	2302      	movs	r3, #2
 8009402:	737b      	strb	r3, [r7, #13]
 8009404:	23a9      	movs	r3, #169	; 0xa9
 8009406:	73bb      	strb	r3, [r7, #14]
 8009408:	e003      	b.n	8009412 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800940a:	2301      	movs	r3, #1
 800940c:	737b      	strb	r3, [r7, #13]
 800940e:	2301      	movs	r3, #1
 8009410:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009412:	bf00      	nop
 8009414:	f7ff fde2 	bl	8008fdc <SPI_Timer_Status>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d007      	beq.n	800942e <USER_SPI_initialize+0x162>
 800941e:	7bbb      	ldrb	r3, [r7, #14]
 8009420:	2100      	movs	r1, #0
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff fee3 	bl	80091ee <send_cmd>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1f2      	bne.n	8009414 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800942e:	f7ff fdd5 	bl	8008fdc <SPI_Timer_Status>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d007      	beq.n	8009448 <USER_SPI_initialize+0x17c>
 8009438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800943c:	2010      	movs	r0, #16
 800943e:	f7ff fed6 	bl	80091ee <send_cmd>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <USER_SPI_initialize+0x180>
				ty = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800944c:	4a14      	ldr	r2, [pc, #80]	; (80094a0 <USER_SPI_initialize+0x1d4>)
 800944e:	7b7b      	ldrb	r3, [r7, #13]
 8009450:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009452:	f7ff fe49 	bl	80090e8 <despiselect>

	if (ty) {			/* OK */
 8009456:	7b7b      	ldrb	r3, [r7, #13]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d012      	beq.n	8009482 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800945c:	4b0f      	ldr	r3, [pc, #60]	; (800949c <USER_SPI_initialize+0x1d0>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009466:	4b0d      	ldr	r3, [pc, #52]	; (800949c <USER_SPI_initialize+0x1d0>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0210 	orr.w	r2, r2, #16
 800946e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009470:	4b09      	ldr	r3, [pc, #36]	; (8009498 <USER_SPI_initialize+0x1cc>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	b2db      	uxtb	r3, r3
 8009476:	f023 0301 	bic.w	r3, r3, #1
 800947a:	b2da      	uxtb	r2, r3
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <USER_SPI_initialize+0x1cc>)
 800947e:	701a      	strb	r2, [r3, #0]
 8009480:	e002      	b.n	8009488 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009482:	4b05      	ldr	r3, [pc, #20]	; (8009498 <USER_SPI_initialize+0x1cc>)
 8009484:	2201      	movs	r2, #1
 8009486:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009488:	4b03      	ldr	r3, [pc, #12]	; (8009498 <USER_SPI_initialize+0x1cc>)
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	b2db      	uxtb	r3, r3
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	bd90      	pop	{r4, r7, pc}
 8009496:	bf00      	nop
 8009498:	20000040 	.word	0x20000040
 800949c:	20000638 	.word	0x20000638
 80094a0:	20000830 	.word	0x20000830

080094a4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <USER_SPI_status+0x14>
 80094b4:	2301      	movs	r3, #1
 80094b6:	e002      	b.n	80094be <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80094b8:	4b04      	ldr	r3, [pc, #16]	; (80094cc <USER_SPI_status+0x28>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	b2db      	uxtb	r3, r3
}
 80094be:	4618      	mov	r0, r3
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	20000040 	.word	0x20000040

080094d0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
 80094da:	603b      	str	r3, [r7, #0]
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d102      	bne.n	80094ec <USER_SPI_read+0x1c>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <USER_SPI_read+0x20>
 80094ec:	2304      	movs	r3, #4
 80094ee:	e04d      	b.n	800958c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80094f0:	4b28      	ldr	r3, [pc, #160]	; (8009594 <USER_SPI_read+0xc4>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <USER_SPI_read+0x32>
 80094fe:	2303      	movs	r3, #3
 8009500:	e044      	b.n	800958c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009502:	4b25      	ldr	r3, [pc, #148]	; (8009598 <USER_SPI_read+0xc8>)
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	f003 0308 	and.w	r3, r3, #8
 800950a:	2b00      	cmp	r3, #0
 800950c:	d102      	bne.n	8009514 <USER_SPI_read+0x44>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	025b      	lsls	r3, r3, #9
 8009512:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d111      	bne.n	800953e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800951a:	6879      	ldr	r1, [r7, #4]
 800951c:	2011      	movs	r0, #17
 800951e:	f7ff fe66 	bl	80091ee <send_cmd>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d129      	bne.n	800957c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800952c:	68b8      	ldr	r0, [r7, #8]
 800952e:	f7ff fe03 	bl	8009138 <rcvr_datablock>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d021      	beq.n	800957c <USER_SPI_read+0xac>
			count = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	e01e      	b.n	800957c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800953e:	6879      	ldr	r1, [r7, #4]
 8009540:	2012      	movs	r0, #18
 8009542:	f7ff fe54 	bl	80091ee <send_cmd>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d117      	bne.n	800957c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800954c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009550:	68b8      	ldr	r0, [r7, #8]
 8009552:	f7ff fdf1 	bl	8009138 <rcvr_datablock>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00a      	beq.n	8009572 <USER_SPI_read+0xa2>
				buff += 512;
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009562:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	3b01      	subs	r3, #1
 8009568:	603b      	str	r3, [r7, #0]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1ed      	bne.n	800954c <USER_SPI_read+0x7c>
 8009570:	e000      	b.n	8009574 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009572:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009574:	2100      	movs	r1, #0
 8009576:	200c      	movs	r0, #12
 8009578:	f7ff fe39 	bl	80091ee <send_cmd>
		}
	}
	despiselect();
 800957c:	f7ff fdb4 	bl	80090e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	bf14      	ite	ne
 8009586:	2301      	movne	r3, #1
 8009588:	2300      	moveq	r3, #0
 800958a:	b2db      	uxtb	r3, r3
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20000040 	.word	0x20000040
 8009598:	20000830 	.word	0x20000830

0800959c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	607a      	str	r2, [r7, #4]
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	4603      	mov	r3, r0
 80095aa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d102      	bne.n	80095b8 <USER_SPI_write+0x1c>
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <USER_SPI_write+0x20>
 80095b8:	2304      	movs	r3, #4
 80095ba:	e063      	b.n	8009684 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80095bc:	4b33      	ldr	r3, [pc, #204]	; (800968c <USER_SPI_write+0xf0>)
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <USER_SPI_write+0x32>
 80095ca:	2303      	movs	r3, #3
 80095cc:	e05a      	b.n	8009684 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80095ce:	4b2f      	ldr	r3, [pc, #188]	; (800968c <USER_SPI_write+0xf0>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	f003 0304 	and.w	r3, r3, #4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <USER_SPI_write+0x44>
 80095dc:	2302      	movs	r3, #2
 80095de:	e051      	b.n	8009684 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80095e0:	4b2b      	ldr	r3, [pc, #172]	; (8009690 <USER_SPI_write+0xf4>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	f003 0308 	and.w	r3, r3, #8
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d102      	bne.n	80095f2 <USER_SPI_write+0x56>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	025b      	lsls	r3, r3, #9
 80095f0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d110      	bne.n	800961a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	2018      	movs	r0, #24
 80095fc:	f7ff fdf7 	bl	80091ee <send_cmd>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d136      	bne.n	8009674 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009606:	21fe      	movs	r1, #254	; 0xfe
 8009608:	68b8      	ldr	r0, [r7, #8]
 800960a:	f7ff fdbe 	bl	800918a <xmit_datablock>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d02f      	beq.n	8009674 <USER_SPI_write+0xd8>
			count = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	603b      	str	r3, [r7, #0]
 8009618:	e02c      	b.n	8009674 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800961a:	4b1d      	ldr	r3, [pc, #116]	; (8009690 <USER_SPI_write+0xf4>)
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	f003 0306 	and.w	r3, r3, #6
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <USER_SPI_write+0x92>
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	2097      	movs	r0, #151	; 0x97
 800962a:	f7ff fde0 	bl	80091ee <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	2019      	movs	r0, #25
 8009632:	f7ff fddc 	bl	80091ee <send_cmd>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d11b      	bne.n	8009674 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800963c:	21fc      	movs	r1, #252	; 0xfc
 800963e:	68b8      	ldr	r0, [r7, #8]
 8009640:	f7ff fda3 	bl	800918a <xmit_datablock>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00a      	beq.n	8009660 <USER_SPI_write+0xc4>
				buff += 512;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009650:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	3b01      	subs	r3, #1
 8009656:	603b      	str	r3, [r7, #0]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1ee      	bne.n	800963c <USER_SPI_write+0xa0>
 800965e:	e000      	b.n	8009662 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009660:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009662:	21fd      	movs	r1, #253	; 0xfd
 8009664:	2000      	movs	r0, #0
 8009666:	f7ff fd90 	bl	800918a <xmit_datablock>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <USER_SPI_write+0xd8>
 8009670:	2301      	movs	r3, #1
 8009672:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009674:	f7ff fd38 	bl	80090e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	bf14      	ite	ne
 800967e:	2301      	movne	r3, #1
 8009680:	2300      	moveq	r3, #0
 8009682:	b2db      	uxtb	r3, r3
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20000040 	.word	0x20000040
 8009690:	20000830 	.word	0x20000830

08009694 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08c      	sub	sp, #48	; 0x30
 8009698:	af00      	add	r7, sp, #0
 800969a:	4603      	mov	r3, r0
 800969c:	603a      	str	r2, [r7, #0]
 800969e:	71fb      	strb	r3, [r7, #7]
 80096a0:	460b      	mov	r3, r1
 80096a2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <USER_SPI_ioctl+0x1a>
 80096aa:	2304      	movs	r3, #4
 80096ac:	e15a      	b.n	8009964 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80096ae:	4baf      	ldr	r3, [pc, #700]	; (800996c <USER_SPI_ioctl+0x2d8>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <USER_SPI_ioctl+0x2c>
 80096bc:	2303      	movs	r3, #3
 80096be:	e151      	b.n	8009964 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80096c6:	79bb      	ldrb	r3, [r7, #6]
 80096c8:	2b04      	cmp	r3, #4
 80096ca:	f200 8136 	bhi.w	800993a <USER_SPI_ioctl+0x2a6>
 80096ce:	a201      	add	r2, pc, #4	; (adr r2, 80096d4 <USER_SPI_ioctl+0x40>)
 80096d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d4:	080096e9 	.word	0x080096e9
 80096d8:	080096fd 	.word	0x080096fd
 80096dc:	0800993b 	.word	0x0800993b
 80096e0:	080097a9 	.word	0x080097a9
 80096e4:	0800989f 	.word	0x0800989f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80096e8:	f7ff fd0c 	bl	8009104 <spiselect>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 8127 	beq.w	8009942 <USER_SPI_ioctl+0x2ae>
 80096f4:	2300      	movs	r3, #0
 80096f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80096fa:	e122      	b.n	8009942 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80096fc:	2100      	movs	r1, #0
 80096fe:	2009      	movs	r0, #9
 8009700:	f7ff fd75 	bl	80091ee <send_cmd>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	f040 811d 	bne.w	8009946 <USER_SPI_ioctl+0x2b2>
 800970c:	f107 030c 	add.w	r3, r7, #12
 8009710:	2110      	movs	r1, #16
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff fd10 	bl	8009138 <rcvr_datablock>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 8113 	beq.w	8009946 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009720:	7b3b      	ldrb	r3, [r7, #12]
 8009722:	099b      	lsrs	r3, r3, #6
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b01      	cmp	r3, #1
 8009728:	d111      	bne.n	800974e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800972a:	7d7b      	ldrb	r3, [r7, #21]
 800972c:	461a      	mov	r2, r3
 800972e:	7d3b      	ldrb	r3, [r7, #20]
 8009730:	021b      	lsls	r3, r3, #8
 8009732:	4413      	add	r3, r2
 8009734:	461a      	mov	r2, r3
 8009736:	7cfb      	ldrb	r3, [r7, #19]
 8009738:	041b      	lsls	r3, r3, #16
 800973a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800973e:	4413      	add	r3, r2
 8009740:	3301      	adds	r3, #1
 8009742:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	029a      	lsls	r2, r3, #10
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	e028      	b.n	80097a0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800974e:	7c7b      	ldrb	r3, [r7, #17]
 8009750:	f003 030f 	and.w	r3, r3, #15
 8009754:	b2da      	uxtb	r2, r3
 8009756:	7dbb      	ldrb	r3, [r7, #22]
 8009758:	09db      	lsrs	r3, r3, #7
 800975a:	b2db      	uxtb	r3, r3
 800975c:	4413      	add	r3, r2
 800975e:	b2da      	uxtb	r2, r3
 8009760:	7d7b      	ldrb	r3, [r7, #21]
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	b2db      	uxtb	r3, r3
 8009766:	f003 0306 	and.w	r3, r3, #6
 800976a:	b2db      	uxtb	r3, r3
 800976c:	4413      	add	r3, r2
 800976e:	b2db      	uxtb	r3, r3
 8009770:	3302      	adds	r3, #2
 8009772:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009776:	7d3b      	ldrb	r3, [r7, #20]
 8009778:	099b      	lsrs	r3, r3, #6
 800977a:	b2db      	uxtb	r3, r3
 800977c:	461a      	mov	r2, r3
 800977e:	7cfb      	ldrb	r3, [r7, #19]
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	441a      	add	r2, r3
 8009784:	7cbb      	ldrb	r3, [r7, #18]
 8009786:	029b      	lsls	r3, r3, #10
 8009788:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800978c:	4413      	add	r3, r2
 800978e:	3301      	adds	r3, #1
 8009790:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009792:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009796:	3b09      	subs	r3, #9
 8009798:	69fa      	ldr	r2, [r7, #28]
 800979a:	409a      	lsls	r2, r3
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80097a6:	e0ce      	b.n	8009946 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80097a8:	4b71      	ldr	r3, [pc, #452]	; (8009970 <USER_SPI_ioctl+0x2dc>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	f003 0304 	and.w	r3, r3, #4
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d031      	beq.n	8009818 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80097b4:	2100      	movs	r1, #0
 80097b6:	208d      	movs	r0, #141	; 0x8d
 80097b8:	f7ff fd19 	bl	80091ee <send_cmd>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f040 80c3 	bne.w	800994a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80097c4:	20ff      	movs	r0, #255	; 0xff
 80097c6:	f7ff fc1f 	bl	8009008 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80097ca:	f107 030c 	add.w	r3, r7, #12
 80097ce:	2110      	movs	r1, #16
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff fcb1 	bl	8009138 <rcvr_datablock>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 80b6 	beq.w	800994a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80097de:	2330      	movs	r3, #48	; 0x30
 80097e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80097e4:	e007      	b.n	80097f6 <USER_SPI_ioctl+0x162>
 80097e6:	20ff      	movs	r0, #255	; 0xff
 80097e8:	f7ff fc0e 	bl	8009008 <xchg_spi>
 80097ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80097f0:	3b01      	subs	r3, #1
 80097f2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80097f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1f3      	bne.n	80097e6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80097fe:	7dbb      	ldrb	r3, [r7, #22]
 8009800:	091b      	lsrs	r3, r3, #4
 8009802:	b2db      	uxtb	r3, r3
 8009804:	461a      	mov	r2, r3
 8009806:	2310      	movs	r3, #16
 8009808:	fa03 f202 	lsl.w	r2, r3, r2
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009816:	e098      	b.n	800994a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009818:	2100      	movs	r1, #0
 800981a:	2009      	movs	r0, #9
 800981c:	f7ff fce7 	bl	80091ee <send_cmd>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	f040 8091 	bne.w	800994a <USER_SPI_ioctl+0x2b6>
 8009828:	f107 030c 	add.w	r3, r7, #12
 800982c:	2110      	movs	r1, #16
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff fc82 	bl	8009138 <rcvr_datablock>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 8087 	beq.w	800994a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800983c:	4b4c      	ldr	r3, [pc, #304]	; (8009970 <USER_SPI_ioctl+0x2dc>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	f003 0302 	and.w	r3, r3, #2
 8009844:	2b00      	cmp	r3, #0
 8009846:	d012      	beq.n	800986e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009848:	7dbb      	ldrb	r3, [r7, #22]
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009850:	7dfa      	ldrb	r2, [r7, #23]
 8009852:	09d2      	lsrs	r2, r2, #7
 8009854:	b2d2      	uxtb	r2, r2
 8009856:	4413      	add	r3, r2
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	7e7b      	ldrb	r3, [r7, #25]
 800985c:	099b      	lsrs	r3, r3, #6
 800985e:	b2db      	uxtb	r3, r3
 8009860:	3b01      	subs	r3, #1
 8009862:	fa02 f303 	lsl.w	r3, r2, r3
 8009866:	461a      	mov	r2, r3
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	e013      	b.n	8009896 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800986e:	7dbb      	ldrb	r3, [r7, #22]
 8009870:	109b      	asrs	r3, r3, #2
 8009872:	b29b      	uxth	r3, r3
 8009874:	f003 031f 	and.w	r3, r3, #31
 8009878:	3301      	adds	r3, #1
 800987a:	7dfa      	ldrb	r2, [r7, #23]
 800987c:	00d2      	lsls	r2, r2, #3
 800987e:	f002 0218 	and.w	r2, r2, #24
 8009882:	7df9      	ldrb	r1, [r7, #23]
 8009884:	0949      	lsrs	r1, r1, #5
 8009886:	b2c9      	uxtb	r1, r1
 8009888:	440a      	add	r2, r1
 800988a:	3201      	adds	r2, #1
 800988c:	fb02 f303 	mul.w	r3, r2, r3
 8009890:	461a      	mov	r2, r3
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800989c:	e055      	b.n	800994a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800989e:	4b34      	ldr	r3, [pc, #208]	; (8009970 <USER_SPI_ioctl+0x2dc>)
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	f003 0306 	and.w	r3, r3, #6
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d051      	beq.n	800994e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80098aa:	f107 020c 	add.w	r2, r7, #12
 80098ae:	79fb      	ldrb	r3, [r7, #7]
 80098b0:	210b      	movs	r1, #11
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7ff feee 	bl	8009694 <USER_SPI_ioctl>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d149      	bne.n	8009952 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80098be:	7b3b      	ldrb	r3, [r7, #12]
 80098c0:	099b      	lsrs	r3, r3, #6
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d104      	bne.n	80098d2 <USER_SPI_ioctl+0x23e>
 80098c8:	7dbb      	ldrb	r3, [r7, #22]
 80098ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d041      	beq.n	8009956 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	623b      	str	r3, [r7, #32]
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	62bb      	str	r3, [r7, #40]	; 0x28
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80098e2:	4b23      	ldr	r3, [pc, #140]	; (8009970 <USER_SPI_ioctl+0x2dc>)
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	f003 0308 	and.w	r3, r3, #8
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d105      	bne.n	80098fa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80098ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f0:	025b      	lsls	r3, r3, #9
 80098f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	025b      	lsls	r3, r3, #9
 80098f8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80098fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098fc:	2020      	movs	r0, #32
 80098fe:	f7ff fc76 	bl	80091ee <send_cmd>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d128      	bne.n	800995a <USER_SPI_ioctl+0x2c6>
 8009908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800990a:	2021      	movs	r0, #33	; 0x21
 800990c:	f7ff fc6f 	bl	80091ee <send_cmd>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d121      	bne.n	800995a <USER_SPI_ioctl+0x2c6>
 8009916:	2100      	movs	r1, #0
 8009918:	2026      	movs	r0, #38	; 0x26
 800991a:	f7ff fc68 	bl	80091ee <send_cmd>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d11a      	bne.n	800995a <USER_SPI_ioctl+0x2c6>
 8009924:	f247 5030 	movw	r0, #30000	; 0x7530
 8009928:	f7ff fbbb 	bl	80090a2 <wait_ready>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d013      	beq.n	800995a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009932:	2300      	movs	r3, #0
 8009934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009938:	e00f      	b.n	800995a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800993a:	2304      	movs	r3, #4
 800993c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009940:	e00c      	b.n	800995c <USER_SPI_ioctl+0x2c8>
		break;
 8009942:	bf00      	nop
 8009944:	e00a      	b.n	800995c <USER_SPI_ioctl+0x2c8>
		break;
 8009946:	bf00      	nop
 8009948:	e008      	b.n	800995c <USER_SPI_ioctl+0x2c8>
		break;
 800994a:	bf00      	nop
 800994c:	e006      	b.n	800995c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800994e:	bf00      	nop
 8009950:	e004      	b.n	800995c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009952:	bf00      	nop
 8009954:	e002      	b.n	800995c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009956:	bf00      	nop
 8009958:	e000      	b.n	800995c <USER_SPI_ioctl+0x2c8>
		break;
 800995a:	bf00      	nop
	}

	despiselect();
 800995c:	f7ff fbc4 	bl	80090e8 <despiselect>

	return res;
 8009960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009964:	4618      	mov	r0, r3
 8009966:	3730      	adds	r7, #48	; 0x30
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	20000040 	.word	0x20000040
 8009970:	20000830 	.word	0x20000830

08009974 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	4a08      	ldr	r2, [pc, #32]	; (80099a4 <disk_status+0x30>)
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	79fa      	ldrb	r2, [r7, #7]
 800998c:	4905      	ldr	r1, [pc, #20]	; (80099a4 <disk_status+0x30>)
 800998e:	440a      	add	r2, r1
 8009990:	7a12      	ldrb	r2, [r2, #8]
 8009992:	4610      	mov	r0, r2
 8009994:	4798      	blx	r3
 8009996:	4603      	mov	r3, r0
 8009998:	73fb      	strb	r3, [r7, #15]
  return stat;
 800999a:	7bfb      	ldrb	r3, [r7, #15]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	20000864 	.word	0x20000864

080099a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4603      	mov	r3, r0
 80099b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80099b6:	79fb      	ldrb	r3, [r7, #7]
 80099b8:	4a0d      	ldr	r2, [pc, #52]	; (80099f0 <disk_initialize+0x48>)
 80099ba:	5cd3      	ldrb	r3, [r2, r3]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d111      	bne.n	80099e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	4a0b      	ldr	r2, [pc, #44]	; (80099f0 <disk_initialize+0x48>)
 80099c4:	2101      	movs	r1, #1
 80099c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	4a09      	ldr	r2, [pc, #36]	; (80099f0 <disk_initialize+0x48>)
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	79fa      	ldrb	r2, [r7, #7]
 80099d6:	4906      	ldr	r1, [pc, #24]	; (80099f0 <disk_initialize+0x48>)
 80099d8:	440a      	add	r2, r1
 80099da:	7a12      	ldrb	r2, [r2, #8]
 80099dc:	4610      	mov	r0, r2
 80099de:	4798      	blx	r3
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20000864 	.word	0x20000864

080099f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80099f4:	b590      	push	{r4, r7, lr}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	607a      	str	r2, [r7, #4]
 80099fe:	603b      	str	r3, [r7, #0]
 8009a00:	4603      	mov	r3, r0
 8009a02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	4a0a      	ldr	r2, [pc, #40]	; (8009a30 <disk_read+0x3c>)
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	689c      	ldr	r4, [r3, #8]
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	4a07      	ldr	r2, [pc, #28]	; (8009a30 <disk_read+0x3c>)
 8009a14:	4413      	add	r3, r2
 8009a16:	7a18      	ldrb	r0, [r3, #8]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	68b9      	ldr	r1, [r7, #8]
 8009a1e:	47a0      	blx	r4
 8009a20:	4603      	mov	r3, r0
 8009a22:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	371c      	adds	r7, #28
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd90      	pop	{r4, r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20000864 	.word	0x20000864

08009a34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009a34:	b590      	push	{r4, r7, lr}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	607a      	str	r2, [r7, #4]
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	4603      	mov	r3, r0
 8009a42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	4a0a      	ldr	r2, [pc, #40]	; (8009a70 <disk_write+0x3c>)
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	68dc      	ldr	r4, [r3, #12]
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	4a07      	ldr	r2, [pc, #28]	; (8009a70 <disk_write+0x3c>)
 8009a54:	4413      	add	r3, r2
 8009a56:	7a18      	ldrb	r0, [r3, #8]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	68b9      	ldr	r1, [r7, #8]
 8009a5e:	47a0      	blx	r4
 8009a60:	4603      	mov	r3, r0
 8009a62:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd90      	pop	{r4, r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	20000864 	.word	0x20000864

08009a74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	603a      	str	r2, [r7, #0]
 8009a7e:	71fb      	strb	r3, [r7, #7]
 8009a80:	460b      	mov	r3, r1
 8009a82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a84:	79fb      	ldrb	r3, [r7, #7]
 8009a86:	4a09      	ldr	r2, [pc, #36]	; (8009aac <disk_ioctl+0x38>)
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	79fa      	ldrb	r2, [r7, #7]
 8009a92:	4906      	ldr	r1, [pc, #24]	; (8009aac <disk_ioctl+0x38>)
 8009a94:	440a      	add	r2, r1
 8009a96:	7a10      	ldrb	r0, [r2, #8]
 8009a98:	79b9      	ldrb	r1, [r7, #6]
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	4798      	blx	r3
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	73fb      	strb	r3, [r7, #15]
  return res;
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	20000864 	.word	0x20000864

08009ab0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	3301      	adds	r3, #1
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009ac0:	89fb      	ldrh	r3, [r7, #14]
 8009ac2:	021b      	lsls	r3, r3, #8
 8009ac4:	b21a      	sxth	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	b21b      	sxth	r3, r3
 8009acc:	4313      	orrs	r3, r2
 8009ace:	b21b      	sxth	r3, r3
 8009ad0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009ad2:	89fb      	ldrh	r3, [r7, #14]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3303      	adds	r3, #3
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	021b      	lsls	r3, r3, #8
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	3202      	adds	r2, #2
 8009af8:	7812      	ldrb	r2, [r2, #0]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	021b      	lsls	r3, r3, #8
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	3201      	adds	r2, #1
 8009b06:	7812      	ldrb	r2, [r2, #0]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	7812      	ldrb	r2, [r2, #0]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]
	return rv;
 8009b18:	68fb      	ldr	r3, [r7, #12]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009b26:	b480      	push	{r7}
 8009b28:	b083      	sub	sp, #12
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	460b      	mov	r3, r1
 8009b30:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	1c5a      	adds	r2, r3, #1
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	887a      	ldrh	r2, [r7, #2]
 8009b3a:	b2d2      	uxtb	r2, r2
 8009b3c:	701a      	strb	r2, [r3, #0]
 8009b3e:	887b      	ldrh	r3, [r7, #2]
 8009b40:	0a1b      	lsrs	r3, r3, #8
 8009b42:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	607a      	str	r2, [r7, #4]
 8009b4a:	887a      	ldrh	r2, [r7, #2]
 8009b4c:	b2d2      	uxtb	r2, r2
 8009b4e:	701a      	strb	r2, [r3, #0]
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	b2d2      	uxtb	r2, r2
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	0a1b      	lsrs	r3, r3, #8
 8009b76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	607a      	str	r2, [r7, #4]
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	b2d2      	uxtb	r2, r2
 8009b82:	701a      	strb	r2, [r3, #0]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	0a1b      	lsrs	r3, r3, #8
 8009b88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	607a      	str	r2, [r7, #4]
 8009b90:	683a      	ldr	r2, [r7, #0]
 8009b92:	b2d2      	uxtb	r2, r2
 8009b94:	701a      	strb	r2, [r3, #0]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	0a1b      	lsrs	r3, r3, #8
 8009b9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	607a      	str	r2, [r7, #4]
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	b2d2      	uxtb	r2, r2
 8009ba6:	701a      	strb	r2, [r3, #0]
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009bb4:	b480      	push	{r7}
 8009bb6:	b087      	sub	sp, #28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00d      	beq.n	8009bea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	1c53      	adds	r3, r2, #1
 8009bd2:	613b      	str	r3, [r7, #16]
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	1c59      	adds	r1, r3, #1
 8009bd8:	6179      	str	r1, [r7, #20]
 8009bda:	7812      	ldrb	r2, [r2, #0]
 8009bdc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	607b      	str	r3, [r7, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1f1      	bne.n	8009bce <mem_cpy+0x1a>
	}
}
 8009bea:	bf00      	nop
 8009bec:	371c      	adds	r7, #28
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009bf6:	b480      	push	{r7}
 8009bf8:	b087      	sub	sp, #28
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	60f8      	str	r0, [r7, #12]
 8009bfe:	60b9      	str	r1, [r7, #8]
 8009c00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	617a      	str	r2, [r7, #20]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	b2d2      	uxtb	r2, r2
 8009c10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	607b      	str	r3, [r7, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1f3      	bne.n	8009c06 <mem_set+0x10>
}
 8009c1e:	bf00      	nop
 8009c20:	bf00      	nop
 8009c22:	371c      	adds	r7, #28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009c2c:	b480      	push	{r7}
 8009c2e:	b089      	sub	sp, #36	; 0x24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	61fb      	str	r3, [r7, #28]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	1c5a      	adds	r2, r3, #1
 8009c48:	61fa      	str	r2, [r7, #28]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	1c5a      	adds	r2, r3, #1
 8009c52:	61ba      	str	r2, [r7, #24]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	1acb      	subs	r3, r1, r3
 8009c58:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	607b      	str	r3, [r7, #4]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <mem_cmp+0x40>
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d0eb      	beq.n	8009c44 <mem_cmp+0x18>

	return r;
 8009c6c:	697b      	ldr	r3, [r7, #20]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3724      	adds	r7, #36	; 0x24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr

08009c7a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009c7a:	b480      	push	{r7}
 8009c7c:	b083      	sub	sp, #12
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009c84:	e002      	b.n	8009c8c <chk_chr+0x12>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	607b      	str	r3, [r7, #4]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d005      	beq.n	8009ca0 <chk_chr+0x26>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d1f2      	bne.n	8009c86 <chk_chr+0xc>
	return *str;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d009      	beq.n	8009cd2 <lock_fs+0x22>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f002 fa92 	bl	800c1ec <ff_req_grant>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <lock_fs+0x22>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e000      	b.n	8009cd4 <lock_fs+0x24>
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00d      	beq.n	8009d0a <unlock_fs+0x2e>
 8009cee:	78fb      	ldrb	r3, [r7, #3]
 8009cf0:	2b0c      	cmp	r3, #12
 8009cf2:	d00a      	beq.n	8009d0a <unlock_fs+0x2e>
 8009cf4:	78fb      	ldrb	r3, [r7, #3]
 8009cf6:	2b0b      	cmp	r3, #11
 8009cf8:	d007      	beq.n	8009d0a <unlock_fs+0x2e>
 8009cfa:	78fb      	ldrb	r3, [r7, #3]
 8009cfc:	2b0f      	cmp	r3, #15
 8009cfe:	d004      	beq.n	8009d0a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f002 fa86 	bl	800c216 <ff_rel_grant>
	}
}
 8009d0a:	bf00      	nop
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
	...

08009d14 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60bb      	str	r3, [r7, #8]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	60fb      	str	r3, [r7, #12]
 8009d26:	e029      	b.n	8009d7c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009d28:	4a27      	ldr	r2, [pc, #156]	; (8009dc8 <chk_lock+0xb4>)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	011b      	lsls	r3, r3, #4
 8009d2e:	4413      	add	r3, r2
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d01d      	beq.n	8009d72 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009d36:	4a24      	ldr	r2, [pc, #144]	; (8009dc8 <chk_lock+0xb4>)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	011b      	lsls	r3, r3, #4
 8009d3c:	4413      	add	r3, r2
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d116      	bne.n	8009d76 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009d48:	4a1f      	ldr	r2, [pc, #124]	; (8009dc8 <chk_lock+0xb4>)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	4413      	add	r3, r2
 8009d50:	3304      	adds	r3, #4
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d10c      	bne.n	8009d76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009d5c:	4a1a      	ldr	r2, [pc, #104]	; (8009dc8 <chk_lock+0xb4>)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	011b      	lsls	r3, r3, #4
 8009d62:	4413      	add	r3, r2
 8009d64:	3308      	adds	r3, #8
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d102      	bne.n	8009d76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009d70:	e007      	b.n	8009d82 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009d72:	2301      	movs	r3, #1
 8009d74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	60fb      	str	r3, [r7, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d9d2      	bls.n	8009d28 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d109      	bne.n	8009d9c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d102      	bne.n	8009d94 <chk_lock+0x80>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d101      	bne.n	8009d98 <chk_lock+0x84>
 8009d94:	2300      	movs	r3, #0
 8009d96:	e010      	b.n	8009dba <chk_lock+0xa6>
 8009d98:	2312      	movs	r3, #18
 8009d9a:	e00e      	b.n	8009dba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d108      	bne.n	8009db4 <chk_lock+0xa0>
 8009da2:	4a09      	ldr	r2, [pc, #36]	; (8009dc8 <chk_lock+0xb4>)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	4413      	add	r3, r2
 8009daa:	330c      	adds	r3, #12
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009db2:	d101      	bne.n	8009db8 <chk_lock+0xa4>
 8009db4:	2310      	movs	r3, #16
 8009db6:	e000      	b.n	8009dba <chk_lock+0xa6>
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	20000844 	.word	0x20000844

08009dcc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	607b      	str	r3, [r7, #4]
 8009dd6:	e002      	b.n	8009dde <enq_lock+0x12>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	607b      	str	r3, [r7, #4]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d806      	bhi.n	8009df2 <enq_lock+0x26>
 8009de4:	4a09      	ldr	r2, [pc, #36]	; (8009e0c <enq_lock+0x40>)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	4413      	add	r3, r2
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1f2      	bne.n	8009dd8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	bf14      	ite	ne
 8009df8:	2301      	movne	r3, #1
 8009dfa:	2300      	moveq	r3, #0
 8009dfc:	b2db      	uxtb	r3, r3
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	20000844 	.word	0x20000844

08009e10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	e01f      	b.n	8009e60 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009e20:	4a41      	ldr	r2, [pc, #260]	; (8009f28 <inc_lock+0x118>)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	011b      	lsls	r3, r3, #4
 8009e26:	4413      	add	r3, r2
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d113      	bne.n	8009e5a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009e32:	4a3d      	ldr	r2, [pc, #244]	; (8009f28 <inc_lock+0x118>)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	011b      	lsls	r3, r3, #4
 8009e38:	4413      	add	r3, r2
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d109      	bne.n	8009e5a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009e46:	4a38      	ldr	r2, [pc, #224]	; (8009f28 <inc_lock+0x118>)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	4413      	add	r3, r2
 8009e4e:	3308      	adds	r3, #8
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d006      	beq.n	8009e68 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	60fb      	str	r3, [r7, #12]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d9dc      	bls.n	8009e20 <inc_lock+0x10>
 8009e66:	e000      	b.n	8009e6a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009e68:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d132      	bne.n	8009ed6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e70:	2300      	movs	r3, #0
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	e002      	b.n	8009e7c <inc_lock+0x6c>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d806      	bhi.n	8009e90 <inc_lock+0x80>
 8009e82:	4a29      	ldr	r2, [pc, #164]	; (8009f28 <inc_lock+0x118>)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	011b      	lsls	r3, r3, #4
 8009e88:	4413      	add	r3, r2
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1f2      	bne.n	8009e76 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d101      	bne.n	8009e9a <inc_lock+0x8a>
 8009e96:	2300      	movs	r3, #0
 8009e98:	e040      	b.n	8009f1c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	4922      	ldr	r1, [pc, #136]	; (8009f28 <inc_lock+0x118>)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	011b      	lsls	r3, r3, #4
 8009ea4:	440b      	add	r3, r1
 8009ea6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	491e      	ldr	r1, [pc, #120]	; (8009f28 <inc_lock+0x118>)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	011b      	lsls	r3, r3, #4
 8009eb2:	440b      	add	r3, r1
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	695a      	ldr	r2, [r3, #20]
 8009ebc:	491a      	ldr	r1, [pc, #104]	; (8009f28 <inc_lock+0x118>)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	011b      	lsls	r3, r3, #4
 8009ec2:	440b      	add	r3, r1
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009ec8:	4a17      	ldr	r2, [pc, #92]	; (8009f28 <inc_lock+0x118>)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	011b      	lsls	r3, r3, #4
 8009ece:	4413      	add	r3, r2
 8009ed0:	330c      	adds	r3, #12
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d009      	beq.n	8009ef0 <inc_lock+0xe0>
 8009edc:	4a12      	ldr	r2, [pc, #72]	; (8009f28 <inc_lock+0x118>)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	4413      	add	r3, r2
 8009ee4:	330c      	adds	r3, #12
 8009ee6:	881b      	ldrh	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <inc_lock+0xe0>
 8009eec:	2300      	movs	r3, #0
 8009eee:	e015      	b.n	8009f1c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d108      	bne.n	8009f08 <inc_lock+0xf8>
 8009ef6:	4a0c      	ldr	r2, [pc, #48]	; (8009f28 <inc_lock+0x118>)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	011b      	lsls	r3, r3, #4
 8009efc:	4413      	add	r3, r2
 8009efe:	330c      	adds	r3, #12
 8009f00:	881b      	ldrh	r3, [r3, #0]
 8009f02:	3301      	adds	r3, #1
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	e001      	b.n	8009f0c <inc_lock+0xfc>
 8009f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f0c:	4906      	ldr	r1, [pc, #24]	; (8009f28 <inc_lock+0x118>)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	011b      	lsls	r3, r3, #4
 8009f12:	440b      	add	r3, r1
 8009f14:	330c      	adds	r3, #12
 8009f16:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3301      	adds	r3, #1
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	20000844 	.word	0x20000844

08009f2c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3b01      	subs	r3, #1
 8009f38:	607b      	str	r3, [r7, #4]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d825      	bhi.n	8009f8c <dec_lock+0x60>
		n = Files[i].ctr;
 8009f40:	4a17      	ldr	r2, [pc, #92]	; (8009fa0 <dec_lock+0x74>)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	011b      	lsls	r3, r3, #4
 8009f46:	4413      	add	r3, r2
 8009f48:	330c      	adds	r3, #12
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009f4e:	89fb      	ldrh	r3, [r7, #14]
 8009f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f54:	d101      	bne.n	8009f5a <dec_lock+0x2e>
 8009f56:	2300      	movs	r3, #0
 8009f58:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009f5a:	89fb      	ldrh	r3, [r7, #14]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <dec_lock+0x3a>
 8009f60:	89fb      	ldrh	r3, [r7, #14]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009f66:	4a0e      	ldr	r2, [pc, #56]	; (8009fa0 <dec_lock+0x74>)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	011b      	lsls	r3, r3, #4
 8009f6c:	4413      	add	r3, r2
 8009f6e:	330c      	adds	r3, #12
 8009f70:	89fa      	ldrh	r2, [r7, #14]
 8009f72:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009f74:	89fb      	ldrh	r3, [r7, #14]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d105      	bne.n	8009f86 <dec_lock+0x5a>
 8009f7a:	4a09      	ldr	r2, [pc, #36]	; (8009fa0 <dec_lock+0x74>)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	4413      	add	r3, r2
 8009f82:	2200      	movs	r2, #0
 8009f84:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	737b      	strb	r3, [r7, #13]
 8009f8a:	e001      	b.n	8009f90 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009f90:	7b7b      	ldrb	r3, [r7, #13]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	20000844 	.word	0x20000844

08009fa4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009fac:	2300      	movs	r3, #0
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	e010      	b.n	8009fd4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009fb2:	4a0d      	ldr	r2, [pc, #52]	; (8009fe8 <clear_lock+0x44>)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	011b      	lsls	r3, r3, #4
 8009fb8:	4413      	add	r3, r2
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d105      	bne.n	8009fce <clear_lock+0x2a>
 8009fc2:	4a09      	ldr	r2, [pc, #36]	; (8009fe8 <clear_lock+0x44>)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	011b      	lsls	r3, r3, #4
 8009fc8:	4413      	add	r3, r2
 8009fca:	2200      	movs	r2, #0
 8009fcc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d9eb      	bls.n	8009fb2 <clear_lock+0xe>
	}
}
 8009fda:	bf00      	nop
 8009fdc:	bf00      	nop
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	20000844 	.word	0x20000844

08009fec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	78db      	ldrb	r3, [r3, #3]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d034      	beq.n	800a06a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a004:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	7858      	ldrb	r0, [r3, #1]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a010:	2301      	movs	r3, #1
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	f7ff fd0e 	bl	8009a34 <disk_write>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a01e:	2301      	movs	r3, #1
 800a020:	73fb      	strb	r3, [r7, #15]
 800a022:	e022      	b.n	800a06a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	1ad2      	subs	r2, r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	429a      	cmp	r2, r3
 800a038:	d217      	bcs.n	800a06a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	789b      	ldrb	r3, [r3, #2]
 800a03e:	613b      	str	r3, [r7, #16]
 800a040:	e010      	b.n	800a064 <sync_window+0x78>
					wsect += fs->fsize;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	4413      	add	r3, r2
 800a04a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	7858      	ldrb	r0, [r3, #1]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a056:	2301      	movs	r3, #1
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	f7ff fceb 	bl	8009a34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	3b01      	subs	r3, #1
 800a062:	613b      	str	r3, [r7, #16]
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d8eb      	bhi.n	800a042 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d01b      	beq.n	800a0c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff ffad 	bl	8009fec <sync_window>
 800a092:	4603      	mov	r3, r0
 800a094:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a096:	7bfb      	ldrb	r3, [r7, #15]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d113      	bne.n	800a0c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	7858      	ldrb	r0, [r3, #1]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	683a      	ldr	r2, [r7, #0]
 800a0aa:	f7ff fca3 	bl	80099f4 <disk_read>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d004      	beq.n	800a0be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff ff87 	bl	8009fec <sync_window>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d158      	bne.n	800a19a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d148      	bne.n	800a182 <sync_fs+0xb2>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	791b      	ldrb	r3, [r3, #4]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d144      	bne.n	800a182 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	3334      	adds	r3, #52	; 0x34
 800a0fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a100:	2100      	movs	r1, #0
 800a102:	4618      	mov	r0, r3
 800a104:	f7ff fd77 	bl	8009bf6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3334      	adds	r3, #52	; 0x34
 800a10c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a110:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a114:	4618      	mov	r0, r3
 800a116:	f7ff fd06 	bl	8009b26 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3334      	adds	r3, #52	; 0x34
 800a11e:	4921      	ldr	r1, [pc, #132]	; (800a1a4 <sync_fs+0xd4>)
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff fd1b 	bl	8009b5c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3334      	adds	r3, #52	; 0x34
 800a12a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a12e:	491e      	ldr	r1, [pc, #120]	; (800a1a8 <sync_fs+0xd8>)
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff fd13 	bl	8009b5c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	3334      	adds	r3, #52	; 0x34
 800a13a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	695b      	ldr	r3, [r3, #20]
 800a142:	4619      	mov	r1, r3
 800a144:	4610      	mov	r0, r2
 800a146:	f7ff fd09 	bl	8009b5c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3334      	adds	r3, #52	; 0x34
 800a14e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	4619      	mov	r1, r3
 800a158:	4610      	mov	r0, r2
 800a15a:	f7ff fcff 	bl	8009b5c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	7858      	ldrb	r0, [r3, #1]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a176:	2301      	movs	r3, #1
 800a178:	f7ff fc5c 	bl	8009a34 <disk_write>
			fs->fsi_flag = 0;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	785b      	ldrb	r3, [r3, #1]
 800a186:	2200      	movs	r2, #0
 800a188:	2100      	movs	r1, #0
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7ff fc72 	bl	8009a74 <disk_ioctl>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <sync_fs+0xca>
 800a196:	2301      	movs	r3, #1
 800a198:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	41615252 	.word	0x41615252
 800a1a8:	61417272 	.word	0x61417272

0800a1ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	3b02      	subs	r3, #2
 800a1ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	3b02      	subs	r3, #2
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d301      	bcc.n	800a1cc <clust2sect+0x20>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e008      	b.n	800a1de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	895b      	ldrh	r3, [r3, #10]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	fb03 f202 	mul.w	r2, r3, r2
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1dc:	4413      	add	r3, r2
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b086      	sub	sp, #24
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d904      	bls.n	800a20a <get_fat+0x20>
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	429a      	cmp	r2, r3
 800a208:	d302      	bcc.n	800a210 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a20a:	2301      	movs	r3, #1
 800a20c:	617b      	str	r3, [r7, #20]
 800a20e:	e08f      	b.n	800a330 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
 800a214:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	d062      	beq.n	800a2e4 <get_fat+0xfa>
 800a21e:	2b03      	cmp	r3, #3
 800a220:	dc7c      	bgt.n	800a31c <get_fat+0x132>
 800a222:	2b01      	cmp	r3, #1
 800a224:	d002      	beq.n	800a22c <get_fat+0x42>
 800a226:	2b02      	cmp	r3, #2
 800a228:	d042      	beq.n	800a2b0 <get_fat+0xc6>
 800a22a:	e077      	b.n	800a31c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	085b      	lsrs	r3, r3, #1
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	0a5b      	lsrs	r3, r3, #9
 800a242:	4413      	add	r3, r2
 800a244:	4619      	mov	r1, r3
 800a246:	6938      	ldr	r0, [r7, #16]
 800a248:	f7ff ff14 	bl	800a074 <move_window>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d167      	bne.n	800a322 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	1c5a      	adds	r2, r3, #1
 800a256:	60fa      	str	r2, [r7, #12]
 800a258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	4413      	add	r3, r2
 800a260:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a264:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	0a5b      	lsrs	r3, r3, #9
 800a26e:	4413      	add	r3, r2
 800a270:	4619      	mov	r1, r3
 800a272:	6938      	ldr	r0, [r7, #16]
 800a274:	f7ff fefe 	bl	800a074 <move_window>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d153      	bne.n	800a326 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	4413      	add	r3, r2
 800a288:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a28c:	021b      	lsls	r3, r3, #8
 800a28e:	461a      	mov	r2, r3
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	4313      	orrs	r3, r2
 800a294:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	f003 0301 	and.w	r3, r3, #1
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <get_fat+0xbc>
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	091b      	lsrs	r3, r3, #4
 800a2a4:	e002      	b.n	800a2ac <get_fat+0xc2>
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2ac:	617b      	str	r3, [r7, #20]
			break;
 800a2ae:	e03f      	b.n	800a330 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	0a1b      	lsrs	r3, r3, #8
 800a2b8:	4413      	add	r3, r2
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6938      	ldr	r0, [r7, #16]
 800a2be:	f7ff fed9 	bl	800a074 <move_window>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d130      	bne.n	800a32a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	005b      	lsls	r3, r3, #1
 800a2d2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a2d6:	4413      	add	r3, r2
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7ff fbe9 	bl	8009ab0 <ld_word>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	617b      	str	r3, [r7, #20]
			break;
 800a2e2:	e025      	b.n	800a330 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	09db      	lsrs	r3, r3, #7
 800a2ec:	4413      	add	r3, r2
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6938      	ldr	r0, [r7, #16]
 800a2f2:	f7ff febf 	bl	800a074 <move_window>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d118      	bne.n	800a32e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a30a:	4413      	add	r3, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7ff fbe7 	bl	8009ae0 <ld_dword>
 800a312:	4603      	mov	r3, r0
 800a314:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a318:	617b      	str	r3, [r7, #20]
			break;
 800a31a:	e009      	b.n	800a330 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a31c:	2301      	movs	r3, #1
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	e006      	b.n	800a330 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a322:	bf00      	nop
 800a324:	e004      	b.n	800a330 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a326:	bf00      	nop
 800a328:	e002      	b.n	800a330 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a32a:	bf00      	nop
 800a32c:	e000      	b.n	800a330 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a32e:	bf00      	nop
		}
	}

	return val;
 800a330:	697b      	ldr	r3, [r7, #20]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a33a:	b590      	push	{r4, r7, lr}
 800a33c:	b089      	sub	sp, #36	; 0x24
 800a33e:	af00      	add	r7, sp, #0
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	60b9      	str	r1, [r7, #8]
 800a344:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a346:	2302      	movs	r3, #2
 800a348:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	f240 80d2 	bls.w	800a4f6 <put_fat+0x1bc>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	429a      	cmp	r2, r3
 800a35a:	f080 80cc 	bcs.w	800a4f6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	2b03      	cmp	r3, #3
 800a364:	f000 8096 	beq.w	800a494 <put_fat+0x15a>
 800a368:	2b03      	cmp	r3, #3
 800a36a:	f300 80cd 	bgt.w	800a508 <put_fat+0x1ce>
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d002      	beq.n	800a378 <put_fat+0x3e>
 800a372:	2b02      	cmp	r3, #2
 800a374:	d06e      	beq.n	800a454 <put_fat+0x11a>
 800a376:	e0c7      	b.n	800a508 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	61bb      	str	r3, [r7, #24]
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	085b      	lsrs	r3, r3, #1
 800a380:	69ba      	ldr	r2, [r7, #24]
 800a382:	4413      	add	r3, r2
 800a384:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	0a5b      	lsrs	r3, r3, #9
 800a38e:	4413      	add	r3, r2
 800a390:	4619      	mov	r1, r3
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f7ff fe6e 	bl	800a074 <move_window>
 800a398:	4603      	mov	r3, r0
 800a39a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a39c:	7ffb      	ldrb	r3, [r7, #31]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f040 80ab 	bne.w	800a4fa <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	1c59      	adds	r1, r3, #1
 800a3ae:	61b9      	str	r1, [r7, #24]
 800a3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3b4:	4413      	add	r3, r2
 800a3b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00d      	beq.n	800a3de <put_fat+0xa4>
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	b25b      	sxtb	r3, r3
 800a3c8:	f003 030f 	and.w	r3, r3, #15
 800a3cc:	b25a      	sxtb	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	011b      	lsls	r3, r3, #4
 800a3d4:	b25b      	sxtb	r3, r3
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	b25b      	sxtb	r3, r3
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	e001      	b.n	800a3e2 <put_fat+0xa8>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	0a5b      	lsrs	r3, r3, #9
 800a3f4:	4413      	add	r3, r2
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f7ff fe3b 	bl	800a074 <move_window>
 800a3fe:	4603      	mov	r3, r0
 800a400:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a402:	7ffb      	ldrb	r3, [r7, #31]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d17a      	bne.n	800a4fe <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a414:	4413      	add	r3, r2
 800a416:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <put_fat+0xf0>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	091b      	lsrs	r3, r3, #4
 800a426:	b2db      	uxtb	r3, r3
 800a428:	e00e      	b.n	800a448 <put_fat+0x10e>
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	b25b      	sxtb	r3, r3
 800a430:	f023 030f 	bic.w	r3, r3, #15
 800a434:	b25a      	sxtb	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	0a1b      	lsrs	r3, r3, #8
 800a43a:	b25b      	sxtb	r3, r3
 800a43c:	f003 030f 	and.w	r3, r3, #15
 800a440:	b25b      	sxtb	r3, r3
 800a442:	4313      	orrs	r3, r2
 800a444:	b25b      	sxtb	r3, r3
 800a446:	b2db      	uxtb	r3, r3
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2201      	movs	r2, #1
 800a450:	70da      	strb	r2, [r3, #3]
			break;
 800a452:	e059      	b.n	800a508 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	0a1b      	lsrs	r3, r3, #8
 800a45c:	4413      	add	r3, r2
 800a45e:	4619      	mov	r1, r3
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f7ff fe07 	bl	800a074 <move_window>
 800a466:	4603      	mov	r3, r0
 800a468:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a46a:	7ffb      	ldrb	r3, [r7, #31]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d148      	bne.n	800a502 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	005b      	lsls	r3, r3, #1
 800a47a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a47e:	4413      	add	r3, r2
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	b292      	uxth	r2, r2
 800a484:	4611      	mov	r1, r2
 800a486:	4618      	mov	r0, r3
 800a488:	f7ff fb4d 	bl	8009b26 <st_word>
			fs->wflag = 1;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	70da      	strb	r2, [r3, #3]
			break;
 800a492:	e039      	b.n	800a508 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	09db      	lsrs	r3, r3, #7
 800a49c:	4413      	add	r3, r2
 800a49e:	4619      	mov	r1, r3
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff fde7 	bl	800a074 <move_window>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4aa:	7ffb      	ldrb	r3, [r7, #31]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d12a      	bne.n	800a506 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a4c4:	4413      	add	r3, r2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7ff fb0a 	bl	8009ae0 <ld_dword>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a4d2:	4323      	orrs	r3, r4
 800a4d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a4e4:	4413      	add	r3, r2
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7ff fb37 	bl	8009b5c <st_dword>
			fs->wflag = 1;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	70da      	strb	r2, [r3, #3]
			break;
 800a4f4:	e008      	b.n	800a508 <put_fat+0x1ce>
		}
	}
 800a4f6:	bf00      	nop
 800a4f8:	e006      	b.n	800a508 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a4fa:	bf00      	nop
 800a4fc:	e004      	b.n	800a508 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a4fe:	bf00      	nop
 800a500:	e002      	b.n	800a508 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a502:	bf00      	nop
 800a504:	e000      	b.n	800a508 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a506:	bf00      	nop
	return res;
 800a508:	7ffb      	ldrb	r3, [r7, #31]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3724      	adds	r7, #36	; 0x24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd90      	pop	{r4, r7, pc}

0800a512 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b088      	sub	sp, #32
 800a516:	af00      	add	r7, sp, #0
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	60b9      	str	r1, [r7, #8]
 800a51c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d904      	bls.n	800a538 <remove_chain+0x26>
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	429a      	cmp	r2, r3
 800a536:	d301      	bcc.n	800a53c <remove_chain+0x2a>
 800a538:	2302      	movs	r3, #2
 800a53a:	e04b      	b.n	800a5d4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00c      	beq.n	800a55c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a542:	f04f 32ff 	mov.w	r2, #4294967295
 800a546:	6879      	ldr	r1, [r7, #4]
 800a548:	69b8      	ldr	r0, [r7, #24]
 800a54a:	f7ff fef6 	bl	800a33a <put_fat>
 800a54e:	4603      	mov	r3, r0
 800a550:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a552:	7ffb      	ldrb	r3, [r7, #31]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d001      	beq.n	800a55c <remove_chain+0x4a>
 800a558:	7ffb      	ldrb	r3, [r7, #31]
 800a55a:	e03b      	b.n	800a5d4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f7ff fe43 	bl	800a1ea <get_fat>
 800a564:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d031      	beq.n	800a5d0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d101      	bne.n	800a576 <remove_chain+0x64>
 800a572:	2302      	movs	r3, #2
 800a574:	e02e      	b.n	800a5d4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57c:	d101      	bne.n	800a582 <remove_chain+0x70>
 800a57e:	2301      	movs	r3, #1
 800a580:	e028      	b.n	800a5d4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a582:	2200      	movs	r2, #0
 800a584:	68b9      	ldr	r1, [r7, #8]
 800a586:	69b8      	ldr	r0, [r7, #24]
 800a588:	f7ff fed7 	bl	800a33a <put_fat>
 800a58c:	4603      	mov	r3, r0
 800a58e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a590:	7ffb      	ldrb	r3, [r7, #31]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <remove_chain+0x88>
 800a596:	7ffb      	ldrb	r3, [r7, #31]
 800a598:	e01c      	b.n	800a5d4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	695a      	ldr	r2, [r3, #20]
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	3b02      	subs	r3, #2
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d20b      	bcs.n	800a5c0 <remove_chain+0xae>
			fs->free_clst++;
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	1c5a      	adds	r2, r3, #1
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	791b      	ldrb	r3, [r3, #4]
 800a5b6:	f043 0301 	orr.w	r3, r3, #1
 800a5ba:	b2da      	uxtb	r2, r3
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d3c6      	bcc.n	800a55c <remove_chain+0x4a>
 800a5ce:	e000      	b.n	800a5d2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a5d0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3720      	adds	r7, #32
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10d      	bne.n	800a60e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d004      	beq.n	800a608 <create_chain+0x2c>
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	69ba      	ldr	r2, [r7, #24]
 800a604:	429a      	cmp	r2, r3
 800a606:	d31b      	bcc.n	800a640 <create_chain+0x64>
 800a608:	2301      	movs	r3, #1
 800a60a:	61bb      	str	r3, [r7, #24]
 800a60c:	e018      	b.n	800a640 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7ff fdea 	bl	800a1ea <get_fat>
 800a616:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d801      	bhi.n	800a622 <create_chain+0x46>
 800a61e:	2301      	movs	r3, #1
 800a620:	e070      	b.n	800a704 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a628:	d101      	bne.n	800a62e <create_chain+0x52>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	e06a      	b.n	800a704 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	429a      	cmp	r2, r3
 800a636:	d201      	bcs.n	800a63c <create_chain+0x60>
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	e063      	b.n	800a704 <create_chain+0x128>
		scl = clst;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	3301      	adds	r3, #1
 800a648:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	69fa      	ldr	r2, [r7, #28]
 800a650:	429a      	cmp	r2, r3
 800a652:	d307      	bcc.n	800a664 <create_chain+0x88>
				ncl = 2;
 800a654:	2302      	movs	r3, #2
 800a656:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a658:	69fa      	ldr	r2, [r7, #28]
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d901      	bls.n	800a664 <create_chain+0x88>
 800a660:	2300      	movs	r3, #0
 800a662:	e04f      	b.n	800a704 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a664:	69f9      	ldr	r1, [r7, #28]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7ff fdbf 	bl	800a1ea <get_fat>
 800a66c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00e      	beq.n	800a692 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d003      	beq.n	800a682 <create_chain+0xa6>
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a680:	d101      	bne.n	800a686 <create_chain+0xaa>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	e03e      	b.n	800a704 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a686:	69fa      	ldr	r2, [r7, #28]
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d1da      	bne.n	800a644 <create_chain+0x68>
 800a68e:	2300      	movs	r3, #0
 800a690:	e038      	b.n	800a704 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a692:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a694:	f04f 32ff 	mov.w	r2, #4294967295
 800a698:	69f9      	ldr	r1, [r7, #28]
 800a69a:	6938      	ldr	r0, [r7, #16]
 800a69c:	f7ff fe4d 	bl	800a33a <put_fat>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d109      	bne.n	800a6be <create_chain+0xe2>
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d006      	beq.n	800a6be <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a6b0:	69fa      	ldr	r2, [r7, #28]
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6938      	ldr	r0, [r7, #16]
 800a6b6:	f7ff fe40 	bl	800a33a <put_fat>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a6be:	7dfb      	ldrb	r3, [r7, #23]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d116      	bne.n	800a6f2 <create_chain+0x116>
		fs->last_clst = ncl;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	69fa      	ldr	r2, [r7, #28]
 800a6c8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	695a      	ldr	r2, [r3, #20]
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	3b02      	subs	r3, #2
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d804      	bhi.n	800a6e2 <create_chain+0x106>
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	1e5a      	subs	r2, r3, #1
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	791b      	ldrb	r3, [r3, #4]
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	711a      	strb	r2, [r3, #4]
 800a6f0:	e007      	b.n	800a702 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d102      	bne.n	800a6fe <create_chain+0x122>
 800a6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fc:	e000      	b.n	800a700 <create_chain+0x124>
 800a6fe:	2301      	movs	r3, #1
 800a700:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a702:	69fb      	ldr	r3, [r7, #28]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3720      	adds	r7, #32
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b087      	sub	sp, #28
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a720:	3304      	adds	r3, #4
 800a722:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	0a5b      	lsrs	r3, r3, #9
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	8952      	ldrh	r2, [r2, #10]
 800a72c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a730:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	1d1a      	adds	r2, r3, #4
 800a736:	613a      	str	r2, [r7, #16]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <clmt_clust+0x3a>
 800a742:	2300      	movs	r3, #0
 800a744:	e010      	b.n	800a768 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d307      	bcc.n	800a75e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	1ad3      	subs	r3, r2, r3
 800a754:	617b      	str	r3, [r7, #20]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	3304      	adds	r3, #4
 800a75a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a75c:	e7e9      	b.n	800a732 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a75e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	4413      	add	r3, r2
}
 800a768:	4618      	mov	r0, r3
 800a76a:	371c      	adds	r7, #28
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a78a:	d204      	bcs.n	800a796 <dir_sdi+0x22>
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	f003 031f 	and.w	r3, r3, #31
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <dir_sdi+0x26>
		return FR_INT_ERR;
 800a796:	2302      	movs	r3, #2
 800a798:	e063      	b.n	800a862 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d106      	bne.n	800a7ba <dir_sdi+0x46>
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d902      	bls.n	800a7ba <dir_sdi+0x46>
		clst = fs->dirbase;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10c      	bne.n	800a7da <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	095b      	lsrs	r3, r3, #5
 800a7c4:	693a      	ldr	r2, [r7, #16]
 800a7c6:	8912      	ldrh	r2, [r2, #8]
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d301      	bcc.n	800a7d0 <dir_sdi+0x5c>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	e048      	b.n	800a862 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	61da      	str	r2, [r3, #28]
 800a7d8:	e029      	b.n	800a82e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	895b      	ldrh	r3, [r3, #10]
 800a7de:	025b      	lsls	r3, r3, #9
 800a7e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a7e2:	e019      	b.n	800a818 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6979      	ldr	r1, [r7, #20]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7ff fcfe 	bl	800a1ea <get_fat>
 800a7ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f6:	d101      	bne.n	800a7fc <dir_sdi+0x88>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e032      	b.n	800a862 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d904      	bls.n	800a80c <dir_sdi+0x98>
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d301      	bcc.n	800a810 <dir_sdi+0x9c>
 800a80c:	2302      	movs	r3, #2
 800a80e:	e028      	b.n	800a862 <dir_sdi+0xee>
			ofs -= csz;
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d2e1      	bcs.n	800a7e4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a820:	6979      	ldr	r1, [r7, #20]
 800a822:	6938      	ldr	r0, [r7, #16]
 800a824:	f7ff fcc2 	bl	800a1ac <clust2sect>
 800a828:	4602      	mov	r2, r0
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <dir_sdi+0xcc>
 800a83c:	2302      	movs	r3, #2
 800a83e:	e010      	b.n	800a862 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	69da      	ldr	r2, [r3, #28]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	0a5b      	lsrs	r3, r3, #9
 800a848:	441a      	add	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a85a:	441a      	add	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b086      	sub	sp, #24
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	695b      	ldr	r3, [r3, #20]
 800a87e:	3320      	adds	r3, #32
 800a880:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	69db      	ldr	r3, [r3, #28]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <dir_next+0x28>
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a890:	d301      	bcc.n	800a896 <dir_next+0x2c>
 800a892:	2304      	movs	r3, #4
 800a894:	e0aa      	b.n	800a9ec <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f040 8098 	bne.w	800a9d2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	69db      	ldr	r3, [r3, #28]
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10b      	bne.n	800a8cc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	095b      	lsrs	r3, r3, #5
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	8912      	ldrh	r2, [r2, #8]
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	f0c0 8088 	bcc.w	800a9d2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	61da      	str	r2, [r3, #28]
 800a8c8:	2304      	movs	r3, #4
 800a8ca:	e08f      	b.n	800a9ec <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	0a5b      	lsrs	r3, r3, #9
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	8952      	ldrh	r2, [r2, #10]
 800a8d4:	3a01      	subs	r2, #1
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d17a      	bne.n	800a9d2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	f7ff fc80 	bl	800a1ea <get_fat>
 800a8ea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d801      	bhi.n	800a8f6 <dir_next+0x8c>
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	e07a      	b.n	800a9ec <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fc:	d101      	bne.n	800a902 <dir_next+0x98>
 800a8fe:	2301      	movs	r3, #1
 800a900:	e074      	b.n	800a9ec <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d358      	bcc.n	800a9be <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d104      	bne.n	800a91c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	61da      	str	r2, [r3, #28]
 800a918:	2304      	movs	r3, #4
 800a91a:	e067      	b.n	800a9ec <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	4619      	mov	r1, r3
 800a924:	4610      	mov	r0, r2
 800a926:	f7ff fe59 	bl	800a5dc <create_chain>
 800a92a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <dir_next+0xcc>
 800a932:	2307      	movs	r3, #7
 800a934:	e05a      	b.n	800a9ec <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d101      	bne.n	800a940 <dir_next+0xd6>
 800a93c:	2302      	movs	r3, #2
 800a93e:	e055      	b.n	800a9ec <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a946:	d101      	bne.n	800a94c <dir_next+0xe2>
 800a948:	2301      	movs	r3, #1
 800a94a:	e04f      	b.n	800a9ec <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f7ff fb4d 	bl	8009fec <sync_window>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <dir_next+0xf2>
 800a958:	2301      	movs	r3, #1
 800a95a:	e047      	b.n	800a9ec <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	3334      	adds	r3, #52	; 0x34
 800a960:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a964:	2100      	movs	r1, #0
 800a966:	4618      	mov	r0, r3
 800a968:	f7ff f945 	bl	8009bf6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a96c:	2300      	movs	r3, #0
 800a96e:	613b      	str	r3, [r7, #16]
 800a970:	6979      	ldr	r1, [r7, #20]
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f7ff fc1a 	bl	800a1ac <clust2sect>
 800a978:	4602      	mov	r2, r0
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	631a      	str	r2, [r3, #48]	; 0x30
 800a97e:	e012      	b.n	800a9a6 <dir_next+0x13c>
						fs->wflag = 1;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2201      	movs	r2, #1
 800a984:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff fb30 	bl	8009fec <sync_window>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <dir_next+0x12c>
 800a992:	2301      	movs	r3, #1
 800a994:	e02a      	b.n	800a9ec <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	3301      	adds	r3, #1
 800a99a:	613b      	str	r3, [r7, #16]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a0:	1c5a      	adds	r2, r3, #1
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	631a      	str	r2, [r3, #48]	; 0x30
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	895b      	ldrh	r3, [r3, #10]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d3e6      	bcc.n	800a980 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	1ad2      	subs	r2, r2, r3
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a9c4:	6979      	ldr	r1, [r7, #20]
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f7ff fbf0 	bl	800a1ac <clust2sect>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e4:	441a      	add	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3718      	adds	r7, #24
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aa04:	2100      	movs	r1, #0
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7ff feb4 	bl	800a774 <dir_sdi>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa10:	7dfb      	ldrb	r3, [r7, #23]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d12b      	bne.n	800aa6e <dir_alloc+0x7a>
		n = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f7ff fb27 	bl	800a074 <move_window>
 800aa26:	4603      	mov	r3, r0
 800aa28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa2a:	7dfb      	ldrb	r3, [r7, #23]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d11d      	bne.n	800aa6c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	2be5      	cmp	r3, #229	; 0xe5
 800aa38:	d004      	beq.n	800aa44 <dir_alloc+0x50>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a1b      	ldr	r3, [r3, #32]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d107      	bne.n	800aa54 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	3301      	adds	r3, #1
 800aa48:	613b      	str	r3, [r7, #16]
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d102      	bne.n	800aa58 <dir_alloc+0x64>
 800aa52:	e00c      	b.n	800aa6e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aa54:	2300      	movs	r3, #0
 800aa56:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aa58:	2101      	movs	r1, #1
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7ff ff05 	bl	800a86a <dir_next>
 800aa60:	4603      	mov	r3, r0
 800aa62:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d0d7      	beq.n	800aa1a <dir_alloc+0x26>
 800aa6a:	e000      	b.n	800aa6e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aa6c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aa6e:	7dfb      	ldrb	r3, [r7, #23]
 800aa70:	2b04      	cmp	r3, #4
 800aa72:	d101      	bne.n	800aa78 <dir_alloc+0x84>
 800aa74:	2307      	movs	r3, #7
 800aa76:	75fb      	strb	r3, [r7, #23]
	return res;
 800aa78:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b084      	sub	sp, #16
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	331a      	adds	r3, #26
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7ff f80d 	bl	8009ab0 <ld_word>
 800aa96:	4603      	mov	r3, r0
 800aa98:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d109      	bne.n	800aab6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	3314      	adds	r3, #20
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff f802 	bl	8009ab0 <ld_word>
 800aaac:	4603      	mov	r3, r0
 800aaae:	041b      	lsls	r3, r3, #16
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aab6:	68fb      	ldr	r3, [r7, #12]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	331a      	adds	r3, #26
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	b292      	uxth	r2, r2
 800aad4:	4611      	mov	r1, r2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff f825 	bl	8009b26 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d109      	bne.n	800aaf8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f103 0214 	add.w	r2, r3, #20
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	0c1b      	lsrs	r3, r3, #16
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	f7ff f817 	bl	8009b26 <st_word>
	}
}
 800aaf8:	bf00      	nop
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ab0e:	2100      	movs	r1, #0
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7ff fe2f 	bl	800a774 <dir_sdi>
 800ab16:	4603      	mov	r3, r0
 800ab18:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ab1a:	7dfb      	ldrb	r3, [r7, #23]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <dir_find+0x24>
 800ab20:	7dfb      	ldrb	r3, [r7, #23]
 800ab22:	e03e      	b.n	800aba2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6938      	ldr	r0, [r7, #16]
 800ab2c:	f7ff faa2 	bl	800a074 <move_window>
 800ab30:	4603      	mov	r3, r0
 800ab32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ab34:	7dfb      	ldrb	r3, [r7, #23]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d12f      	bne.n	800ab9a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d102      	bne.n	800ab4e <dir_find+0x4e>
 800ab48:	2304      	movs	r3, #4
 800ab4a:	75fb      	strb	r3, [r7, #23]
 800ab4c:	e028      	b.n	800aba0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	330b      	adds	r3, #11
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a1b      	ldr	r3, [r3, #32]
 800ab64:	330b      	adds	r3, #11
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	f003 0308 	and.w	r3, r3, #8
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <dir_find+0x86>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a18      	ldr	r0, [r3, #32]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	3324      	adds	r3, #36	; 0x24
 800ab78:	220b      	movs	r2, #11
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	f7ff f856 	bl	8009c2c <mem_cmp>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00b      	beq.n	800ab9e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ab86:	2100      	movs	r1, #0
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7ff fe6e 	bl	800a86a <dir_next>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d0c5      	beq.n	800ab24 <dir_find+0x24>
 800ab98:	e002      	b.n	800aba0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ab9a:	bf00      	nop
 800ab9c:	e000      	b.n	800aba0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ab9e:	bf00      	nop

	return res;
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b084      	sub	sp, #16
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800abb8:	2101      	movs	r1, #1
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7ff ff1a 	bl	800a9f4 <dir_alloc>
 800abc0:	4603      	mov	r3, r0
 800abc2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d11c      	bne.n	800ac04 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	4619      	mov	r1, r3
 800abd0:	68b8      	ldr	r0, [r7, #8]
 800abd2:	f7ff fa4f 	bl	800a074 <move_window>
 800abd6:	4603      	mov	r3, r0
 800abd8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800abda:	7bfb      	ldrb	r3, [r7, #15]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d111      	bne.n	800ac04 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	2220      	movs	r2, #32
 800abe6:	2100      	movs	r1, #0
 800abe8:	4618      	mov	r0, r3
 800abea:	f7ff f804 	bl	8009bf6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a18      	ldr	r0, [r3, #32]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3324      	adds	r3, #36	; 0x24
 800abf6:	220b      	movs	r2, #11
 800abf8:	4619      	mov	r1, r3
 800abfa:	f7fe ffdb 	bl	8009bb4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2201      	movs	r2, #1
 800ac02:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b088      	sub	sp, #32
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	60fb      	str	r3, [r7, #12]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3324      	adds	r3, #36	; 0x24
 800ac24:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ac26:	220b      	movs	r2, #11
 800ac28:	2120      	movs	r1, #32
 800ac2a:	68b8      	ldr	r0, [r7, #8]
 800ac2c:	f7fe ffe3 	bl	8009bf6 <mem_set>
	si = i = 0; ni = 8;
 800ac30:	2300      	movs	r3, #0
 800ac32:	613b      	str	r3, [r7, #16]
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	61fb      	str	r3, [r7, #28]
 800ac38:	2308      	movs	r3, #8
 800ac3a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	1c5a      	adds	r2, r3, #1
 800ac40:	61fa      	str	r2, [r7, #28]
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	4413      	add	r3, r2
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ac4a:	7efb      	ldrb	r3, [r7, #27]
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d94e      	bls.n	800acee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ac50:	7efb      	ldrb	r3, [r7, #27]
 800ac52:	2b2f      	cmp	r3, #47	; 0x2f
 800ac54:	d006      	beq.n	800ac64 <create_name+0x54>
 800ac56:	7efb      	ldrb	r3, [r7, #27]
 800ac58:	2b5c      	cmp	r3, #92	; 0x5c
 800ac5a:	d110      	bne.n	800ac7e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ac5c:	e002      	b.n	800ac64 <create_name+0x54>
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	3301      	adds	r3, #1
 800ac62:	61fb      	str	r3, [r7, #28]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	4413      	add	r3, r2
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	2b2f      	cmp	r3, #47	; 0x2f
 800ac6e:	d0f6      	beq.n	800ac5e <create_name+0x4e>
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	4413      	add	r3, r2
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b5c      	cmp	r3, #92	; 0x5c
 800ac7a:	d0f0      	beq.n	800ac5e <create_name+0x4e>
			break;
 800ac7c:	e038      	b.n	800acf0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ac7e:	7efb      	ldrb	r3, [r7, #27]
 800ac80:	2b2e      	cmp	r3, #46	; 0x2e
 800ac82:	d003      	beq.n	800ac8c <create_name+0x7c>
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d30c      	bcc.n	800aca6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	2b0b      	cmp	r3, #11
 800ac90:	d002      	beq.n	800ac98 <create_name+0x88>
 800ac92:	7efb      	ldrb	r3, [r7, #27]
 800ac94:	2b2e      	cmp	r3, #46	; 0x2e
 800ac96:	d001      	beq.n	800ac9c <create_name+0x8c>
 800ac98:	2306      	movs	r3, #6
 800ac9a:	e044      	b.n	800ad26 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ac9c:	2308      	movs	r3, #8
 800ac9e:	613b      	str	r3, [r7, #16]
 800aca0:	230b      	movs	r3, #11
 800aca2:	617b      	str	r3, [r7, #20]
			continue;
 800aca4:	e022      	b.n	800acec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800aca6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	da04      	bge.n	800acb8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800acae:	7efb      	ldrb	r3, [r7, #27]
 800acb0:	3b80      	subs	r3, #128	; 0x80
 800acb2:	4a1f      	ldr	r2, [pc, #124]	; (800ad30 <create_name+0x120>)
 800acb4:	5cd3      	ldrb	r3, [r2, r3]
 800acb6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800acb8:	7efb      	ldrb	r3, [r7, #27]
 800acba:	4619      	mov	r1, r3
 800acbc:	481d      	ldr	r0, [pc, #116]	; (800ad34 <create_name+0x124>)
 800acbe:	f7fe ffdc 	bl	8009c7a <chk_chr>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d001      	beq.n	800accc <create_name+0xbc>
 800acc8:	2306      	movs	r3, #6
 800acca:	e02c      	b.n	800ad26 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800accc:	7efb      	ldrb	r3, [r7, #27]
 800acce:	2b60      	cmp	r3, #96	; 0x60
 800acd0:	d905      	bls.n	800acde <create_name+0xce>
 800acd2:	7efb      	ldrb	r3, [r7, #27]
 800acd4:	2b7a      	cmp	r3, #122	; 0x7a
 800acd6:	d802      	bhi.n	800acde <create_name+0xce>
 800acd8:	7efb      	ldrb	r3, [r7, #27]
 800acda:	3b20      	subs	r3, #32
 800acdc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	1c5a      	adds	r2, r3, #1
 800ace2:	613a      	str	r2, [r7, #16]
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	4413      	add	r3, r2
 800ace8:	7efa      	ldrb	r2, [r7, #27]
 800acea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800acec:	e7a6      	b.n	800ac3c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800acee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	441a      	add	r2, r3
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d101      	bne.n	800ad04 <create_name+0xf4>
 800ad00:	2306      	movs	r3, #6
 800ad02:	e010      	b.n	800ad26 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	2be5      	cmp	r3, #229	; 0xe5
 800ad0a:	d102      	bne.n	800ad12 <create_name+0x102>
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	2205      	movs	r2, #5
 800ad10:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ad12:	7efb      	ldrb	r3, [r7, #27]
 800ad14:	2b20      	cmp	r3, #32
 800ad16:	d801      	bhi.n	800ad1c <create_name+0x10c>
 800ad18:	2204      	movs	r2, #4
 800ad1a:	e000      	b.n	800ad1e <create_name+0x10e>
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	330b      	adds	r3, #11
 800ad22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ad24:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3720      	adds	r7, #32
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	08013fa0 	.word	0x08013fa0
 800ad34:	08013c68 	.word	0x08013c68

0800ad38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ad4c:	e002      	b.n	800ad54 <follow_path+0x1c>
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	3301      	adds	r3, #1
 800ad52:	603b      	str	r3, [r7, #0]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	2b2f      	cmp	r3, #47	; 0x2f
 800ad5a:	d0f8      	beq.n	800ad4e <follow_path+0x16>
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	2b5c      	cmp	r3, #92	; 0x5c
 800ad62:	d0f4      	beq.n	800ad4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	2200      	movs	r2, #0
 800ad68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	2b1f      	cmp	r3, #31
 800ad70:	d80a      	bhi.n	800ad88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2280      	movs	r2, #128	; 0x80
 800ad76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7ff fcf9 	bl	800a774 <dir_sdi>
 800ad82:	4603      	mov	r3, r0
 800ad84:	75fb      	strb	r3, [r7, #23]
 800ad86:	e043      	b.n	800ae10 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad88:	463b      	mov	r3, r7
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7ff ff3f 	bl	800ac10 <create_name>
 800ad92:	4603      	mov	r3, r0
 800ad94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d134      	bne.n	800ae06 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7ff feaf 	bl	800ab00 <dir_find>
 800ada2:	4603      	mov	r3, r0
 800ada4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800adac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800adae:	7dfb      	ldrb	r3, [r7, #23]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00a      	beq.n	800adca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800adb4:	7dfb      	ldrb	r3, [r7, #23]
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d127      	bne.n	800ae0a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800adba:	7afb      	ldrb	r3, [r7, #11]
 800adbc:	f003 0304 	and.w	r3, r3, #4
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d122      	bne.n	800ae0a <follow_path+0xd2>
 800adc4:	2305      	movs	r3, #5
 800adc6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800adc8:	e01f      	b.n	800ae0a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800adca:	7afb      	ldrb	r3, [r7, #11]
 800adcc:	f003 0304 	and.w	r3, r3, #4
 800add0:	2b00      	cmp	r3, #0
 800add2:	d11c      	bne.n	800ae0e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	799b      	ldrb	r3, [r3, #6]
 800add8:	f003 0310 	and.w	r3, r3, #16
 800addc:	2b00      	cmp	r3, #0
 800adde:	d102      	bne.n	800ade6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ade0:	2305      	movs	r3, #5
 800ade2:	75fb      	strb	r3, [r7, #23]
 800ade4:	e014      	b.n	800ae10 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	695b      	ldr	r3, [r3, #20]
 800adf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf4:	4413      	add	r3, r2
 800adf6:	4619      	mov	r1, r3
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f7ff fe42 	bl	800aa82 <ld_clust>
 800adfe:	4602      	mov	r2, r0
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae04:	e7c0      	b.n	800ad88 <follow_path+0x50>
			if (res != FR_OK) break;
 800ae06:	bf00      	nop
 800ae08:	e002      	b.n	800ae10 <follow_path+0xd8>
				break;
 800ae0a:	bf00      	nop
 800ae0c:	e000      	b.n	800ae10 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae0e:	bf00      	nop
			}
		}
	}

	return res;
 800ae10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b087      	sub	sp, #28
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ae22:	f04f 33ff 	mov.w	r3, #4294967295
 800ae26:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d031      	beq.n	800ae94 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	617b      	str	r3, [r7, #20]
 800ae36:	e002      	b.n	800ae3e <get_ldnumber+0x24>
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	617b      	str	r3, [r7, #20]
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b20      	cmp	r3, #32
 800ae44:	d903      	bls.n	800ae4e <get_ldnumber+0x34>
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	2b3a      	cmp	r3, #58	; 0x3a
 800ae4c:	d1f4      	bne.n	800ae38 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b3a      	cmp	r3, #58	; 0x3a
 800ae54:	d11c      	bne.n	800ae90 <get_ldnumber+0x76>
			tp = *path;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	1c5a      	adds	r2, r3, #1
 800ae60:	60fa      	str	r2, [r7, #12]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	3b30      	subs	r3, #48	; 0x30
 800ae66:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2b09      	cmp	r3, #9
 800ae6c:	d80e      	bhi.n	800ae8c <get_ldnumber+0x72>
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d10a      	bne.n	800ae8c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d107      	bne.n	800ae8c <get_ldnumber+0x72>
					vol = (int)i;
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	3301      	adds	r3, #1
 800ae84:	617b      	str	r3, [r7, #20]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	e002      	b.n	800ae96 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ae90:	2300      	movs	r3, #0
 800ae92:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ae94:	693b      	ldr	r3, [r7, #16]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	371c      	adds	r7, #28
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
	...

0800aea4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	70da      	strb	r2, [r3, #3]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeba:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff f8d8 	bl	800a074 <move_window>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <check_fs+0x2a>
 800aeca:	2304      	movs	r3, #4
 800aecc:	e038      	b.n	800af40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	3334      	adds	r3, #52	; 0x34
 800aed2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe fdea 	bl	8009ab0 <ld_word>
 800aedc:	4603      	mov	r3, r0
 800aede:	461a      	mov	r2, r3
 800aee0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d001      	beq.n	800aeec <check_fs+0x48>
 800aee8:	2303      	movs	r3, #3
 800aeea:	e029      	b.n	800af40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aef2:	2be9      	cmp	r3, #233	; 0xe9
 800aef4:	d009      	beq.n	800af0a <check_fs+0x66>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aefc:	2beb      	cmp	r3, #235	; 0xeb
 800aefe:	d11e      	bne.n	800af3e <check_fs+0x9a>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800af06:	2b90      	cmp	r3, #144	; 0x90
 800af08:	d119      	bne.n	800af3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3334      	adds	r3, #52	; 0x34
 800af0e:	3336      	adds	r3, #54	; 0x36
 800af10:	4618      	mov	r0, r3
 800af12:	f7fe fde5 	bl	8009ae0 <ld_dword>
 800af16:	4603      	mov	r3, r0
 800af18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af1c:	4a0a      	ldr	r2, [pc, #40]	; (800af48 <check_fs+0xa4>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d101      	bne.n	800af26 <check_fs+0x82>
 800af22:	2300      	movs	r3, #0
 800af24:	e00c      	b.n	800af40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3334      	adds	r3, #52	; 0x34
 800af2a:	3352      	adds	r3, #82	; 0x52
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fe fdd7 	bl	8009ae0 <ld_dword>
 800af32:	4603      	mov	r3, r0
 800af34:	4a05      	ldr	r2, [pc, #20]	; (800af4c <check_fs+0xa8>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d101      	bne.n	800af3e <check_fs+0x9a>
 800af3a:	2300      	movs	r3, #0
 800af3c:	e000      	b.n	800af40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800af3e:	2302      	movs	r3, #2
}
 800af40:	4618      	mov	r0, r3
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	00544146 	.word	0x00544146
 800af4c:	33544146 	.word	0x33544146

0800af50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b096      	sub	sp, #88	; 0x58
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	4613      	mov	r3, r2
 800af5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2200      	movs	r2, #0
 800af62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f7ff ff58 	bl	800ae1a <get_ldnumber>
 800af6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800af6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af6e:	2b00      	cmp	r3, #0
 800af70:	da01      	bge.n	800af76 <find_volume+0x26>
 800af72:	230b      	movs	r3, #11
 800af74:	e235      	b.n	800b3e2 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800af76:	4aa5      	ldr	r2, [pc, #660]	; (800b20c <find_volume+0x2bc>)
 800af78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800af80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <find_volume+0x3a>
 800af86:	230c      	movs	r3, #12
 800af88:	e22b      	b.n	800b3e2 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800af8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af8c:	f7fe fe90 	bl	8009cb0 <lock_fs>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d101      	bne.n	800af9a <find_volume+0x4a>
 800af96:	230f      	movs	r3, #15
 800af98:	e223      	b.n	800b3e2 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af9e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800afa0:	79fb      	ldrb	r3, [r7, #7]
 800afa2:	f023 0301 	bic.w	r3, r3, #1
 800afa6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800afa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d01a      	beq.n	800afe6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800afb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb2:	785b      	ldrb	r3, [r3, #1]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7fe fcdd 	bl	8009974 <disk_status>
 800afba:	4603      	mov	r3, r0
 800afbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800afc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afc4:	f003 0301 	and.w	r3, r3, #1
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10c      	bne.n	800afe6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800afcc:	79fb      	ldrb	r3, [r7, #7]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d007      	beq.n	800afe2 <find_volume+0x92>
 800afd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afd6:	f003 0304 	and.w	r3, r3, #4
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800afde:	230a      	movs	r3, #10
 800afe0:	e1ff      	b.n	800b3e2 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800afe2:	2300      	movs	r3, #0
 800afe4:	e1fd      	b.n	800b3e2 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800afe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe8:	2200      	movs	r2, #0
 800afea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800afec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff6:	785b      	ldrb	r3, [r3, #1]
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fe fcd5 	bl	80099a8 <disk_initialize>
 800affe:	4603      	mov	r3, r0
 800b000:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d001      	beq.n	800b014 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b010:	2303      	movs	r3, #3
 800b012:	e1e6      	b.n	800b3e2 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b014:	79fb      	ldrb	r3, [r7, #7]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d007      	beq.n	800b02a <find_volume+0xda>
 800b01a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b01e:	f003 0304 	and.w	r3, r3, #4
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b026:	230a      	movs	r3, #10
 800b028:	e1db      	b.n	800b3e2 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b02e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b030:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b032:	f7ff ff37 	bl	800aea4 <check_fs>
 800b036:	4603      	mov	r3, r0
 800b038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b03c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b040:	2b02      	cmp	r3, #2
 800b042:	d149      	bne.n	800b0d8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b044:	2300      	movs	r3, #0
 800b046:	643b      	str	r3, [r7, #64]	; 0x40
 800b048:	e01e      	b.n	800b088 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b052:	011b      	lsls	r3, r3, #4
 800b054:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b058:	4413      	add	r3, r2
 800b05a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	3304      	adds	r3, #4
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d006      	beq.n	800b074 <find_volume+0x124>
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	3308      	adds	r3, #8
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fe fd38 	bl	8009ae0 <ld_dword>
 800b070:	4602      	mov	r2, r0
 800b072:	e000      	b.n	800b076 <find_volume+0x126>
 800b074:	2200      	movs	r2, #0
 800b076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	3358      	adds	r3, #88	; 0x58
 800b07c:	443b      	add	r3, r7
 800b07e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b084:	3301      	adds	r3, #1
 800b086:	643b      	str	r3, [r7, #64]	; 0x40
 800b088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b08a:	2b03      	cmp	r3, #3
 800b08c:	d9dd      	bls.n	800b04a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b08e:	2300      	movs	r3, #0
 800b090:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <find_volume+0x14e>
 800b098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b09a:	3b01      	subs	r3, #1
 800b09c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b09e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	3358      	adds	r3, #88	; 0x58
 800b0a4:	443b      	add	r3, r7
 800b0a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b0aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b0ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d005      	beq.n	800b0be <find_volume+0x16e>
 800b0b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0b6:	f7ff fef5 	bl	800aea4 <check_fs>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	e000      	b.n	800b0c0 <find_volume+0x170>
 800b0be:	2303      	movs	r3, #3
 800b0c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b0c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d905      	bls.n	800b0d8 <find_volume+0x188>
 800b0cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	643b      	str	r3, [r7, #64]	; 0x40
 800b0d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d4:	2b03      	cmp	r3, #3
 800b0d6:	d9e2      	bls.n	800b09e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b0d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	d101      	bne.n	800b0e4 <find_volume+0x194>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e17e      	b.n	800b3e2 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b0e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d901      	bls.n	800b0f0 <find_volume+0x1a0>
 800b0ec:	230d      	movs	r3, #13
 800b0ee:	e178      	b.n	800b3e2 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f2:	3334      	adds	r3, #52	; 0x34
 800b0f4:	330b      	adds	r3, #11
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fe fcda 	bl	8009ab0 <ld_word>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b102:	d001      	beq.n	800b108 <find_volume+0x1b8>
 800b104:	230d      	movs	r3, #13
 800b106:	e16c      	b.n	800b3e2 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10a:	3334      	adds	r3, #52	; 0x34
 800b10c:	3316      	adds	r3, #22
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fe fcce 	bl	8009ab0 <ld_word>
 800b114:	4603      	mov	r3, r0
 800b116:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d106      	bne.n	800b12c <find_volume+0x1dc>
 800b11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b120:	3334      	adds	r3, #52	; 0x34
 800b122:	3324      	adds	r3, #36	; 0x24
 800b124:	4618      	mov	r0, r3
 800b126:	f7fe fcdb 	bl	8009ae0 <ld_dword>
 800b12a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b130:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b134:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13e:	789b      	ldrb	r3, [r3, #2]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d005      	beq.n	800b150 <find_volume+0x200>
 800b144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b146:	789b      	ldrb	r3, [r3, #2]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d001      	beq.n	800b150 <find_volume+0x200>
 800b14c:	230d      	movs	r3, #13
 800b14e:	e148      	b.n	800b3e2 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b152:	789b      	ldrb	r3, [r3, #2]
 800b154:	461a      	mov	r2, r3
 800b156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b158:	fb02 f303 	mul.w	r3, r2, r3
 800b15c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b164:	b29a      	uxth	r2, r3
 800b166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b168:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	895b      	ldrh	r3, [r3, #10]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d008      	beq.n	800b184 <find_volume+0x234>
 800b172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b174:	895b      	ldrh	r3, [r3, #10]
 800b176:	461a      	mov	r2, r3
 800b178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17a:	895b      	ldrh	r3, [r3, #10]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	4013      	ands	r3, r2
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <find_volume+0x238>
 800b184:	230d      	movs	r3, #13
 800b186:	e12c      	b.n	800b3e2 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	3334      	adds	r3, #52	; 0x34
 800b18c:	3311      	adds	r3, #17
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fe fc8e 	bl	8009ab0 <ld_word>
 800b194:	4603      	mov	r3, r0
 800b196:	461a      	mov	r2, r3
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	891b      	ldrh	r3, [r3, #8]
 800b1a0:	f003 030f 	and.w	r3, r3, #15
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d001      	beq.n	800b1ae <find_volume+0x25e>
 800b1aa:	230d      	movs	r3, #13
 800b1ac:	e119      	b.n	800b3e2 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b0:	3334      	adds	r3, #52	; 0x34
 800b1b2:	3313      	adds	r3, #19
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7fe fc7b 	bl	8009ab0 <ld_word>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b1be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d106      	bne.n	800b1d2 <find_volume+0x282>
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	3334      	adds	r3, #52	; 0x34
 800b1c8:	3320      	adds	r3, #32
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fe fc88 	bl	8009ae0 <ld_dword>
 800b1d0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	3334      	adds	r3, #52	; 0x34
 800b1d6:	330e      	adds	r3, #14
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe fc69 	bl	8009ab0 <ld_word>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b1e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <find_volume+0x29c>
 800b1e8:	230d      	movs	r3, #13
 800b1ea:	e0fa      	b.n	800b3e2 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b1ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f0:	4413      	add	r3, r2
 800b1f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1f4:	8912      	ldrh	r2, [r2, #8]
 800b1f6:	0912      	lsrs	r2, r2, #4
 800b1f8:	b292      	uxth	r2, r2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b1fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	429a      	cmp	r2, r3
 800b204:	d204      	bcs.n	800b210 <find_volume+0x2c0>
 800b206:	230d      	movs	r3, #13
 800b208:	e0eb      	b.n	800b3e2 <find_volume+0x492>
 800b20a:	bf00      	nop
 800b20c:	2000083c 	.word	0x2000083c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b218:	8952      	ldrh	r2, [r2, #10]
 800b21a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b21e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	2b00      	cmp	r3, #0
 800b224:	d101      	bne.n	800b22a <find_volume+0x2da>
 800b226:	230d      	movs	r3, #13
 800b228:	e0db      	b.n	800b3e2 <find_volume+0x492>
		fmt = FS_FAT32;
 800b22a:	2303      	movs	r3, #3
 800b22c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b236:	4293      	cmp	r3, r2
 800b238:	d802      	bhi.n	800b240 <find_volume+0x2f0>
 800b23a:	2302      	movs	r3, #2
 800b23c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b246:	4293      	cmp	r3, r2
 800b248:	d802      	bhi.n	800b250 <find_volume+0x300>
 800b24a:	2301      	movs	r3, #1
 800b24c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b252:	1c9a      	adds	r2, r3, #2
 800b254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b256:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b25c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b25e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b262:	441a      	add	r2, r3
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b268:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26c:	441a      	add	r2, r3
 800b26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b270:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b272:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b276:	2b03      	cmp	r3, #3
 800b278:	d11e      	bne.n	800b2b8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27c:	3334      	adds	r3, #52	; 0x34
 800b27e:	332a      	adds	r3, #42	; 0x2a
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe fc15 	bl	8009ab0 <ld_word>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <find_volume+0x340>
 800b28c:	230d      	movs	r3, #13
 800b28e:	e0a8      	b.n	800b3e2 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b292:	891b      	ldrh	r3, [r3, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <find_volume+0x34c>
 800b298:	230d      	movs	r3, #13
 800b29a:	e0a2      	b.n	800b3e2 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	3334      	adds	r3, #52	; 0x34
 800b2a0:	332c      	adds	r3, #44	; 0x2c
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fe fc1c 	bl	8009ae0 <ld_dword>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ac:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	647b      	str	r3, [r7, #68]	; 0x44
 800b2b6:	e01f      	b.n	800b2f8 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ba:	891b      	ldrh	r3, [r3, #8]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <find_volume+0x374>
 800b2c0:	230d      	movs	r3, #13
 800b2c2:	e08e      	b.n	800b3e2 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ca:	441a      	add	r2, r3
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ce:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b2d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	d103      	bne.n	800b2e0 <find_volume+0x390>
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	005b      	lsls	r3, r3, #1
 800b2de:	e00a      	b.n	800b2f6 <find_volume+0x3a6>
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e2:	699a      	ldr	r2, [r3, #24]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	005b      	lsls	r3, r3, #1
 800b2e8:	4413      	add	r3, r2
 800b2ea:	085a      	lsrs	r2, r3, #1
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ee:	699b      	ldr	r3, [r3, #24]
 800b2f0:	f003 0301 	and.w	r3, r3, #1
 800b2f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b2f6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fa:	69da      	ldr	r2, [r3, #28]
 800b2fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b302:	0a5b      	lsrs	r3, r3, #9
 800b304:	429a      	cmp	r2, r3
 800b306:	d201      	bcs.n	800b30c <find_volume+0x3bc>
 800b308:	230d      	movs	r3, #13
 800b30a:	e06a      	b.n	800b3e2 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30e:	f04f 32ff 	mov.w	r2, #4294967295
 800b312:	615a      	str	r2, [r3, #20]
 800b314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b316:	695a      	ldr	r2, [r3, #20]
 800b318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	2280      	movs	r2, #128	; 0x80
 800b320:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b322:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b326:	2b03      	cmp	r3, #3
 800b328:	d149      	bne.n	800b3be <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32c:	3334      	adds	r3, #52	; 0x34
 800b32e:	3330      	adds	r3, #48	; 0x30
 800b330:	4618      	mov	r0, r3
 800b332:	f7fe fbbd 	bl	8009ab0 <ld_word>
 800b336:	4603      	mov	r3, r0
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d140      	bne.n	800b3be <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b33c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b33e:	3301      	adds	r3, #1
 800b340:	4619      	mov	r1, r3
 800b342:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b344:	f7fe fe96 	bl	800a074 <move_window>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d137      	bne.n	800b3be <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800b34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b350:	2200      	movs	r2, #0
 800b352:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b356:	3334      	adds	r3, #52	; 0x34
 800b358:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fe fba7 	bl	8009ab0 <ld_word>
 800b362:	4603      	mov	r3, r0
 800b364:	461a      	mov	r2, r3
 800b366:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d127      	bne.n	800b3be <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b370:	3334      	adds	r3, #52	; 0x34
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe fbb4 	bl	8009ae0 <ld_dword>
 800b378:	4603      	mov	r3, r0
 800b37a:	4a1c      	ldr	r2, [pc, #112]	; (800b3ec <find_volume+0x49c>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d11e      	bne.n	800b3be <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	3334      	adds	r3, #52	; 0x34
 800b384:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fe fba9 	bl	8009ae0 <ld_dword>
 800b38e:	4603      	mov	r3, r0
 800b390:	4a17      	ldr	r2, [pc, #92]	; (800b3f0 <find_volume+0x4a0>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d113      	bne.n	800b3be <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b398:	3334      	adds	r3, #52	; 0x34
 800b39a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fe fb9e 	bl	8009ae0 <ld_dword>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ac:	3334      	adds	r3, #52	; 0x34
 800b3ae:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fe fb94 	bl	8009ae0 <ld_dword>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b3c4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	; (800b3f4 <find_volume+0x4a4>)
 800b3c8:	881b      	ldrh	r3, [r3, #0]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <find_volume+0x4a4>)
 800b3d0:	801a      	strh	r2, [r3, #0]
 800b3d2:	4b08      	ldr	r3, [pc, #32]	; (800b3f4 <find_volume+0x4a4>)
 800b3d4:	881a      	ldrh	r2, [r3, #0]
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b3da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3dc:	f7fe fde2 	bl	8009fa4 <clear_lock>
#endif
	return FR_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3758      	adds	r7, #88	; 0x58
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	41615252 	.word	0x41615252
 800b3f0:	61417272 	.word	0x61417272
 800b3f4:	20000840 	.word	0x20000840

0800b3f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b402:	2309      	movs	r3, #9
 800b404:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d02e      	beq.n	800b46a <validate+0x72>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d02a      	beq.n	800b46a <validate+0x72>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d025      	beq.n	800b46a <validate+0x72>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	889a      	ldrh	r2, [r3, #4]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	88db      	ldrh	r3, [r3, #6]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d11e      	bne.n	800b46a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4618      	mov	r0, r3
 800b432:	f7fe fc3d 	bl	8009cb0 <lock_fs>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d014      	beq.n	800b466 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	785b      	ldrb	r3, [r3, #1]
 800b442:	4618      	mov	r0, r3
 800b444:	f7fe fa96 	bl	8009974 <disk_status>
 800b448:	4603      	mov	r3, r0
 800b44a:	f003 0301 	and.w	r3, r3, #1
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d102      	bne.n	800b458 <validate+0x60>
				res = FR_OK;
 800b452:	2300      	movs	r3, #0
 800b454:	73fb      	strb	r3, [r7, #15]
 800b456:	e008      	b.n	800b46a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2100      	movs	r1, #0
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fe fc3c 	bl	8009cdc <unlock_fs>
 800b464:	e001      	b.n	800b46a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b466:	230f      	movs	r3, #15
 800b468:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d102      	bne.n	800b476 <validate+0x7e>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	e000      	b.n	800b478 <validate+0x80>
 800b476:	2300      	movs	r3, #0
 800b478:	683a      	ldr	r2, [r7, #0]
 800b47a:	6013      	str	r3, [r2, #0]
	return res;
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
	...

0800b488 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b088      	sub	sp, #32
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	4613      	mov	r3, r2
 800b494:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b49a:	f107 0310 	add.w	r3, r7, #16
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7ff fcbb 	bl	800ae1a <get_ldnumber>
 800b4a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	da01      	bge.n	800b4b0 <f_mount+0x28>
 800b4ac:	230b      	movs	r3, #11
 800b4ae:	e048      	b.n	800b542 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b4b0:	4a26      	ldr	r2, [pc, #152]	; (800b54c <f_mount+0xc4>)
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00f      	beq.n	800b4e0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b4c0:	69b8      	ldr	r0, [r7, #24]
 800b4c2:	f7fe fd6f 	bl	8009fa4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f000 fe82 	bl	800c1d4 <ff_del_syncobj>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <f_mount+0x52>
 800b4d6:	2302      	movs	r3, #2
 800b4d8:	e033      	b.n	800b542 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00f      	beq.n	800b506 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	b2da      	uxtb	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	330c      	adds	r3, #12
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	4610      	mov	r0, r2
 800b4f8:	f000 fe51 	bl	800c19e <ff_cre_syncobj>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <f_mount+0x7e>
 800b502:	2302      	movs	r3, #2
 800b504:	e01d      	b.n	800b542 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	4910      	ldr	r1, [pc, #64]	; (800b54c <f_mount+0xc4>)
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d002      	beq.n	800b51c <f_mount+0x94>
 800b516:	79fb      	ldrb	r3, [r7, #7]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d001      	beq.n	800b520 <f_mount+0x98>
 800b51c:	2300      	movs	r3, #0
 800b51e:	e010      	b.n	800b542 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b520:	f107 010c 	add.w	r1, r7, #12
 800b524:	f107 0308 	add.w	r3, r7, #8
 800b528:	2200      	movs	r2, #0
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff fd10 	bl	800af50 <find_volume>
 800b530:	4603      	mov	r3, r0
 800b532:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	7dfa      	ldrb	r2, [r7, #23]
 800b538:	4611      	mov	r1, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe fbce 	bl	8009cdc <unlock_fs>
 800b540:	7dfb      	ldrb	r3, [r7, #23]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3720      	adds	r7, #32
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	2000083c 	.word	0x2000083c

0800b550 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b098      	sub	sp, #96	; 0x60
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	4613      	mov	r3, r2
 800b55c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <f_open+0x18>
 800b564:	2309      	movs	r3, #9
 800b566:	e1b4      	b.n	800b8d2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b568:	79fb      	ldrb	r3, [r7, #7]
 800b56a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b56e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b570:	79fa      	ldrb	r2, [r7, #7]
 800b572:	f107 0110 	add.w	r1, r7, #16
 800b576:	f107 0308 	add.w	r3, r7, #8
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff fce8 	bl	800af50 <find_volume>
 800b580:	4603      	mov	r3, r0
 800b582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f040 8191 	bne.w	800b8b2 <f_open+0x362>
		dj.obj.fs = fs;
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	f107 0314 	add.w	r3, r7, #20
 800b59a:	4611      	mov	r1, r2
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7ff fbcb 	bl	800ad38 <follow_path>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b5a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d11a      	bne.n	800b5e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b5b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b5b4:	b25b      	sxtb	r3, r3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	da03      	bge.n	800b5c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b5ba:	2306      	movs	r3, #6
 800b5bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5c0:	e011      	b.n	800b5e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5c2:	79fb      	ldrb	r3, [r7, #7]
 800b5c4:	f023 0301 	bic.w	r3, r3, #1
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	bf14      	ite	ne
 800b5cc:	2301      	movne	r3, #1
 800b5ce:	2300      	moveq	r3, #0
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	f107 0314 	add.w	r3, r7, #20
 800b5d8:	4611      	mov	r1, r2
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fe fb9a 	bl	8009d14 <chk_lock>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b5e6:	79fb      	ldrb	r3, [r7, #7]
 800b5e8:	f003 031c 	and.w	r3, r3, #28
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d07f      	beq.n	800b6f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b5f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d017      	beq.n	800b628 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b5f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5fc:	2b04      	cmp	r3, #4
 800b5fe:	d10e      	bne.n	800b61e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b600:	f7fe fbe4 	bl	8009dcc <enq_lock>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d006      	beq.n	800b618 <f_open+0xc8>
 800b60a:	f107 0314 	add.w	r3, r7, #20
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff facb 	bl	800abaa <dir_register>
 800b614:	4603      	mov	r3, r0
 800b616:	e000      	b.n	800b61a <f_open+0xca>
 800b618:	2312      	movs	r3, #18
 800b61a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b61e:	79fb      	ldrb	r3, [r7, #7]
 800b620:	f043 0308 	orr.w	r3, r3, #8
 800b624:	71fb      	strb	r3, [r7, #7]
 800b626:	e010      	b.n	800b64a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b628:	7ebb      	ldrb	r3, [r7, #26]
 800b62a:	f003 0311 	and.w	r3, r3, #17
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <f_open+0xea>
					res = FR_DENIED;
 800b632:	2307      	movs	r3, #7
 800b634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b638:	e007      	b.n	800b64a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b63a:	79fb      	ldrb	r3, [r7, #7]
 800b63c:	f003 0304 	and.w	r3, r3, #4
 800b640:	2b00      	cmp	r3, #0
 800b642:	d002      	beq.n	800b64a <f_open+0xfa>
 800b644:	2308      	movs	r3, #8
 800b646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b64a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d168      	bne.n	800b724 <f_open+0x1d4>
 800b652:	79fb      	ldrb	r3, [r7, #7]
 800b654:	f003 0308 	and.w	r3, r3, #8
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d063      	beq.n	800b724 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b65c:	f7fd fc4c 	bl	8008ef8 <get_fattime>
 800b660:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b664:	330e      	adds	r3, #14
 800b666:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fe fa77 	bl	8009b5c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b670:	3316      	adds	r3, #22
 800b672:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b674:	4618      	mov	r0, r3
 800b676:	f7fe fa71 	bl	8009b5c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b67c:	330b      	adds	r3, #11
 800b67e:	2220      	movs	r2, #32
 800b680:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b686:	4611      	mov	r1, r2
 800b688:	4618      	mov	r0, r3
 800b68a:	f7ff f9fa 	bl	800aa82 <ld_clust>
 800b68e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b694:	2200      	movs	r2, #0
 800b696:	4618      	mov	r0, r3
 800b698:	f7ff fa12 	bl	800aac0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69e:	331c      	adds	r3, #28
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fe fa5a 	bl	8009b5c <st_dword>
					fs->wflag = 1;
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b6ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d037      	beq.n	800b724 <f_open+0x1d4>
						dw = fs->winsect;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b6ba:	f107 0314 	add.w	r3, r7, #20
 800b6be:	2200      	movs	r2, #0
 800b6c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7fe ff25 	bl	800a512 <remove_chain>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b6ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d126      	bne.n	800b724 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe fcca 	bl	800a074 <move_window>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6ea:	3a01      	subs	r2, #1
 800b6ec:	611a      	str	r2, [r3, #16]
 800b6ee:	e019      	b.n	800b724 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b6f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d115      	bne.n	800b724 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b6f8:	7ebb      	ldrb	r3, [r7, #26]
 800b6fa:	f003 0310 	and.w	r3, r3, #16
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <f_open+0x1ba>
					res = FR_NO_FILE;
 800b702:	2304      	movs	r3, #4
 800b704:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b708:	e00c      	b.n	800b724 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b70a:	79fb      	ldrb	r3, [r7, #7]
 800b70c:	f003 0302 	and.w	r3, r3, #2
 800b710:	2b00      	cmp	r3, #0
 800b712:	d007      	beq.n	800b724 <f_open+0x1d4>
 800b714:	7ebb      	ldrb	r3, [r7, #26]
 800b716:	f003 0301 	and.w	r3, r3, #1
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d002      	beq.n	800b724 <f_open+0x1d4>
						res = FR_DENIED;
 800b71e:	2307      	movs	r3, #7
 800b720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d128      	bne.n	800b77e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	f003 0308 	and.w	r3, r3, #8
 800b732:	2b00      	cmp	r3, #0
 800b734:	d003      	beq.n	800b73e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b736:	79fb      	ldrb	r3, [r7, #7]
 800b738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b73c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b74c:	79fb      	ldrb	r3, [r7, #7]
 800b74e:	f023 0301 	bic.w	r3, r3, #1
 800b752:	2b00      	cmp	r3, #0
 800b754:	bf14      	ite	ne
 800b756:	2301      	movne	r3, #1
 800b758:	2300      	moveq	r3, #0
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	461a      	mov	r2, r3
 800b75e:	f107 0314 	add.w	r3, r7, #20
 800b762:	4611      	mov	r1, r2
 800b764:	4618      	mov	r0, r3
 800b766:	f7fe fb53 	bl	8009e10 <inc_lock>
 800b76a:	4602      	mov	r2, r0
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d102      	bne.n	800b77e <f_open+0x22e>
 800b778:	2302      	movs	r3, #2
 800b77a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b77e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b782:	2b00      	cmp	r3, #0
 800b784:	f040 8095 	bne.w	800b8b2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b78c:	4611      	mov	r1, r2
 800b78e:	4618      	mov	r0, r3
 800b790:	f7ff f977 	bl	800aa82 <ld_clust>
 800b794:	4602      	mov	r2, r0
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b79c:	331c      	adds	r3, #28
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe f99e 	bl	8009ae0 <ld_dword>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	88da      	ldrh	r2, [r3, #6]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	79fa      	ldrb	r2, [r7, #7]
 800b7c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	3330      	adds	r3, #48	; 0x30
 800b7da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7de:	2100      	movs	r1, #0
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fe fa08 	bl	8009bf6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b7e6:	79fb      	ldrb	r3, [r7, #7]
 800b7e8:	f003 0320 	and.w	r3, r3, #32
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d060      	beq.n	800b8b2 <f_open+0x362>
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d05c      	beq.n	800b8b2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	68da      	ldr	r2, [r3, #12]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	895b      	ldrh	r3, [r3, #10]
 800b804:	025b      	lsls	r3, r3, #9
 800b806:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	657b      	str	r3, [r7, #84]	; 0x54
 800b814:	e016      	b.n	800b844 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fe fce5 	bl	800a1ea <get_fat>
 800b820:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b824:	2b01      	cmp	r3, #1
 800b826:	d802      	bhi.n	800b82e <f_open+0x2de>
 800b828:	2302      	movs	r3, #2
 800b82a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b82e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b834:	d102      	bne.n	800b83c <f_open+0x2ec>
 800b836:	2301      	movs	r3, #1
 800b838:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b83c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b83e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	657b      	str	r3, [r7, #84]	; 0x54
 800b844:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d103      	bne.n	800b854 <f_open+0x304>
 800b84c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b84e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b850:	429a      	cmp	r2, r3
 800b852:	d8e0      	bhi.n	800b816 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b858:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b85a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d127      	bne.n	800b8b2 <f_open+0x362>
 800b862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d022      	beq.n	800b8b2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b870:	4618      	mov	r0, r3
 800b872:	f7fe fc9b 	bl	800a1ac <clust2sect>
 800b876:	6478      	str	r0, [r7, #68]	; 0x44
 800b878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d103      	bne.n	800b886 <f_open+0x336>
						res = FR_INT_ERR;
 800b87e:	2302      	movs	r3, #2
 800b880:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b884:	e015      	b.n	800b8b2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b888:	0a5a      	lsrs	r2, r3, #9
 800b88a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b88c:	441a      	add	r2, r3
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	7858      	ldrb	r0, [r3, #1]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6a1a      	ldr	r2, [r3, #32]
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	f7fe f8a7 	bl	80099f4 <disk_read>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d002      	beq.n	800b8b2 <f_open+0x362>
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b8b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d002      	beq.n	800b8c0 <f_open+0x370>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fe fa07 	bl	8009cdc <unlock_fs>
 800b8ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3760      	adds	r7, #96	; 0x60
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b08e      	sub	sp, #56	; 0x38
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	607a      	str	r2, [r7, #4]
 800b8e6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f107 0214 	add.w	r2, r7, #20
 800b8f8:	4611      	mov	r1, r2
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7ff fd7c 	bl	800b3f8 <validate>
 800b900:	4603      	mov	r3, r0
 800b902:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b906:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d107      	bne.n	800b91e <f_read+0x44>
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	7d5b      	ldrb	r3, [r3, #21]
 800b912:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b916:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d009      	beq.n	800b932 <f_read+0x58>
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b924:	4611      	mov	r1, r2
 800b926:	4618      	mov	r0, r3
 800b928:	f7fe f9d8 	bl	8009cdc <unlock_fs>
 800b92c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b930:	e13d      	b.n	800bbae <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	7d1b      	ldrb	r3, [r3, #20]
 800b936:	f003 0301 	and.w	r3, r3, #1
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d106      	bne.n	800b94c <f_read+0x72>
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2107      	movs	r1, #7
 800b942:	4618      	mov	r0, r3
 800b944:	f7fe f9ca 	bl	8009cdc <unlock_fs>
 800b948:	2307      	movs	r3, #7
 800b94a:	e130      	b.n	800bbae <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	68da      	ldr	r2, [r3, #12]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	f240 811c 	bls.w	800bb9a <f_read+0x2c0>
 800b962:	6a3b      	ldr	r3, [r7, #32]
 800b964:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b966:	e118      	b.n	800bb9a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b970:	2b00      	cmp	r3, #0
 800b972:	f040 80e4 	bne.w	800bb3e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	0a5b      	lsrs	r3, r3, #9
 800b97c:	697a      	ldr	r2, [r7, #20]
 800b97e:	8952      	ldrh	r2, [r2, #10]
 800b980:	3a01      	subs	r2, #1
 800b982:	4013      	ands	r3, r2
 800b984:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d139      	bne.n	800ba00 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d103      	bne.n	800b99c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	633b      	str	r3, [r7, #48]	; 0x30
 800b99a:	e013      	b.n	800b9c4 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d007      	beq.n	800b9b4 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f7fe feae 	bl	800a70c <clmt_clust>
 800b9b0:	6338      	str	r0, [r7, #48]	; 0x30
 800b9b2:	e007      	b.n	800b9c4 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	69db      	ldr	r3, [r3, #28]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	4610      	mov	r0, r2
 800b9be:	f7fe fc14 	bl	800a1ea <get_fat>
 800b9c2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d809      	bhi.n	800b9de <f_read+0x104>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2202      	movs	r2, #2
 800b9ce:	755a      	strb	r2, [r3, #21]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	2102      	movs	r1, #2
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe f981 	bl	8009cdc <unlock_fs>
 800b9da:	2302      	movs	r3, #2
 800b9dc:	e0e7      	b.n	800bbae <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e4:	d109      	bne.n	800b9fa <f_read+0x120>
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	755a      	strb	r2, [r3, #21]
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	2101      	movs	r1, #1
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7fe f973 	bl	8009cdc <unlock_fs>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e0d9      	b.n	800bbae <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9fe:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	4619      	mov	r1, r3
 800ba08:	4610      	mov	r0, r2
 800ba0a:	f7fe fbcf 	bl	800a1ac <clust2sect>
 800ba0e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d109      	bne.n	800ba2a <f_read+0x150>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2202      	movs	r2, #2
 800ba1a:	755a      	strb	r2, [r3, #21]
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	2102      	movs	r1, #2
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fe f95b 	bl	8009cdc <unlock_fs>
 800ba26:	2302      	movs	r3, #2
 800ba28:	e0c1      	b.n	800bbae <f_read+0x2d4>
			sect += csect;
 800ba2a:	69ba      	ldr	r2, [r7, #24]
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	4413      	add	r3, r2
 800ba30:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	0a5b      	lsrs	r3, r3, #9
 800ba36:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ba38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d03e      	beq.n	800babc <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ba3e:	69fa      	ldr	r2, [r7, #28]
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	4413      	add	r3, r2
 800ba44:	697a      	ldr	r2, [r7, #20]
 800ba46:	8952      	ldrh	r2, [r2, #10]
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d905      	bls.n	800ba58 <f_read+0x17e>
					cc = fs->csize - csect;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	895b      	ldrh	r3, [r3, #10]
 800ba50:	461a      	mov	r2, r3
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	7858      	ldrb	r0, [r3, #1]
 800ba5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5e:	69ba      	ldr	r2, [r7, #24]
 800ba60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba62:	f7fd ffc7 	bl	80099f4 <disk_read>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d009      	beq.n	800ba80 <f_read+0x1a6>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	755a      	strb	r2, [r3, #21]
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	2101      	movs	r1, #1
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fe f930 	bl	8009cdc <unlock_fs>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e096      	b.n	800bbae <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	7d1b      	ldrb	r3, [r3, #20]
 800ba84:	b25b      	sxtb	r3, r3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	da14      	bge.n	800bab4 <f_read+0x1da>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6a1a      	ldr	r2, [r3, #32]
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d90d      	bls.n	800bab4 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6a1a      	ldr	r2, [r3, #32]
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	1ad3      	subs	r3, r2, r3
 800baa0:	025b      	lsls	r3, r3, #9
 800baa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baa4:	18d0      	adds	r0, r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3330      	adds	r3, #48	; 0x30
 800baaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baae:	4619      	mov	r1, r3
 800bab0:	f7fe f880 	bl	8009bb4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab6:	025b      	lsls	r3, r3, #9
 800bab8:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800baba:	e05a      	b.n	800bb72 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6a1b      	ldr	r3, [r3, #32]
 800bac0:	69ba      	ldr	r2, [r7, #24]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d038      	beq.n	800bb38 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	7d1b      	ldrb	r3, [r3, #20]
 800baca:	b25b      	sxtb	r3, r3
 800bacc:	2b00      	cmp	r3, #0
 800bace:	da1d      	bge.n	800bb0c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	7858      	ldrb	r0, [r3, #1]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6a1a      	ldr	r2, [r3, #32]
 800bade:	2301      	movs	r3, #1
 800bae0:	f7fd ffa8 	bl	8009a34 <disk_write>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d009      	beq.n	800bafe <f_read+0x224>
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2201      	movs	r2, #1
 800baee:	755a      	strb	r2, [r3, #21]
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	2101      	movs	r1, #1
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe f8f1 	bl	8009cdc <unlock_fs>
 800bafa:	2301      	movs	r3, #1
 800bafc:	e057      	b.n	800bbae <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	7d1b      	ldrb	r3, [r3, #20]
 800bb02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	7858      	ldrb	r0, [r3, #1]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb16:	2301      	movs	r3, #1
 800bb18:	69ba      	ldr	r2, [r7, #24]
 800bb1a:	f7fd ff6b 	bl	80099f4 <disk_read>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d009      	beq.n	800bb38 <f_read+0x25e>
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2201      	movs	r2, #1
 800bb28:	755a      	strb	r2, [r3, #21]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2101      	movs	r1, #1
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fe f8d4 	bl	8009cdc <unlock_fs>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e03a      	b.n	800bbae <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	69ba      	ldr	r2, [r7, #24]
 800bb3c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb46:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bb4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d901      	bls.n	800bb58 <f_read+0x27e>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	699b      	ldr	r3, [r3, #24]
 800bb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb66:	4413      	add	r3, r2
 800bb68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb6e:	f7fe f821 	bl	8009bb4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bb72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb76:	4413      	add	r3, r2
 800bb78:	627b      	str	r3, [r7, #36]	; 0x24
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	699a      	ldr	r2, [r3, #24]
 800bb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb80:	441a      	add	r2, r3
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	619a      	str	r2, [r3, #24]
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	441a      	add	r2, r3
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	601a      	str	r2, [r3, #0]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f47f aee3 	bne.w	800b968 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2100      	movs	r1, #0
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe f898 	bl	8009cdc <unlock_fs>
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3738      	adds	r7, #56	; 0x38
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b08c      	sub	sp, #48	; 0x30
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	60f8      	str	r0, [r7, #12]
 800bbbe:	60b9      	str	r1, [r7, #8]
 800bbc0:	607a      	str	r2, [r7, #4]
 800bbc2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f107 0210 	add.w	r2, r7, #16
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7ff fc0e 	bl	800b3f8 <validate>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bbe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d107      	bne.n	800bbfa <f_write+0x44>
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	7d5b      	ldrb	r3, [r3, #21]
 800bbee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bbf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d009      	beq.n	800bc0e <f_write+0x58>
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bc00:	4611      	mov	r1, r2
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7fe f86a 	bl	8009cdc <unlock_fs>
 800bc08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc0c:	e173      	b.n	800bef6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	7d1b      	ldrb	r3, [r3, #20]
 800bc12:	f003 0302 	and.w	r3, r3, #2
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d106      	bne.n	800bc28 <f_write+0x72>
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	2107      	movs	r1, #7
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe f85c 	bl	8009cdc <unlock_fs>
 800bc24:	2307      	movs	r3, #7
 800bc26:	e166      	b.n	800bef6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	699a      	ldr	r2, [r3, #24]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	441a      	add	r2, r3
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	f080 814b 	bcs.w	800bed0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	699b      	ldr	r3, [r3, #24]
 800bc3e:	43db      	mvns	r3, r3
 800bc40:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bc42:	e145      	b.n	800bed0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	699b      	ldr	r3, [r3, #24]
 800bc48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f040 8101 	bne.w	800be54 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	0a5b      	lsrs	r3, r3, #9
 800bc58:	693a      	ldr	r2, [r7, #16]
 800bc5a:	8952      	ldrh	r2, [r2, #10]
 800bc5c:	3a01      	subs	r2, #1
 800bc5e:	4013      	ands	r3, r2
 800bc60:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d14d      	bne.n	800bd04 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	699b      	ldr	r3, [r3, #24]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10c      	bne.n	800bc8a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d11a      	bne.n	800bcb2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2100      	movs	r1, #0
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7fe fcab 	bl	800a5dc <create_chain>
 800bc86:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc88:	e013      	b.n	800bcb2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d007      	beq.n	800bca2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	4619      	mov	r1, r3
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f7fe fd37 	bl	800a70c <clmt_clust>
 800bc9e:	62b8      	str	r0, [r7, #40]	; 0x28
 800bca0:	e007      	b.n	800bcb2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	69db      	ldr	r3, [r3, #28]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	4610      	mov	r0, r2
 800bcac:	f7fe fc96 	bl	800a5dc <create_chain>
 800bcb0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 8110 	beq.w	800beda <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d109      	bne.n	800bcd4 <f_write+0x11e>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	755a      	strb	r2, [r3, #21]
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	2102      	movs	r1, #2
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe f806 	bl	8009cdc <unlock_fs>
 800bcd0:	2302      	movs	r3, #2
 800bcd2:	e110      	b.n	800bef6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcda:	d109      	bne.n	800bcf0 <f_write+0x13a>
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2201      	movs	r2, #1
 800bce0:	755a      	strb	r2, [r3, #21]
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	2101      	movs	r1, #1
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fd fff8 	bl	8009cdc <unlock_fs>
 800bcec:	2301      	movs	r3, #1
 800bcee:	e102      	b.n	800bef6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcf4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d102      	bne.n	800bd04 <f_write+0x14e>
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd02:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	7d1b      	ldrb	r3, [r3, #20]
 800bd08:	b25b      	sxtb	r3, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	da1d      	bge.n	800bd4a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	7858      	ldrb	r0, [r3, #1]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6a1a      	ldr	r2, [r3, #32]
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	f7fd fe89 	bl	8009a34 <disk_write>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d009      	beq.n	800bd3c <f_write+0x186>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	755a      	strb	r2, [r3, #21]
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	2101      	movs	r1, #1
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fd ffd2 	bl	8009cdc <unlock_fs>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e0dc      	b.n	800bef6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	7d1b      	ldrb	r3, [r3, #20]
 800bd40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bd4a:	693a      	ldr	r2, [r7, #16]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	69db      	ldr	r3, [r3, #28]
 800bd50:	4619      	mov	r1, r3
 800bd52:	4610      	mov	r0, r2
 800bd54:	f7fe fa2a 	bl	800a1ac <clust2sect>
 800bd58:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d109      	bne.n	800bd74 <f_write+0x1be>
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2202      	movs	r2, #2
 800bd64:	755a      	strb	r2, [r3, #21]
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	2102      	movs	r1, #2
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fd ffb6 	bl	8009cdc <unlock_fs>
 800bd70:	2302      	movs	r3, #2
 800bd72:	e0c0      	b.n	800bef6 <f_write+0x340>
			sect += csect;
 800bd74:	697a      	ldr	r2, [r7, #20]
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	4413      	add	r3, r2
 800bd7a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	0a5b      	lsrs	r3, r3, #9
 800bd80:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bd82:	6a3b      	ldr	r3, [r7, #32]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d041      	beq.n	800be0c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bd88:	69ba      	ldr	r2, [r7, #24]
 800bd8a:	6a3b      	ldr	r3, [r7, #32]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	693a      	ldr	r2, [r7, #16]
 800bd90:	8952      	ldrh	r2, [r2, #10]
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d905      	bls.n	800bda2 <f_write+0x1ec>
					cc = fs->csize - csect;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	895b      	ldrh	r3, [r3, #10]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	7858      	ldrb	r0, [r3, #1]
 800bda6:	6a3b      	ldr	r3, [r7, #32]
 800bda8:	697a      	ldr	r2, [r7, #20]
 800bdaa:	69f9      	ldr	r1, [r7, #28]
 800bdac:	f7fd fe42 	bl	8009a34 <disk_write>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d009      	beq.n	800bdca <f_write+0x214>
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	755a      	strb	r2, [r3, #21]
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fd ff8b 	bl	8009cdc <unlock_fs>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e095      	b.n	800bef6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6a1a      	ldr	r2, [r3, #32]
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	6a3a      	ldr	r2, [r7, #32]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d915      	bls.n	800be04 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6a1a      	ldr	r2, [r3, #32]
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	025b      	lsls	r3, r3, #9
 800bde8:	69fa      	ldr	r2, [r7, #28]
 800bdea:	4413      	add	r3, r2
 800bdec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	f7fd fedf 	bl	8009bb4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	7d1b      	ldrb	r3, [r3, #20]
 800bdfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdfe:	b2da      	uxtb	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800be04:	6a3b      	ldr	r3, [r7, #32]
 800be06:	025b      	lsls	r3, r3, #9
 800be08:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800be0a:	e044      	b.n	800be96 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6a1b      	ldr	r3, [r3, #32]
 800be10:	697a      	ldr	r2, [r7, #20]
 800be12:	429a      	cmp	r2, r3
 800be14:	d01b      	beq.n	800be4e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	699a      	ldr	r2, [r3, #24]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be1e:	429a      	cmp	r2, r3
 800be20:	d215      	bcs.n	800be4e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	7858      	ldrb	r0, [r3, #1]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be2c:	2301      	movs	r3, #1
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	f7fd fde0 	bl	80099f4 <disk_read>
 800be34:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800be36:	2b00      	cmp	r3, #0
 800be38:	d009      	beq.n	800be4e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2201      	movs	r2, #1
 800be3e:	755a      	strb	r2, [r3, #21]
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	2101      	movs	r1, #1
 800be44:	4618      	mov	r0, r3
 800be46:	f7fd ff49 	bl	8009cdc <unlock_fs>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e053      	b.n	800bef6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	699b      	ldr	r3, [r3, #24]
 800be58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be5c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800be60:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800be62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	429a      	cmp	r2, r3
 800be68:	d901      	bls.n	800be6e <f_write+0x2b8>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be7c:	4413      	add	r3, r2
 800be7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be80:	69f9      	ldr	r1, [r7, #28]
 800be82:	4618      	mov	r0, r3
 800be84:	f7fd fe96 	bl	8009bb4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	7d1b      	ldrb	r3, [r3, #20]
 800be8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be90:	b2da      	uxtb	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800be96:	69fa      	ldr	r2, [r7, #28]
 800be98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9a:	4413      	add	r3, r2
 800be9c:	61fb      	str	r3, [r7, #28]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	699a      	ldr	r2, [r3, #24]
 800bea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea4:	441a      	add	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	619a      	str	r2, [r3, #24]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	68da      	ldr	r2, [r3, #12]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	699b      	ldr	r3, [r3, #24]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	bf38      	it	cc
 800beb6:	461a      	movcc	r2, r3
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	60da      	str	r2, [r3, #12]
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	441a      	add	r2, r3
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	1ad3      	subs	r3, r2, r3
 800bece:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f47f aeb6 	bne.w	800bc44 <f_write+0x8e>
 800bed8:	e000      	b.n	800bedc <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800beda:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	7d1b      	ldrb	r3, [r3, #20]
 800bee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	2100      	movs	r1, #0
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fd fef4 	bl	8009cdc <unlock_fs>
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3730      	adds	r7, #48	; 0x30
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b086      	sub	sp, #24
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f107 0208 	add.w	r2, r7, #8
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7ff fa72 	bl	800b3f8 <validate>
 800bf14:	4603      	mov	r3, r0
 800bf16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf18:	7dfb      	ldrb	r3, [r7, #23]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d16d      	bne.n	800bffa <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	7d1b      	ldrb	r3, [r3, #20]
 800bf22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d067      	beq.n	800bffa <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	7d1b      	ldrb	r3, [r3, #20]
 800bf2e:	b25b      	sxtb	r3, r3
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	da1a      	bge.n	800bf6a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	7858      	ldrb	r0, [r3, #1]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a1a      	ldr	r2, [r3, #32]
 800bf42:	2301      	movs	r3, #1
 800bf44:	f7fd fd76 	bl	8009a34 <disk_write>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d006      	beq.n	800bf5c <f_sync+0x5e>
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	2101      	movs	r1, #1
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fd fec2 	bl	8009cdc <unlock_fs>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e055      	b.n	800c008 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	7d1b      	ldrb	r3, [r3, #20]
 800bf60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bf6a:	f7fc ffc5 	bl	8008ef8 <get_fattime>
 800bf6e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf76:	4619      	mov	r1, r3
 800bf78:	4610      	mov	r0, r2
 800bf7a:	f7fe f87b 	bl	800a074 <move_window>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bf82:	7dfb      	ldrb	r3, [r7, #23]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d138      	bne.n	800bffa <f_sync+0xfc>
					dir = fp->dir_ptr;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	330b      	adds	r3, #11
 800bf92:	781a      	ldrb	r2, [r3, #0]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	330b      	adds	r3, #11
 800bf98:	f042 0220 	orr.w	r2, r2, #32
 800bf9c:	b2d2      	uxtb	r2, r2
 800bf9e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6818      	ldr	r0, [r3, #0]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	68f9      	ldr	r1, [r7, #12]
 800bfac:	f7fe fd88 	bl	800aac0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f103 021c 	add.w	r2, r3, #28
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	4610      	mov	r0, r2
 800bfbe:	f7fd fdcd 	bl	8009b5c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3316      	adds	r3, #22
 800bfc6:	6939      	ldr	r1, [r7, #16]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fd fdc7 	bl	8009b5c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3312      	adds	r3, #18
 800bfd2:	2100      	movs	r1, #0
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7fd fda6 	bl	8009b26 <st_word>
					fs->wflag = 1;
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fe f874 	bl	800a0d0 <sync_fs>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	7d1b      	ldrb	r3, [r3, #20]
 800bff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bff4:	b2da      	uxtb	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	7dfa      	ldrb	r2, [r7, #23]
 800bffe:	4611      	mov	r1, r2
 800c000:	4618      	mov	r0, r3
 800c002:	f7fd fe6b 	bl	8009cdc <unlock_fs>
 800c006:	7dfb      	ldrb	r3, [r7, #23]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3718      	adds	r7, #24
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7ff ff70 	bl	800befe <f_sync>
 800c01e:	4603      	mov	r3, r0
 800c020:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c022:	7bfb      	ldrb	r3, [r7, #15]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d11d      	bne.n	800c064 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f107 0208 	add.w	r2, r7, #8
 800c02e:	4611      	mov	r1, r2
 800c030:	4618      	mov	r0, r3
 800c032:	f7ff f9e1 	bl	800b3f8 <validate>
 800c036:	4603      	mov	r3, r0
 800c038:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c03a:	7bfb      	ldrb	r3, [r7, #15]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d111      	bne.n	800c064 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	4618      	mov	r0, r3
 800c046:	f7fd ff71 	bl	8009f2c <dec_lock>
 800c04a:	4603      	mov	r3, r0
 800c04c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c04e:	7bfb      	ldrb	r3, [r7, #15]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d102      	bne.n	800c05a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	2100      	movs	r1, #0
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fd fe3c 	bl	8009cdc <unlock_fs>
#endif
		}
	}
	return res;
 800c064:	7bfb      	ldrb	r3, [r7, #15]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b088      	sub	sp, #32
 800c072:	af00      	add	r7, sp, #0
 800c074:	60f8      	str	r0, [r7, #12]
 800c076:	60b9      	str	r1, [r7, #8]
 800c078:	607a      	str	r2, [r7, #4]
	int n = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c082:	e01b      	b.n	800c0bc <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800c084:	f107 0310 	add.w	r3, r7, #16
 800c088:	f107 0114 	add.w	r1, r7, #20
 800c08c:	2201      	movs	r2, #1
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7ff fc23 	bl	800b8da <f_read>
		if (rc != 1) break;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	2b01      	cmp	r3, #1
 800c098:	d116      	bne.n	800c0c8 <f_gets+0x5a>
		c = s[0];
 800c09a:	7d3b      	ldrb	r3, [r7, #20]
 800c09c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c09e:	7dfb      	ldrb	r3, [r7, #23]
 800c0a0:	2b0d      	cmp	r3, #13
 800c0a2:	d100      	bne.n	800c0a6 <f_gets+0x38>
 800c0a4:	e00a      	b.n	800c0bc <f_gets+0x4e>
		*p++ = c;
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	1c5a      	adds	r2, r3, #1
 800c0aa:	61ba      	str	r2, [r7, #24]
 800c0ac:	7dfa      	ldrb	r2, [r7, #23]
 800c0ae:	701a      	strb	r2, [r3, #0]
		n++;
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
 800c0b8:	2b0a      	cmp	r3, #10
 800c0ba:	d007      	beq.n	800c0cc <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	69fa      	ldr	r2, [r7, #28]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	dbde      	blt.n	800c084 <f_gets+0x16>
 800c0c6:	e002      	b.n	800c0ce <f_gets+0x60>
		if (rc != 1) break;
 800c0c8:	bf00      	nop
 800c0ca:	e000      	b.n	800c0ce <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800c0cc:	bf00      	nop
	}
	*p = 0;
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <f_gets+0x70>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	e000      	b.n	800c0e0 <f_gets+0x72>
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3720      	adds	r7, #32
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b087      	sub	sp, #28
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c0fe:	4b1f      	ldr	r3, [pc, #124]	; (800c17c <FATFS_LinkDriverEx+0x94>)
 800c100:	7a5b      	ldrb	r3, [r3, #9]
 800c102:	b2db      	uxtb	r3, r3
 800c104:	2b00      	cmp	r3, #0
 800c106:	d131      	bne.n	800c16c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c108:	4b1c      	ldr	r3, [pc, #112]	; (800c17c <FATFS_LinkDriverEx+0x94>)
 800c10a:	7a5b      	ldrb	r3, [r3, #9]
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	461a      	mov	r2, r3
 800c110:	4b1a      	ldr	r3, [pc, #104]	; (800c17c <FATFS_LinkDriverEx+0x94>)
 800c112:	2100      	movs	r1, #0
 800c114:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c116:	4b19      	ldr	r3, [pc, #100]	; (800c17c <FATFS_LinkDriverEx+0x94>)
 800c118:	7a5b      	ldrb	r3, [r3, #9]
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	4a17      	ldr	r2, [pc, #92]	; (800c17c <FATFS_LinkDriverEx+0x94>)
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4413      	add	r3, r2
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c126:	4b15      	ldr	r3, [pc, #84]	; (800c17c <FATFS_LinkDriverEx+0x94>)
 800c128:	7a5b      	ldrb	r3, [r3, #9]
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	461a      	mov	r2, r3
 800c12e:	4b13      	ldr	r3, [pc, #76]	; (800c17c <FATFS_LinkDriverEx+0x94>)
 800c130:	4413      	add	r3, r2
 800c132:	79fa      	ldrb	r2, [r7, #7]
 800c134:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c136:	4b11      	ldr	r3, [pc, #68]	; (800c17c <FATFS_LinkDriverEx+0x94>)
 800c138:	7a5b      	ldrb	r3, [r3, #9]
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	1c5a      	adds	r2, r3, #1
 800c13e:	b2d1      	uxtb	r1, r2
 800c140:	4a0e      	ldr	r2, [pc, #56]	; (800c17c <FATFS_LinkDriverEx+0x94>)
 800c142:	7251      	strb	r1, [r2, #9]
 800c144:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c146:	7dbb      	ldrb	r3, [r7, #22]
 800c148:	3330      	adds	r3, #48	; 0x30
 800c14a:	b2da      	uxtb	r2, r3
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	3301      	adds	r3, #1
 800c154:	223a      	movs	r2, #58	; 0x3a
 800c156:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	3302      	adds	r3, #2
 800c15c:	222f      	movs	r2, #47	; 0x2f
 800c15e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	3303      	adds	r3, #3
 800c164:	2200      	movs	r2, #0
 800c166:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c16c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	371c      	adds	r7, #28
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	20000864 	.word	0x20000864

0800c180 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c18a:	2200      	movs	r2, #0
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7ff ffaa 	bl	800c0e8 <FATFS_LinkDriverEx>
 800c194:	4603      	mov	r3, r0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3708      	adds	r7, #8
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	6039      	str	r1, [r7, #0]
 800c1a8:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	2101      	movs	r1, #1
 800c1ae:	2001      	movs	r0, #1
 800c1b0:	f000 f967 	bl	800c482 <osSemaphoreNew>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	bf14      	ite	ne
 800c1c2:	2301      	movne	r3, #1
 800c1c4:	2300      	moveq	r3, #0
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	60fb      	str	r3, [r7, #12]

    return ret;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3710      	adds	r7, #16
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fa6f 	bl	800c6c0 <osSemaphoreDelete>
#endif
    return 1;
 800c1e2:	2301      	movs	r3, #1
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800c1f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 f9c9 	bl	800c594 <osSemaphoreAcquire>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d101      	bne.n	800c20c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800c208:	2301      	movs	r3, #1
 800c20a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c20c:	68fb      	ldr	r3, [r7, #12]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b082      	sub	sp, #8
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fa0a 	bl	800c638 <osSemaphoreRelease>
#endif
}
 800c224:	bf00      	nop
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <__NVIC_SetPriority>:
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	6039      	str	r1, [r7, #0]
 800c236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	db0a      	blt.n	800c256 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	b2da      	uxtb	r2, r3
 800c244:	490c      	ldr	r1, [pc, #48]	; (800c278 <__NVIC_SetPriority+0x4c>)
 800c246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c24a:	0112      	lsls	r2, r2, #4
 800c24c:	b2d2      	uxtb	r2, r2
 800c24e:	440b      	add	r3, r1
 800c250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c254:	e00a      	b.n	800c26c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	b2da      	uxtb	r2, r3
 800c25a:	4908      	ldr	r1, [pc, #32]	; (800c27c <__NVIC_SetPriority+0x50>)
 800c25c:	79fb      	ldrb	r3, [r7, #7]
 800c25e:	f003 030f 	and.w	r3, r3, #15
 800c262:	3b04      	subs	r3, #4
 800c264:	0112      	lsls	r2, r2, #4
 800c266:	b2d2      	uxtb	r2, r2
 800c268:	440b      	add	r3, r1
 800c26a:	761a      	strb	r2, [r3, #24]
}
 800c26c:	bf00      	nop
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr
 800c278:	e000e100 	.word	0xe000e100
 800c27c:	e000ed00 	.word	0xe000ed00

0800c280 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c280:	b580      	push	{r7, lr}
 800c282:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c284:	2100      	movs	r1, #0
 800c286:	f06f 0004 	mvn.w	r0, #4
 800c28a:	f7ff ffcf 	bl	800c22c <__NVIC_SetPriority>
#endif
}
 800c28e:	bf00      	nop
 800c290:	bd80      	pop	{r7, pc}
	...

0800c294 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c29a:	f3ef 8305 	mrs	r3, IPSR
 800c29e:	603b      	str	r3, [r7, #0]
  return(result);
 800c2a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d003      	beq.n	800c2ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c2a6:	f06f 0305 	mvn.w	r3, #5
 800c2aa:	607b      	str	r3, [r7, #4]
 800c2ac:	e00c      	b.n	800c2c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c2ae:	4b0a      	ldr	r3, [pc, #40]	; (800c2d8 <osKernelInitialize+0x44>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d105      	bne.n	800c2c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c2b6:	4b08      	ldr	r3, [pc, #32]	; (800c2d8 <osKernelInitialize+0x44>)
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	607b      	str	r3, [r7, #4]
 800c2c0:	e002      	b.n	800c2c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2c8:	687b      	ldr	r3, [r7, #4]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	370c      	adds	r7, #12
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	20000870 	.word	0x20000870

0800c2dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2e2:	f3ef 8305 	mrs	r3, IPSR
 800c2e6:	603b      	str	r3, [r7, #0]
  return(result);
 800c2e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c2ee:	f06f 0305 	mvn.w	r3, #5
 800c2f2:	607b      	str	r3, [r7, #4]
 800c2f4:	e010      	b.n	800c318 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c2f6:	4b0b      	ldr	r3, [pc, #44]	; (800c324 <osKernelStart+0x48>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d109      	bne.n	800c312 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c2fe:	f7ff ffbf 	bl	800c280 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c302:	4b08      	ldr	r3, [pc, #32]	; (800c324 <osKernelStart+0x48>)
 800c304:	2202      	movs	r2, #2
 800c306:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c308:	f001 fcca 	bl	800dca0 <vTaskStartScheduler>
      stat = osOK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	607b      	str	r3, [r7, #4]
 800c310:	e002      	b.n	800c318 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c312:	f04f 33ff 	mov.w	r3, #4294967295
 800c316:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c318:	687b      	ldr	r3, [r7, #4]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	20000870 	.word	0x20000870

0800c328 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08e      	sub	sp, #56	; 0x38
 800c32c:	af04      	add	r7, sp, #16
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c334:	2300      	movs	r3, #0
 800c336:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c338:	f3ef 8305 	mrs	r3, IPSR
 800c33c:	617b      	str	r3, [r7, #20]
  return(result);
 800c33e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c340:	2b00      	cmp	r3, #0
 800c342:	d17e      	bne.n	800c442 <osThreadNew+0x11a>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d07b      	beq.n	800c442 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c34a:	2380      	movs	r3, #128	; 0x80
 800c34c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c34e:	2318      	movs	r3, #24
 800c350:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c356:	f04f 33ff 	mov.w	r3, #4294967295
 800c35a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d045      	beq.n	800c3ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d002      	beq.n	800c370 <osThreadNew+0x48>
        name = attr->name;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d008      	beq.n	800c396 <osThreadNew+0x6e>
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	2b38      	cmp	r3, #56	; 0x38
 800c388:	d805      	bhi.n	800c396 <osThreadNew+0x6e>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	f003 0301 	and.w	r3, r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	d001      	beq.n	800c39a <osThreadNew+0x72>
        return (NULL);
 800c396:	2300      	movs	r3, #0
 800c398:	e054      	b.n	800c444 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d003      	beq.n	800c3aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	695b      	ldr	r3, [r3, #20]
 800c3a6:	089b      	lsrs	r3, r3, #2
 800c3a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00e      	beq.n	800c3d0 <osThreadNew+0xa8>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	2b5b      	cmp	r3, #91	; 0x5b
 800c3b8:	d90a      	bls.n	800c3d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d006      	beq.n	800c3d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d002      	beq.n	800c3d0 <osThreadNew+0xa8>
        mem = 1;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	61bb      	str	r3, [r7, #24]
 800c3ce:	e010      	b.n	800c3f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10c      	bne.n	800c3f2 <osThreadNew+0xca>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d108      	bne.n	800c3f2 <osThreadNew+0xca>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d104      	bne.n	800c3f2 <osThreadNew+0xca>
          mem = 0;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	61bb      	str	r3, [r7, #24]
 800c3ec:	e001      	b.n	800c3f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d110      	bne.n	800c41a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c400:	9202      	str	r2, [sp, #8]
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	6a3a      	ldr	r2, [r7, #32]
 800c40c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f001 fa70 	bl	800d8f4 <xTaskCreateStatic>
 800c414:	4603      	mov	r3, r0
 800c416:	613b      	str	r3, [r7, #16]
 800c418:	e013      	b.n	800c442 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d110      	bne.n	800c442 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c420:	6a3b      	ldr	r3, [r7, #32]
 800c422:	b29a      	uxth	r2, r3
 800c424:	f107 0310 	add.w	r3, r7, #16
 800c428:	9301      	str	r3, [sp, #4]
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f001 fabb 	bl	800d9ae <xTaskCreate>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d001      	beq.n	800c442 <osThreadNew+0x11a>
            hTask = NULL;
 800c43e:	2300      	movs	r3, #0
 800c440:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c442:	693b      	ldr	r3, [r7, #16]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3728      	adds	r7, #40	; 0x28
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c454:	f3ef 8305 	mrs	r3, IPSR
 800c458:	60bb      	str	r3, [r7, #8]
  return(result);
 800c45a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d003      	beq.n	800c468 <osDelay+0x1c>
    stat = osErrorISR;
 800c460:	f06f 0305 	mvn.w	r3, #5
 800c464:	60fb      	str	r3, [r7, #12]
 800c466:	e007      	b.n	800c478 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c468:	2300      	movs	r3, #0
 800c46a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d002      	beq.n	800c478 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f001 fbe0 	bl	800dc38 <vTaskDelay>
    }
  }

  return (stat);
 800c478:	68fb      	ldr	r3, [r7, #12]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c482:	b580      	push	{r7, lr}
 800c484:	b08a      	sub	sp, #40	; 0x28
 800c486:	af02      	add	r7, sp, #8
 800c488:	60f8      	str	r0, [r7, #12]
 800c48a:	60b9      	str	r1, [r7, #8]
 800c48c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c48e:	2300      	movs	r3, #0
 800c490:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c492:	f3ef 8305 	mrs	r3, IPSR
 800c496:	613b      	str	r3, [r7, #16]
  return(result);
 800c498:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d175      	bne.n	800c58a <osSemaphoreNew+0x108>
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d072      	beq.n	800c58a <osSemaphoreNew+0x108>
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d86e      	bhi.n	800c58a <osSemaphoreNew+0x108>
    mem = -1;
 800c4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c4b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d015      	beq.n	800c4e4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d006      	beq.n	800c4ce <osSemaphoreNew+0x4c>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	2b4f      	cmp	r3, #79	; 0x4f
 800c4c6:	d902      	bls.n	800c4ce <osSemaphoreNew+0x4c>
        mem = 1;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	61bb      	str	r3, [r7, #24]
 800c4cc:	e00c      	b.n	800c4e8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d108      	bne.n	800c4e8 <osSemaphoreNew+0x66>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d104      	bne.n	800c4e8 <osSemaphoreNew+0x66>
          mem = 0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	61bb      	str	r3, [r7, #24]
 800c4e2:	e001      	b.n	800c4e8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ee:	d04c      	beq.n	800c58a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d128      	bne.n	800c548 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d10a      	bne.n	800c512 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	2203      	movs	r2, #3
 800c502:	9200      	str	r2, [sp, #0]
 800c504:	2200      	movs	r2, #0
 800c506:	2100      	movs	r1, #0
 800c508:	2001      	movs	r0, #1
 800c50a:	f000 fa4d 	bl	800c9a8 <xQueueGenericCreateStatic>
 800c50e:	61f8      	str	r0, [r7, #28]
 800c510:	e005      	b.n	800c51e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c512:	2203      	movs	r2, #3
 800c514:	2100      	movs	r1, #0
 800c516:	2001      	movs	r0, #1
 800c518:	f000 fabe 	bl	800ca98 <xQueueGenericCreate>
 800c51c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d022      	beq.n	800c56a <osSemaphoreNew+0xe8>
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d01f      	beq.n	800c56a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c52a:	2300      	movs	r3, #0
 800c52c:	2200      	movs	r2, #0
 800c52e:	2100      	movs	r1, #0
 800c530:	69f8      	ldr	r0, [r7, #28]
 800c532:	f000 fb79 	bl	800cc28 <xQueueGenericSend>
 800c536:	4603      	mov	r3, r0
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d016      	beq.n	800c56a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c53c:	69f8      	ldr	r0, [r7, #28]
 800c53e:	f001 f805 	bl	800d54c <vQueueDelete>
            hSemaphore = NULL;
 800c542:	2300      	movs	r3, #0
 800c544:	61fb      	str	r3, [r7, #28]
 800c546:	e010      	b.n	800c56a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d108      	bne.n	800c560 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	461a      	mov	r2, r3
 800c554:	68b9      	ldr	r1, [r7, #8]
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f000 fafb 	bl	800cb52 <xQueueCreateCountingSemaphoreStatic>
 800c55c:	61f8      	str	r0, [r7, #28]
 800c55e:	e004      	b.n	800c56a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c560:	68b9      	ldr	r1, [r7, #8]
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f000 fb2c 	bl	800cbc0 <xQueueCreateCountingSemaphore>
 800c568:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00c      	beq.n	800c58a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d003      	beq.n	800c57e <osSemaphoreNew+0xfc>
          name = attr->name;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	617b      	str	r3, [r7, #20]
 800c57c:	e001      	b.n	800c582 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c57e:	2300      	movs	r3, #0
 800c580:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c582:	6979      	ldr	r1, [r7, #20]
 800c584:	69f8      	ldr	r0, [r7, #28]
 800c586:	f001 f92d 	bl	800d7e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c58a:	69fb      	ldr	r3, [r7, #28]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3720      	adds	r7, #32
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c594:	b580      	push	{r7, lr}
 800c596:	b086      	sub	sp, #24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d103      	bne.n	800c5b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c5ac:	f06f 0303 	mvn.w	r3, #3
 800c5b0:	617b      	str	r3, [r7, #20]
 800c5b2:	e039      	b.n	800c628 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5b4:	f3ef 8305 	mrs	r3, IPSR
 800c5b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d022      	beq.n	800c606 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d003      	beq.n	800c5ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c5c6:	f06f 0303 	mvn.w	r3, #3
 800c5ca:	617b      	str	r3, [r7, #20]
 800c5cc:	e02c      	b.n	800c628 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c5d2:	f107 0308 	add.w	r3, r7, #8
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	2100      	movs	r1, #0
 800c5da:	6938      	ldr	r0, [r7, #16]
 800c5dc:	f000 ff36 	bl	800d44c <xQueueReceiveFromISR>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d003      	beq.n	800c5ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c5e6:	f06f 0302 	mvn.w	r3, #2
 800c5ea:	617b      	str	r3, [r7, #20]
 800c5ec:	e01c      	b.n	800c628 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d019      	beq.n	800c628 <osSemaphoreAcquire+0x94>
 800c5f4:	4b0f      	ldr	r3, [pc, #60]	; (800c634 <osSemaphoreAcquire+0xa0>)
 800c5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	e010      	b.n	800c628 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6938      	ldr	r0, [r7, #16]
 800c60a:	f000 fe13 	bl	800d234 <xQueueSemaphoreTake>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b01      	cmp	r3, #1
 800c612:	d009      	beq.n	800c628 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d003      	beq.n	800c622 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c61a:	f06f 0301 	mvn.w	r3, #1
 800c61e:	617b      	str	r3, [r7, #20]
 800c620:	e002      	b.n	800c628 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c622:	f06f 0302 	mvn.w	r3, #2
 800c626:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c628:	697b      	ldr	r3, [r7, #20]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3718      	adds	r7, #24
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	e000ed04 	.word	0xe000ed04

0800c638 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c638:	b580      	push	{r7, lr}
 800c63a:	b086      	sub	sp, #24
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c644:	2300      	movs	r3, #0
 800c646:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d103      	bne.n	800c656 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c64e:	f06f 0303 	mvn.w	r3, #3
 800c652:	617b      	str	r3, [r7, #20]
 800c654:	e02c      	b.n	800c6b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c656:	f3ef 8305 	mrs	r3, IPSR
 800c65a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c65c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d01a      	beq.n	800c698 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c662:	2300      	movs	r3, #0
 800c664:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c666:	f107 0308 	add.w	r3, r7, #8
 800c66a:	4619      	mov	r1, r3
 800c66c:	6938      	ldr	r0, [r7, #16]
 800c66e:	f000 fc74 	bl	800cf5a <xQueueGiveFromISR>
 800c672:	4603      	mov	r3, r0
 800c674:	2b01      	cmp	r3, #1
 800c676:	d003      	beq.n	800c680 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c678:	f06f 0302 	mvn.w	r3, #2
 800c67c:	617b      	str	r3, [r7, #20]
 800c67e:	e017      	b.n	800c6b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d014      	beq.n	800c6b0 <osSemaphoreRelease+0x78>
 800c686:	4b0d      	ldr	r3, [pc, #52]	; (800c6bc <osSemaphoreRelease+0x84>)
 800c688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	e00b      	b.n	800c6b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c698:	2300      	movs	r3, #0
 800c69a:	2200      	movs	r2, #0
 800c69c:	2100      	movs	r1, #0
 800c69e:	6938      	ldr	r0, [r7, #16]
 800c6a0:	f000 fac2 	bl	800cc28 <xQueueGenericSend>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d002      	beq.n	800c6b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c6aa:	f06f 0302 	mvn.w	r3, #2
 800c6ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c6b0:	697b      	ldr	r3, [r7, #20]
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3718      	adds	r7, #24
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	e000ed04 	.word	0xe000ed04

0800c6c0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b086      	sub	sp, #24
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6cc:	f3ef 8305 	mrs	r3, IPSR
 800c6d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d003      	beq.n	800c6e0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800c6d8:	f06f 0305 	mvn.w	r3, #5
 800c6dc:	617b      	str	r3, [r7, #20]
 800c6de:	e00e      	b.n	800c6fe <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d103      	bne.n	800c6ee <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800c6e6:	f06f 0303 	mvn.w	r3, #3
 800c6ea:	617b      	str	r3, [r7, #20]
 800c6ec:	e007      	b.n	800c6fe <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800c6ee:	6938      	ldr	r0, [r7, #16]
 800c6f0:	f001 f8a2 	bl	800d838 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800c6f8:	6938      	ldr	r0, [r7, #16]
 800c6fa:	f000 ff27 	bl	800d54c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800c6fe:	697b      	ldr	r3, [r7, #20]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3718      	adds	r7, #24
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4a07      	ldr	r2, [pc, #28]	; (800c734 <vApplicationGetIdleTaskMemory+0x2c>)
 800c718:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	4a06      	ldr	r2, [pc, #24]	; (800c738 <vApplicationGetIdleTaskMemory+0x30>)
 800c71e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2280      	movs	r2, #128	; 0x80
 800c724:	601a      	str	r2, [r3, #0]
}
 800c726:	bf00      	nop
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	20000874 	.word	0x20000874
 800c738:	200008d0 	.word	0x200008d0

0800c73c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	4a07      	ldr	r2, [pc, #28]	; (800c768 <vApplicationGetTimerTaskMemory+0x2c>)
 800c74c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	4a06      	ldr	r2, [pc, #24]	; (800c76c <vApplicationGetTimerTaskMemory+0x30>)
 800c752:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c75a:	601a      	str	r2, [r3, #0]
}
 800c75c:	bf00      	nop
 800c75e:	3714      	adds	r7, #20
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr
 800c768:	20000ad0 	.word	0x20000ad0
 800c76c:	20000b2c 	.word	0x20000b2c

0800c770 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f103 0208 	add.w	r2, r3, #8
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f04f 32ff 	mov.w	r2, #4294967295
 800c788:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f103 0208 	add.w	r2, r3, #8
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f103 0208 	add.w	r2, r3, #8
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c7be:	bf00      	nop
 800c7c0:	370c      	adds	r7, #12
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b085      	sub	sp, #20
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	689a      	ldr	r2, [r3, #8]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	1c5a      	adds	r2, r3, #1
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	601a      	str	r2, [r3, #0]
}
 800c806:	bf00      	nop
 800c808:	3714      	adds	r7, #20
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr

0800c812 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c812:	b480      	push	{r7}
 800c814:	b085      	sub	sp, #20
 800c816:	af00      	add	r7, sp, #0
 800c818:	6078      	str	r0, [r7, #4]
 800c81a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c828:	d103      	bne.n	800c832 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	60fb      	str	r3, [r7, #12]
 800c830:	e00c      	b.n	800c84c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	3308      	adds	r3, #8
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	e002      	b.n	800c840 <vListInsert+0x2e>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	60fb      	str	r3, [r7, #12]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d2f6      	bcs.n	800c83a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	685a      	ldr	r2, [r3, #4]
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	683a      	ldr	r2, [r7, #0]
 800c85a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	683a      	ldr	r2, [r7, #0]
 800c866:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	1c5a      	adds	r2, r3, #1
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	601a      	str	r2, [r3, #0]
}
 800c878:	bf00      	nop
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	691b      	ldr	r3, [r3, #16]
 800c890:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	6892      	ldr	r2, [r2, #8]
 800c89a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	6852      	ldr	r2, [r2, #4]
 800c8a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d103      	bne.n	800c8b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	689a      	ldr	r2, [r3, #8]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	1e5a      	subs	r2, r3, #1
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3714      	adds	r7, #20
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10a      	bne.n	800c902 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f0:	f383 8811 	msr	BASEPRI, r3
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c8fe:	bf00      	nop
 800c900:	e7fe      	b.n	800c900 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c902:	f002 fc6f 	bl	800f1e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c90e:	68f9      	ldr	r1, [r7, #12]
 800c910:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c912:	fb01 f303 	mul.w	r3, r1, r3
 800c916:	441a      	add	r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c932:	3b01      	subs	r3, #1
 800c934:	68f9      	ldr	r1, [r7, #12]
 800c936:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c938:	fb01 f303 	mul.w	r3, r1, r3
 800c93c:	441a      	add	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	22ff      	movs	r2, #255	; 0xff
 800c946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	22ff      	movs	r2, #255	; 0xff
 800c94e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d114      	bne.n	800c982 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d01a      	beq.n	800c996 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	3310      	adds	r3, #16
 800c964:	4618      	mov	r0, r3
 800c966:	f001 fc25 	bl	800e1b4 <xTaskRemoveFromEventList>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d012      	beq.n	800c996 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c970:	4b0c      	ldr	r3, [pc, #48]	; (800c9a4 <xQueueGenericReset+0xcc>)
 800c972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c976:	601a      	str	r2, [r3, #0]
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	e009      	b.n	800c996 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3310      	adds	r3, #16
 800c986:	4618      	mov	r0, r3
 800c988:	f7ff fef2 	bl	800c770 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	3324      	adds	r3, #36	; 0x24
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff feed 	bl	800c770 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c996:	f002 fc55 	bl	800f244 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c99a:	2301      	movs	r3, #1
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	e000ed04 	.word	0xe000ed04

0800c9a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08e      	sub	sp, #56	; 0x38
 800c9ac:	af02      	add	r7, sp, #8
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d10a      	bne.n	800c9d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c0:	f383 8811 	msr	BASEPRI, r3
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c9ce:	bf00      	nop
 800c9d0:	e7fe      	b.n	800c9d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10a      	bne.n	800c9ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9dc:	f383 8811 	msr	BASEPRI, r3
 800c9e0:	f3bf 8f6f 	isb	sy
 800c9e4:	f3bf 8f4f 	dsb	sy
 800c9e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9ea:	bf00      	nop
 800c9ec:	e7fe      	b.n	800c9ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d002      	beq.n	800c9fa <xQueueGenericCreateStatic+0x52>
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <xQueueGenericCreateStatic+0x56>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e000      	b.n	800ca00 <xQueueGenericCreateStatic+0x58>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10a      	bne.n	800ca1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	623b      	str	r3, [r7, #32]
}
 800ca16:	bf00      	nop
 800ca18:	e7fe      	b.n	800ca18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d102      	bne.n	800ca26 <xQueueGenericCreateStatic+0x7e>
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d101      	bne.n	800ca2a <xQueueGenericCreateStatic+0x82>
 800ca26:	2301      	movs	r3, #1
 800ca28:	e000      	b.n	800ca2c <xQueueGenericCreateStatic+0x84>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d10a      	bne.n	800ca46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	61fb      	str	r3, [r7, #28]
}
 800ca42:	bf00      	nop
 800ca44:	e7fe      	b.n	800ca44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca46:	2350      	movs	r3, #80	; 0x50
 800ca48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	2b50      	cmp	r3, #80	; 0x50
 800ca4e:	d00a      	beq.n	800ca66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	61bb      	str	r3, [r7, #24]
}
 800ca62:	bf00      	nop
 800ca64:	e7fe      	b.n	800ca64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d00d      	beq.n	800ca8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca74:	2201      	movs	r2, #1
 800ca76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	4613      	mov	r3, r2
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	68b9      	ldr	r1, [r7, #8]
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f000 f83f 	bl	800cb0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3730      	adds	r7, #48	; 0x30
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08a      	sub	sp, #40	; 0x28
 800ca9c:	af02      	add	r7, sp, #8
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	4613      	mov	r3, r2
 800caa4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10a      	bne.n	800cac2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800caac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	613b      	str	r3, [r7, #16]
}
 800cabe:	bf00      	nop
 800cac0:	e7fe      	b.n	800cac0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	fb02 f303 	mul.w	r3, r2, r3
 800caca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	3350      	adds	r3, #80	; 0x50
 800cad0:	4618      	mov	r0, r3
 800cad2:	f002 fca9 	bl	800f428 <pvPortMalloc>
 800cad6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d011      	beq.n	800cb02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	3350      	adds	r3, #80	; 0x50
 800cae6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	2200      	movs	r2, #0
 800caec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800caf0:	79fa      	ldrb	r2, [r7, #7]
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	4613      	mov	r3, r2
 800caf8:	697a      	ldr	r2, [r7, #20]
 800cafa:	68b9      	ldr	r1, [r7, #8]
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f000 f805 	bl	800cb0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb02:	69bb      	ldr	r3, [r7, #24]
	}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3720      	adds	r7, #32
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d103      	bne.n	800cb28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	69ba      	ldr	r2, [r7, #24]
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	e002      	b.n	800cb2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb3a:	2101      	movs	r1, #1
 800cb3c:	69b8      	ldr	r0, [r7, #24]
 800cb3e:	f7ff fecb 	bl	800c8d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	78fa      	ldrb	r2, [r7, #3]
 800cb46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb4a:	bf00      	nop
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b08a      	sub	sp, #40	; 0x28
 800cb56:	af02      	add	r7, sp, #8
 800cb58:	60f8      	str	r0, [r7, #12]
 800cb5a:	60b9      	str	r1, [r7, #8]
 800cb5c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10a      	bne.n	800cb7a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	61bb      	str	r3, [r7, #24]
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d90a      	bls.n	800cb98 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	617b      	str	r3, [r7, #20]
}
 800cb94:	bf00      	nop
 800cb96:	e7fe      	b.n	800cb96 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cb98:	2302      	movs	r3, #2
 800cb9a:	9300      	str	r3, [sp, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2100      	movs	r1, #0
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f7ff ff00 	bl	800c9a8 <xQueueGenericCreateStatic>
 800cba8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d002      	beq.n	800cbb6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cbb6:	69fb      	ldr	r3, [r7, #28]
	}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3720      	adds	r7, #32
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10a      	bne.n	800cbe6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	613b      	str	r3, [r7, #16]
}
 800cbe2:	bf00      	nop
 800cbe4:	e7fe      	b.n	800cbe4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cbe6:	683a      	ldr	r2, [r7, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d90a      	bls.n	800cc04 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	60fb      	str	r3, [r7, #12]
}
 800cc00:	bf00      	nop
 800cc02:	e7fe      	b.n	800cc02 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc04:	2202      	movs	r2, #2
 800cc06:	2100      	movs	r1, #0
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff ff45 	bl	800ca98 <xQueueGenericCreate>
 800cc0e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d002      	beq.n	800cc1c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	683a      	ldr	r2, [r7, #0]
 800cc1a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc1c:	697b      	ldr	r3, [r7, #20]
	}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3718      	adds	r7, #24
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
	...

0800cc28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08e      	sub	sp, #56	; 0x38
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc36:	2300      	movs	r3, #0
 800cc38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10a      	bne.n	800cc5a <xQueueGenericSend+0x32>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc56:	bf00      	nop
 800cc58:	e7fe      	b.n	800cc58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d103      	bne.n	800cc68 <xQueueGenericSend+0x40>
 800cc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d101      	bne.n	800cc6c <xQueueGenericSend+0x44>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e000      	b.n	800cc6e <xQueueGenericSend+0x46>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d10a      	bne.n	800cc88 <xQueueGenericSend+0x60>
	__asm volatile
 800cc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc76:	f383 8811 	msr	BASEPRI, r3
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc84:	bf00      	nop
 800cc86:	e7fe      	b.n	800cc86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d103      	bne.n	800cc96 <xQueueGenericSend+0x6e>
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d101      	bne.n	800cc9a <xQueueGenericSend+0x72>
 800cc96:	2301      	movs	r3, #1
 800cc98:	e000      	b.n	800cc9c <xQueueGenericSend+0x74>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10a      	bne.n	800ccb6 <xQueueGenericSend+0x8e>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	623b      	str	r3, [r7, #32]
}
 800ccb2:	bf00      	nop
 800ccb4:	e7fe      	b.n	800ccb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccb6:	f001 fc3b 	bl	800e530 <xTaskGetSchedulerState>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d102      	bne.n	800ccc6 <xQueueGenericSend+0x9e>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d101      	bne.n	800ccca <xQueueGenericSend+0xa2>
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e000      	b.n	800cccc <xQueueGenericSend+0xa4>
 800ccca:	2300      	movs	r3, #0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10a      	bne.n	800cce6 <xQueueGenericSend+0xbe>
	__asm volatile
 800ccd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	61fb      	str	r3, [r7, #28]
}
 800cce2:	bf00      	nop
 800cce4:	e7fe      	b.n	800cce4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cce6:	f002 fa7d 	bl	800f1e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ccea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d302      	bcc.n	800ccfc <xQueueGenericSend+0xd4>
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	d129      	bne.n	800cd50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ccfc:	683a      	ldr	r2, [r7, #0]
 800ccfe:	68b9      	ldr	r1, [r7, #8]
 800cd00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd02:	f000 fc5e 	bl	800d5c2 <prvCopyDataToQueue>
 800cd06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d010      	beq.n	800cd32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd12:	3324      	adds	r3, #36	; 0x24
 800cd14:	4618      	mov	r0, r3
 800cd16:	f001 fa4d 	bl	800e1b4 <xTaskRemoveFromEventList>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d013      	beq.n	800cd48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd20:	4b3f      	ldr	r3, [pc, #252]	; (800ce20 <xQueueGenericSend+0x1f8>)
 800cd22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd26:	601a      	str	r2, [r3, #0]
 800cd28:	f3bf 8f4f 	dsb	sy
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	e00a      	b.n	800cd48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d007      	beq.n	800cd48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd38:	4b39      	ldr	r3, [pc, #228]	; (800ce20 <xQueueGenericSend+0x1f8>)
 800cd3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd3e:	601a      	str	r2, [r3, #0]
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cd48:	f002 fa7c 	bl	800f244 <vPortExitCritical>
				return pdPASS;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e063      	b.n	800ce18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d103      	bne.n	800cd5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd56:	f002 fa75 	bl	800f244 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	e05c      	b.n	800ce18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d106      	bne.n	800cd72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd64:	f107 0314 	add.w	r3, r7, #20
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f001 fa87 	bl	800e27c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd72:	f002 fa67 	bl	800f244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd76:	f000 fff9 	bl	800dd6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd7a:	f002 fa33 	bl	800f1e4 <vPortEnterCritical>
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd84:	b25b      	sxtb	r3, r3
 800cd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd8a:	d103      	bne.n	800cd94 <xQueueGenericSend+0x16c>
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd9a:	b25b      	sxtb	r3, r3
 800cd9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda0:	d103      	bne.n	800cdaa <xQueueGenericSend+0x182>
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	2200      	movs	r2, #0
 800cda6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdaa:	f002 fa4b 	bl	800f244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdae:	1d3a      	adds	r2, r7, #4
 800cdb0:	f107 0314 	add.w	r3, r7, #20
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f001 fa76 	bl	800e2a8 <xTaskCheckForTimeOut>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d124      	bne.n	800ce0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cdc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdc4:	f000 fcf5 	bl	800d7b2 <prvIsQueueFull>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d018      	beq.n	800ce00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	3310      	adds	r3, #16
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	4611      	mov	r1, r2
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f001 f99c 	bl	800e114 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdde:	f000 fc80 	bl	800d6e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cde2:	f000 ffd1 	bl	800dd88 <xTaskResumeAll>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f47f af7c 	bne.w	800cce6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cdee:	4b0c      	ldr	r3, [pc, #48]	; (800ce20 <xQueueGenericSend+0x1f8>)
 800cdf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdf4:	601a      	str	r2, [r3, #0]
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	e772      	b.n	800cce6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce02:	f000 fc6e 	bl	800d6e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce06:	f000 ffbf 	bl	800dd88 <xTaskResumeAll>
 800ce0a:	e76c      	b.n	800cce6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce0e:	f000 fc68 	bl	800d6e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce12:	f000 ffb9 	bl	800dd88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3738      	adds	r7, #56	; 0x38
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	e000ed04 	.word	0xe000ed04

0800ce24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b090      	sub	sp, #64	; 0x40
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
 800ce30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ce36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10a      	bne.n	800ce52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce40:	f383 8811 	msr	BASEPRI, r3
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce4e:	bf00      	nop
 800ce50:	e7fe      	b.n	800ce50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d103      	bne.n	800ce60 <xQueueGenericSendFromISR+0x3c>
 800ce58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d101      	bne.n	800ce64 <xQueueGenericSendFromISR+0x40>
 800ce60:	2301      	movs	r3, #1
 800ce62:	e000      	b.n	800ce66 <xQueueGenericSendFromISR+0x42>
 800ce64:	2300      	movs	r3, #0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10a      	bne.n	800ce80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ce6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce7c:	bf00      	nop
 800ce7e:	e7fe      	b.n	800ce7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d103      	bne.n	800ce8e <xQueueGenericSendFromISR+0x6a>
 800ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d101      	bne.n	800ce92 <xQueueGenericSendFromISR+0x6e>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e000      	b.n	800ce94 <xQueueGenericSendFromISR+0x70>
 800ce92:	2300      	movs	r3, #0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10a      	bne.n	800ceae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9c:	f383 8811 	msr	BASEPRI, r3
 800cea0:	f3bf 8f6f 	isb	sy
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	623b      	str	r3, [r7, #32]
}
 800ceaa:	bf00      	nop
 800ceac:	e7fe      	b.n	800ceac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ceae:	f002 fa7b 	bl	800f3a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ceb2:	f3ef 8211 	mrs	r2, BASEPRI
 800ceb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceba:	f383 8811 	msr	BASEPRI, r3
 800cebe:	f3bf 8f6f 	isb	sy
 800cec2:	f3bf 8f4f 	dsb	sy
 800cec6:	61fa      	str	r2, [r7, #28]
 800cec8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ceca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cecc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ced2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d302      	bcc.n	800cee0 <xQueueGenericSendFromISR+0xbc>
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d12f      	bne.n	800cf40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	68b9      	ldr	r1, [r7, #8]
 800cef4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cef6:	f000 fb64 	bl	800d5c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cefa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf02:	d112      	bne.n	800cf2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d016      	beq.n	800cf3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0e:	3324      	adds	r3, #36	; 0x24
 800cf10:	4618      	mov	r0, r3
 800cf12:	f001 f94f 	bl	800e1b4 <xTaskRemoveFromEventList>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00e      	beq.n	800cf3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00b      	beq.n	800cf3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2201      	movs	r2, #1
 800cf26:	601a      	str	r2, [r3, #0]
 800cf28:	e007      	b.n	800cf3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf2e:	3301      	adds	r3, #1
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	b25a      	sxtb	r2, r3
 800cf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cf3e:	e001      	b.n	800cf44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf40:	2300      	movs	r3, #0
 800cf42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3740      	adds	r7, #64	; 0x40
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b08e      	sub	sp, #56	; 0x38
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
 800cf62:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10a      	bne.n	800cf84 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	623b      	str	r3, [r7, #32]
}
 800cf80:	bf00      	nop
 800cf82:	e7fe      	b.n	800cf82 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00a      	beq.n	800cfa2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800cf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	61fb      	str	r3, [r7, #28]
}
 800cf9e:	bf00      	nop
 800cfa0:	e7fe      	b.n	800cfa0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d103      	bne.n	800cfb2 <xQueueGiveFromISR+0x58>
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <xQueueGiveFromISR+0x5c>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e000      	b.n	800cfb8 <xQueueGiveFromISR+0x5e>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10a      	bne.n	800cfd2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	61bb      	str	r3, [r7, #24]
}
 800cfce:	bf00      	nop
 800cfd0:	e7fe      	b.n	800cfd0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfd2:	f002 f9e9 	bl	800f3a8 <vPortValidateInterruptPriority>
	__asm volatile
 800cfd6:	f3ef 8211 	mrs	r2, BASEPRI
 800cfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	617a      	str	r2, [r7, #20]
 800cfec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cfee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cffe:	429a      	cmp	r2, r3
 800d000:	d22b      	bcs.n	800d05a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00e:	1c5a      	adds	r2, r3, #1
 800d010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d012:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d014:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01c:	d112      	bne.n	800d044 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d022:	2b00      	cmp	r3, #0
 800d024:	d016      	beq.n	800d054 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	3324      	adds	r3, #36	; 0x24
 800d02a:	4618      	mov	r0, r3
 800d02c:	f001 f8c2 	bl	800e1b4 <xTaskRemoveFromEventList>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00e      	beq.n	800d054 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00b      	beq.n	800d054 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	2201      	movs	r2, #1
 800d040:	601a      	str	r2, [r3, #0]
 800d042:	e007      	b.n	800d054 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d048:	3301      	adds	r3, #1
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	b25a      	sxtb	r2, r3
 800d04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d054:	2301      	movs	r3, #1
 800d056:	637b      	str	r3, [r7, #52]	; 0x34
 800d058:	e001      	b.n	800d05e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d05a:	2300      	movs	r3, #0
 800d05c:	637b      	str	r3, [r7, #52]	; 0x34
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d060:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f383 8811 	msr	BASEPRI, r3
}
 800d068:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3738      	adds	r7, #56	; 0x38
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b08c      	sub	sp, #48	; 0x30
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d080:	2300      	movs	r3, #0
 800d082:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10a      	bne.n	800d0a4 <xQueueReceive+0x30>
	__asm volatile
 800d08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	623b      	str	r3, [r7, #32]
}
 800d0a0:	bf00      	nop
 800d0a2:	e7fe      	b.n	800d0a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d103      	bne.n	800d0b2 <xQueueReceive+0x3e>
 800d0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d101      	bne.n	800d0b6 <xQueueReceive+0x42>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e000      	b.n	800d0b8 <xQueueReceive+0x44>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10a      	bne.n	800d0d2 <xQueueReceive+0x5e>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	61fb      	str	r3, [r7, #28]
}
 800d0ce:	bf00      	nop
 800d0d0:	e7fe      	b.n	800d0d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0d2:	f001 fa2d 	bl	800e530 <xTaskGetSchedulerState>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d102      	bne.n	800d0e2 <xQueueReceive+0x6e>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <xQueueReceive+0x72>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e000      	b.n	800d0e8 <xQueueReceive+0x74>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10a      	bne.n	800d102 <xQueueReceive+0x8e>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	61bb      	str	r3, [r7, #24]
}
 800d0fe:	bf00      	nop
 800d100:	e7fe      	b.n	800d100 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d102:	f002 f86f 	bl	800f1e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d01f      	beq.n	800d152 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d112:	68b9      	ldr	r1, [r7, #8]
 800d114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d116:	f000 fabe 	bl	800d696 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11c:	1e5a      	subs	r2, r3, #1
 800d11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d120:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00f      	beq.n	800d14a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12c:	3310      	adds	r3, #16
 800d12e:	4618      	mov	r0, r3
 800d130:	f001 f840 	bl	800e1b4 <xTaskRemoveFromEventList>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d007      	beq.n	800d14a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d13a:	4b3d      	ldr	r3, [pc, #244]	; (800d230 <xQueueReceive+0x1bc>)
 800d13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d140:	601a      	str	r2, [r3, #0]
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d14a:	f002 f87b 	bl	800f244 <vPortExitCritical>
				return pdPASS;
 800d14e:	2301      	movs	r3, #1
 800d150:	e069      	b.n	800d226 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d103      	bne.n	800d160 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d158:	f002 f874 	bl	800f244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d15c:	2300      	movs	r3, #0
 800d15e:	e062      	b.n	800d226 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d162:	2b00      	cmp	r3, #0
 800d164:	d106      	bne.n	800d174 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d166:	f107 0310 	add.w	r3, r7, #16
 800d16a:	4618      	mov	r0, r3
 800d16c:	f001 f886 	bl	800e27c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d170:	2301      	movs	r3, #1
 800d172:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d174:	f002 f866 	bl	800f244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d178:	f000 fdf8 	bl	800dd6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d17c:	f002 f832 	bl	800f1e4 <vPortEnterCritical>
 800d180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d186:	b25b      	sxtb	r3, r3
 800d188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d18c:	d103      	bne.n	800d196 <xQueueReceive+0x122>
 800d18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d190:	2200      	movs	r2, #0
 800d192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d19c:	b25b      	sxtb	r3, r3
 800d19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a2:	d103      	bne.n	800d1ac <xQueueReceive+0x138>
 800d1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1ac:	f002 f84a 	bl	800f244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1b0:	1d3a      	adds	r2, r7, #4
 800d1b2:	f107 0310 	add.w	r3, r7, #16
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f001 f875 	bl	800e2a8 <xTaskCheckForTimeOut>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d123      	bne.n	800d20c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1c6:	f000 fade 	bl	800d786 <prvIsQueueEmpty>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d017      	beq.n	800d200 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d2:	3324      	adds	r3, #36	; 0x24
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	4611      	mov	r1, r2
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f000 ff9b 	bl	800e114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1e0:	f000 fa7f 	bl	800d6e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1e4:	f000 fdd0 	bl	800dd88 <xTaskResumeAll>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d189      	bne.n	800d102 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d1ee:	4b10      	ldr	r3, [pc, #64]	; (800d230 <xQueueReceive+0x1bc>)
 800d1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f4:	601a      	str	r2, [r3, #0]
 800d1f6:	f3bf 8f4f 	dsb	sy
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	e780      	b.n	800d102 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d202:	f000 fa6e 	bl	800d6e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d206:	f000 fdbf 	bl	800dd88 <xTaskResumeAll>
 800d20a:	e77a      	b.n	800d102 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d20e:	f000 fa68 	bl	800d6e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d212:	f000 fdb9 	bl	800dd88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d218:	f000 fab5 	bl	800d786 <prvIsQueueEmpty>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f43f af6f 	beq.w	800d102 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d224:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d226:	4618      	mov	r0, r3
 800d228:	3730      	adds	r7, #48	; 0x30
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	e000ed04 	.word	0xe000ed04

0800d234 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b08e      	sub	sp, #56	; 0x38
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d23e:	2300      	movs	r3, #0
 800d240:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d246:	2300      	movs	r3, #0
 800d248:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10a      	bne.n	800d266 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d254:	f383 8811 	msr	BASEPRI, r3
 800d258:	f3bf 8f6f 	isb	sy
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	623b      	str	r3, [r7, #32]
}
 800d262:	bf00      	nop
 800d264:	e7fe      	b.n	800d264 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00a      	beq.n	800d284 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	61fb      	str	r3, [r7, #28]
}
 800d280:	bf00      	nop
 800d282:	e7fe      	b.n	800d282 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d284:	f001 f954 	bl	800e530 <xTaskGetSchedulerState>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d102      	bne.n	800d294 <xQueueSemaphoreTake+0x60>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d101      	bne.n	800d298 <xQueueSemaphoreTake+0x64>
 800d294:	2301      	movs	r3, #1
 800d296:	e000      	b.n	800d29a <xQueueSemaphoreTake+0x66>
 800d298:	2300      	movs	r3, #0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10a      	bne.n	800d2b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	61bb      	str	r3, [r7, #24]
}
 800d2b0:	bf00      	nop
 800d2b2:	e7fe      	b.n	800d2b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2b4:	f001 ff96 	bl	800f1e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d024      	beq.n	800d30e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c6:	1e5a      	subs	r2, r3, #1
 800d2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d104      	bne.n	800d2de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d2d4:	f001 faa2 	bl	800e81c <pvTaskIncrementMutexHeldCount>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e0:	691b      	ldr	r3, [r3, #16]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00f      	beq.n	800d306 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e8:	3310      	adds	r3, #16
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f000 ff62 	bl	800e1b4 <xTaskRemoveFromEventList>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d007      	beq.n	800d306 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2f6:	4b54      	ldr	r3, [pc, #336]	; (800d448 <xQueueSemaphoreTake+0x214>)
 800d2f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2fc:	601a      	str	r2, [r3, #0]
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d306:	f001 ff9d 	bl	800f244 <vPortExitCritical>
				return pdPASS;
 800d30a:	2301      	movs	r3, #1
 800d30c:	e097      	b.n	800d43e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d111      	bne.n	800d338 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00a      	beq.n	800d330 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	617b      	str	r3, [r7, #20]
}
 800d32c:	bf00      	nop
 800d32e:	e7fe      	b.n	800d32e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d330:	f001 ff88 	bl	800f244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d334:	2300      	movs	r3, #0
 800d336:	e082      	b.n	800d43e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d106      	bne.n	800d34c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d33e:	f107 030c 	add.w	r3, r7, #12
 800d342:	4618      	mov	r0, r3
 800d344:	f000 ff9a 	bl	800e27c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d348:	2301      	movs	r3, #1
 800d34a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d34c:	f001 ff7a 	bl	800f244 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d350:	f000 fd0c 	bl	800dd6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d354:	f001 ff46 	bl	800f1e4 <vPortEnterCritical>
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d35e:	b25b      	sxtb	r3, r3
 800d360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d364:	d103      	bne.n	800d36e <xQueueSemaphoreTake+0x13a>
 800d366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d374:	b25b      	sxtb	r3, r3
 800d376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37a:	d103      	bne.n	800d384 <xQueueSemaphoreTake+0x150>
 800d37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d384:	f001 ff5e 	bl	800f244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d388:	463a      	mov	r2, r7
 800d38a:	f107 030c 	add.w	r3, r7, #12
 800d38e:	4611      	mov	r1, r2
 800d390:	4618      	mov	r0, r3
 800d392:	f000 ff89 	bl	800e2a8 <xTaskCheckForTimeOut>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d132      	bne.n	800d402 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d39c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d39e:	f000 f9f2 	bl	800d786 <prvIsQueueEmpty>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d026      	beq.n	800d3f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d109      	bne.n	800d3c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d3b0:	f001 ff18 	bl	800f1e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f001 f8d7 	bl	800e56c <xTaskPriorityInherit>
 800d3be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d3c0:	f001 ff40 	bl	800f244 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c6:	3324      	adds	r3, #36	; 0x24
 800d3c8:	683a      	ldr	r2, [r7, #0]
 800d3ca:	4611      	mov	r1, r2
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f000 fea1 	bl	800e114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3d4:	f000 f985 	bl	800d6e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3d8:	f000 fcd6 	bl	800dd88 <xTaskResumeAll>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	f47f af68 	bne.w	800d2b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d3e4:	4b18      	ldr	r3, [pc, #96]	; (800d448 <xQueueSemaphoreTake+0x214>)
 800d3e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ea:	601a      	str	r2, [r3, #0]
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	f3bf 8f6f 	isb	sy
 800d3f4:	e75e      	b.n	800d2b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d3f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3f8:	f000 f973 	bl	800d6e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3fc:	f000 fcc4 	bl	800dd88 <xTaskResumeAll>
 800d400:	e758      	b.n	800d2b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d404:	f000 f96d 	bl	800d6e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d408:	f000 fcbe 	bl	800dd88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d40c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d40e:	f000 f9ba 	bl	800d786 <prvIsQueueEmpty>
 800d412:	4603      	mov	r3, r0
 800d414:	2b00      	cmp	r3, #0
 800d416:	f43f af4d 	beq.w	800d2b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00d      	beq.n	800d43c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d420:	f001 fee0 	bl	800f1e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d426:	f000 f8b4 	bl	800d592 <prvGetDisinheritPriorityAfterTimeout>
 800d42a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d432:	4618      	mov	r0, r3
 800d434:	f001 f970 	bl	800e718 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d438:	f001 ff04 	bl	800f244 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d43c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3738      	adds	r7, #56	; 0x38
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	e000ed04 	.word	0xe000ed04

0800d44c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b08e      	sub	sp, #56	; 0x38
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10a      	bne.n	800d478 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d466:	f383 8811 	msr	BASEPRI, r3
 800d46a:	f3bf 8f6f 	isb	sy
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	623b      	str	r3, [r7, #32]
}
 800d474:	bf00      	nop
 800d476:	e7fe      	b.n	800d476 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d103      	bne.n	800d486 <xQueueReceiveFromISR+0x3a>
 800d47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d482:	2b00      	cmp	r3, #0
 800d484:	d101      	bne.n	800d48a <xQueueReceiveFromISR+0x3e>
 800d486:	2301      	movs	r3, #1
 800d488:	e000      	b.n	800d48c <xQueueReceiveFromISR+0x40>
 800d48a:	2300      	movs	r3, #0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d10a      	bne.n	800d4a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d494:	f383 8811 	msr	BASEPRI, r3
 800d498:	f3bf 8f6f 	isb	sy
 800d49c:	f3bf 8f4f 	dsb	sy
 800d4a0:	61fb      	str	r3, [r7, #28]
}
 800d4a2:	bf00      	nop
 800d4a4:	e7fe      	b.n	800d4a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4a6:	f001 ff7f 	bl	800f3a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d4aa:	f3ef 8211 	mrs	r2, BASEPRI
 800d4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	61ba      	str	r2, [r7, #24]
 800d4c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d4c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d02f      	beq.n	800d532 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4dc:	68b9      	ldr	r1, [r7, #8]
 800d4de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4e0:	f000 f8d9 	bl	800d696 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e6:	1e5a      	subs	r2, r3, #1
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d4ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f4:	d112      	bne.n	800d51c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d016      	beq.n	800d52c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d500:	3310      	adds	r3, #16
 800d502:	4618      	mov	r0, r3
 800d504:	f000 fe56 	bl	800e1b4 <xTaskRemoveFromEventList>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d00e      	beq.n	800d52c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00b      	beq.n	800d52c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	601a      	str	r2, [r3, #0]
 800d51a:	e007      	b.n	800d52c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d51c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d520:	3301      	adds	r3, #1
 800d522:	b2db      	uxtb	r3, r3
 800d524:	b25a      	sxtb	r2, r3
 800d526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d52c:	2301      	movs	r3, #1
 800d52e:	637b      	str	r3, [r7, #52]	; 0x34
 800d530:	e001      	b.n	800d536 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d532:	2300      	movs	r3, #0
 800d534:	637b      	str	r3, [r7, #52]	; 0x34
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	f383 8811 	msr	BASEPRI, r3
}
 800d540:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d544:	4618      	mov	r0, r3
 800d546:	3738      	adds	r7, #56	; 0x38
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d10a      	bne.n	800d574 <vQueueDelete+0x28>
	__asm volatile
 800d55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d562:	f383 8811 	msr	BASEPRI, r3
 800d566:	f3bf 8f6f 	isb	sy
 800d56a:	f3bf 8f4f 	dsb	sy
 800d56e:	60bb      	str	r3, [r7, #8]
}
 800d570:	bf00      	nop
 800d572:	e7fe      	b.n	800d572 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f000 f95f 	bl	800d838 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d580:	2b00      	cmp	r3, #0
 800d582:	d102      	bne.n	800d58a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f002 f81b 	bl	800f5c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d58a:	bf00      	nop
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d592:	b480      	push	{r7}
 800d594:	b085      	sub	sp, #20
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d006      	beq.n	800d5b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d5ac:	60fb      	str	r3, [r7, #12]
 800d5ae:	e001      	b.n	800d5b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
	}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3714      	adds	r7, #20
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b086      	sub	sp, #24
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	60f8      	str	r0, [r7, #12]
 800d5ca:	60b9      	str	r1, [r7, #8]
 800d5cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d10d      	bne.n	800d5fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d14d      	bne.n	800d684 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	689b      	ldr	r3, [r3, #8]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f001 f825 	bl	800e63c <xTaskPriorityDisinherit>
 800d5f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	609a      	str	r2, [r3, #8]
 800d5fa:	e043      	b.n	800d684 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d119      	bne.n	800d636 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6858      	ldr	r0, [r3, #4]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60a:	461a      	mov	r2, r3
 800d60c:	68b9      	ldr	r1, [r7, #8]
 800d60e:	f003 f887 	bl	8010720 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61a:	441a      	add	r2, r3
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	685a      	ldr	r2, [r3, #4]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d32b      	bcc.n	800d684 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	605a      	str	r2, [r3, #4]
 800d634:	e026      	b.n	800d684 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	68d8      	ldr	r0, [r3, #12]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63e:	461a      	mov	r2, r3
 800d640:	68b9      	ldr	r1, [r7, #8]
 800d642:	f003 f86d 	bl	8010720 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	68da      	ldr	r2, [r3, #12]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64e:	425b      	negs	r3, r3
 800d650:	441a      	add	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	68da      	ldr	r2, [r3, #12]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d207      	bcs.n	800d672 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	689a      	ldr	r2, [r3, #8]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66a:	425b      	negs	r3, r3
 800d66c:	441a      	add	r2, r3
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2b02      	cmp	r3, #2
 800d676:	d105      	bne.n	800d684 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d002      	beq.n	800d684 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	3b01      	subs	r3, #1
 800d682:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	1c5a      	adds	r2, r3, #1
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d68c:	697b      	ldr	r3, [r7, #20]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3718      	adds	r7, #24
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b082      	sub	sp, #8
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
 800d69e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d018      	beq.n	800d6da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	68da      	ldr	r2, [r3, #12]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b0:	441a      	add	r2, r3
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	68da      	ldr	r2, [r3, #12]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d303      	bcc.n	800d6ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	68d9      	ldr	r1, [r3, #12]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	6838      	ldr	r0, [r7, #0]
 800d6d6:	f003 f823 	bl	8010720 <memcpy>
	}
}
 800d6da:	bf00      	nop
 800d6dc:	3708      	adds	r7, #8
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b084      	sub	sp, #16
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d6ea:	f001 fd7b 	bl	800f1e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6f6:	e011      	b.n	800d71c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d012      	beq.n	800d726 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	3324      	adds	r3, #36	; 0x24
 800d704:	4618      	mov	r0, r3
 800d706:	f000 fd55 	bl	800e1b4 <xTaskRemoveFromEventList>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d001      	beq.n	800d714 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d710:	f000 fe2c 	bl	800e36c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d714:	7bfb      	ldrb	r3, [r7, #15]
 800d716:	3b01      	subs	r3, #1
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d71c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d720:	2b00      	cmp	r3, #0
 800d722:	dce9      	bgt.n	800d6f8 <prvUnlockQueue+0x16>
 800d724:	e000      	b.n	800d728 <prvUnlockQueue+0x46>
					break;
 800d726:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	22ff      	movs	r2, #255	; 0xff
 800d72c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d730:	f001 fd88 	bl	800f244 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d734:	f001 fd56 	bl	800f1e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d73e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d740:	e011      	b.n	800d766 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	691b      	ldr	r3, [r3, #16]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d012      	beq.n	800d770 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	3310      	adds	r3, #16
 800d74e:	4618      	mov	r0, r3
 800d750:	f000 fd30 	bl	800e1b4 <xTaskRemoveFromEventList>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d75a:	f000 fe07 	bl	800e36c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d75e:	7bbb      	ldrb	r3, [r7, #14]
 800d760:	3b01      	subs	r3, #1
 800d762:	b2db      	uxtb	r3, r3
 800d764:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d766:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	dce9      	bgt.n	800d742 <prvUnlockQueue+0x60>
 800d76e:	e000      	b.n	800d772 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d770:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	22ff      	movs	r2, #255	; 0xff
 800d776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d77a:	f001 fd63 	bl	800f244 <vPortExitCritical>
}
 800d77e:	bf00      	nop
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b084      	sub	sp, #16
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d78e:	f001 fd29 	bl	800f1e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d796:	2b00      	cmp	r3, #0
 800d798:	d102      	bne.n	800d7a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d79a:	2301      	movs	r3, #1
 800d79c:	60fb      	str	r3, [r7, #12]
 800d79e:	e001      	b.n	800d7a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7a4:	f001 fd4e 	bl	800f244 <vPortExitCritical>

	return xReturn;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b084      	sub	sp, #16
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7ba:	f001 fd13 	bl	800f1e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d102      	bne.n	800d7d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	60fb      	str	r3, [r7, #12]
 800d7ce:	e001      	b.n	800d7d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7d4:	f001 fd36 	bl	800f244 <vPortExitCritical>

	return xReturn;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
	...

0800d7e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	60fb      	str	r3, [r7, #12]
 800d7f2:	e014      	b.n	800d81e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d7f4:	4a0f      	ldr	r2, [pc, #60]	; (800d834 <vQueueAddToRegistry+0x50>)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10b      	bne.n	800d818 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d800:	490c      	ldr	r1, [pc, #48]	; (800d834 <vQueueAddToRegistry+0x50>)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	683a      	ldr	r2, [r7, #0]
 800d806:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d80a:	4a0a      	ldr	r2, [pc, #40]	; (800d834 <vQueueAddToRegistry+0x50>)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	00db      	lsls	r3, r3, #3
 800d810:	4413      	add	r3, r2
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d816:	e006      	b.n	800d826 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	3301      	adds	r3, #1
 800d81c:	60fb      	str	r3, [r7, #12]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2b07      	cmp	r3, #7
 800d822:	d9e7      	bls.n	800d7f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d824:	bf00      	nop
 800d826:	bf00      	nop
 800d828:	3714      	adds	r7, #20
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	20000f2c 	.word	0x20000f2c

0800d838 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d840:	2300      	movs	r3, #0
 800d842:	60fb      	str	r3, [r7, #12]
 800d844:	e016      	b.n	800d874 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d846:	4a10      	ldr	r2, [pc, #64]	; (800d888 <vQueueUnregisterQueue+0x50>)
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	00db      	lsls	r3, r3, #3
 800d84c:	4413      	add	r3, r2
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	429a      	cmp	r2, r3
 800d854:	d10b      	bne.n	800d86e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d856:	4a0c      	ldr	r2, [pc, #48]	; (800d888 <vQueueUnregisterQueue+0x50>)
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2100      	movs	r1, #0
 800d85c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d860:	4a09      	ldr	r2, [pc, #36]	; (800d888 <vQueueUnregisterQueue+0x50>)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	00db      	lsls	r3, r3, #3
 800d866:	4413      	add	r3, r2
 800d868:	2200      	movs	r2, #0
 800d86a:	605a      	str	r2, [r3, #4]
				break;
 800d86c:	e006      	b.n	800d87c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	3301      	adds	r3, #1
 800d872:	60fb      	str	r3, [r7, #12]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2b07      	cmp	r3, #7
 800d878:	d9e5      	bls.n	800d846 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d87a:	bf00      	nop
 800d87c:	bf00      	nop
 800d87e:	3714      	adds	r7, #20
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	20000f2c 	.word	0x20000f2c

0800d88c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d89c:	f001 fca2 	bl	800f1e4 <vPortEnterCritical>
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8a6:	b25b      	sxtb	r3, r3
 800d8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ac:	d103      	bne.n	800d8b6 <vQueueWaitForMessageRestricted+0x2a>
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8bc:	b25b      	sxtb	r3, r3
 800d8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c2:	d103      	bne.n	800d8cc <vQueueWaitForMessageRestricted+0x40>
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8cc:	f001 fcba 	bl	800f244 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d106      	bne.n	800d8e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	3324      	adds	r3, #36	; 0x24
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	68b9      	ldr	r1, [r7, #8]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f000 fc3b 	bl	800e15c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d8e6:	6978      	ldr	r0, [r7, #20]
 800d8e8:	f7ff fefb 	bl	800d6e2 <prvUnlockQueue>
	}
 800d8ec:	bf00      	nop
 800d8ee:	3718      	adds	r7, #24
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b08e      	sub	sp, #56	; 0x38
 800d8f8:	af04      	add	r7, sp, #16
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10a      	bne.n	800d91e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90c:	f383 8811 	msr	BASEPRI, r3
 800d910:	f3bf 8f6f 	isb	sy
 800d914:	f3bf 8f4f 	dsb	sy
 800d918:	623b      	str	r3, [r7, #32]
}
 800d91a:	bf00      	nop
 800d91c:	e7fe      	b.n	800d91c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10a      	bne.n	800d93a <xTaskCreateStatic+0x46>
	__asm volatile
 800d924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d928:	f383 8811 	msr	BASEPRI, r3
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	61fb      	str	r3, [r7, #28]
}
 800d936:	bf00      	nop
 800d938:	e7fe      	b.n	800d938 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d93a:	235c      	movs	r3, #92	; 0x5c
 800d93c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	2b5c      	cmp	r3, #92	; 0x5c
 800d942:	d00a      	beq.n	800d95a <xTaskCreateStatic+0x66>
	__asm volatile
 800d944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d948:	f383 8811 	msr	BASEPRI, r3
 800d94c:	f3bf 8f6f 	isb	sy
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	61bb      	str	r3, [r7, #24]
}
 800d956:	bf00      	nop
 800d958:	e7fe      	b.n	800d958 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d95a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d01e      	beq.n	800d9a0 <xTaskCreateStatic+0xac>
 800d962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d964:	2b00      	cmp	r3, #0
 800d966:	d01b      	beq.n	800d9a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d970:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d974:	2202      	movs	r2, #2
 800d976:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d97a:	2300      	movs	r3, #0
 800d97c:	9303      	str	r3, [sp, #12]
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d980:	9302      	str	r3, [sp, #8]
 800d982:	f107 0314 	add.w	r3, r7, #20
 800d986:	9301      	str	r3, [sp, #4]
 800d988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	68b9      	ldr	r1, [r7, #8]
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f000 f850 	bl	800da38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d99a:	f000 f8dd 	bl	800db58 <prvAddNewTaskToReadyList>
 800d99e:	e001      	b.n	800d9a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d9a4:	697b      	ldr	r3, [r7, #20]
	}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3728      	adds	r7, #40	; 0x28
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b08c      	sub	sp, #48	; 0x30
 800d9b2:	af04      	add	r7, sp, #16
 800d9b4:	60f8      	str	r0, [r7, #12]
 800d9b6:	60b9      	str	r1, [r7, #8]
 800d9b8:	603b      	str	r3, [r7, #0]
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d9be:	88fb      	ldrh	r3, [r7, #6]
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f001 fd30 	bl	800f428 <pvPortMalloc>
 800d9c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00e      	beq.n	800d9ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d9d0:	205c      	movs	r0, #92	; 0x5c
 800d9d2:	f001 fd29 	bl	800f428 <pvPortMalloc>
 800d9d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d003      	beq.n	800d9e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	631a      	str	r2, [r3, #48]	; 0x30
 800d9e4:	e005      	b.n	800d9f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d9e6:	6978      	ldr	r0, [r7, #20]
 800d9e8:	f001 fdea 	bl	800f5c0 <vPortFree>
 800d9ec:	e001      	b.n	800d9f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d017      	beq.n	800da28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da00:	88fa      	ldrh	r2, [r7, #6]
 800da02:	2300      	movs	r3, #0
 800da04:	9303      	str	r3, [sp, #12]
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	9302      	str	r3, [sp, #8]
 800da0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0c:	9301      	str	r3, [sp, #4]
 800da0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	68b9      	ldr	r1, [r7, #8]
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f000 f80e 	bl	800da38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da1c:	69f8      	ldr	r0, [r7, #28]
 800da1e:	f000 f89b 	bl	800db58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da22:	2301      	movs	r3, #1
 800da24:	61bb      	str	r3, [r7, #24]
 800da26:	e002      	b.n	800da2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da28:	f04f 33ff 	mov.w	r3, #4294967295
 800da2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da2e:	69bb      	ldr	r3, [r7, #24]
	}
 800da30:	4618      	mov	r0, r3
 800da32:	3720      	adds	r7, #32
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b088      	sub	sp, #32
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	607a      	str	r2, [r7, #4]
 800da44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	461a      	mov	r2, r3
 800da50:	21a5      	movs	r1, #165	; 0xa5
 800da52:	f002 fe73 	bl	801073c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800da56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800da60:	3b01      	subs	r3, #1
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	4413      	add	r3, r2
 800da66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	f023 0307 	bic.w	r3, r3, #7
 800da6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	f003 0307 	and.w	r3, r3, #7
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00a      	beq.n	800da90 <prvInitialiseNewTask+0x58>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	617b      	str	r3, [r7, #20]
}
 800da8c:	bf00      	nop
 800da8e:	e7fe      	b.n	800da8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d01f      	beq.n	800dad6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da96:	2300      	movs	r3, #0
 800da98:	61fb      	str	r3, [r7, #28]
 800da9a:	e012      	b.n	800dac2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800da9c:	68ba      	ldr	r2, [r7, #8]
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	4413      	add	r3, r2
 800daa2:	7819      	ldrb	r1, [r3, #0]
 800daa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	4413      	add	r3, r2
 800daaa:	3334      	adds	r3, #52	; 0x34
 800daac:	460a      	mov	r2, r1
 800daae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	4413      	add	r3, r2
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d006      	beq.n	800daca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dabc:	69fb      	ldr	r3, [r7, #28]
 800dabe:	3301      	adds	r3, #1
 800dac0:	61fb      	str	r3, [r7, #28]
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	2b0f      	cmp	r3, #15
 800dac6:	d9e9      	bls.n	800da9c <prvInitialiseNewTask+0x64>
 800dac8:	e000      	b.n	800dacc <prvInitialiseNewTask+0x94>
			{
				break;
 800daca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dad4:	e003      	b.n	800dade <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad8:	2200      	movs	r2, #0
 800dada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae0:	2b37      	cmp	r3, #55	; 0x37
 800dae2:	d901      	bls.n	800dae8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dae4:	2337      	movs	r3, #55	; 0x37
 800dae6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800daee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800daf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf6:	2200      	movs	r2, #0
 800daf8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafc:	3304      	adds	r3, #4
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fe fe56 	bl	800c7b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db06:	3318      	adds	r3, #24
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fe fe51 	bl	800c7b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db26:	2200      	movs	r2, #0
 800db28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db32:	683a      	ldr	r2, [r7, #0]
 800db34:	68f9      	ldr	r1, [r7, #12]
 800db36:	69b8      	ldr	r0, [r7, #24]
 800db38:	f001 fa26 	bl	800ef88 <pxPortInitialiseStack>
 800db3c:	4602      	mov	r2, r0
 800db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800db42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db4e:	bf00      	nop
 800db50:	3720      	adds	r7, #32
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
	...

0800db58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db60:	f001 fb40 	bl	800f1e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db64:	4b2d      	ldr	r3, [pc, #180]	; (800dc1c <prvAddNewTaskToReadyList+0xc4>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	3301      	adds	r3, #1
 800db6a:	4a2c      	ldr	r2, [pc, #176]	; (800dc1c <prvAddNewTaskToReadyList+0xc4>)
 800db6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db6e:	4b2c      	ldr	r3, [pc, #176]	; (800dc20 <prvAddNewTaskToReadyList+0xc8>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d109      	bne.n	800db8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db76:	4a2a      	ldr	r2, [pc, #168]	; (800dc20 <prvAddNewTaskToReadyList+0xc8>)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db7c:	4b27      	ldr	r3, [pc, #156]	; (800dc1c <prvAddNewTaskToReadyList+0xc4>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2b01      	cmp	r3, #1
 800db82:	d110      	bne.n	800dba6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db84:	f000 fc16 	bl	800e3b4 <prvInitialiseTaskLists>
 800db88:	e00d      	b.n	800dba6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db8a:	4b26      	ldr	r3, [pc, #152]	; (800dc24 <prvAddNewTaskToReadyList+0xcc>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d109      	bne.n	800dba6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db92:	4b23      	ldr	r3, [pc, #140]	; (800dc20 <prvAddNewTaskToReadyList+0xc8>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d802      	bhi.n	800dba6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dba0:	4a1f      	ldr	r2, [pc, #124]	; (800dc20 <prvAddNewTaskToReadyList+0xc8>)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dba6:	4b20      	ldr	r3, [pc, #128]	; (800dc28 <prvAddNewTaskToReadyList+0xd0>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	4a1e      	ldr	r2, [pc, #120]	; (800dc28 <prvAddNewTaskToReadyList+0xd0>)
 800dbae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dbb0:	4b1d      	ldr	r3, [pc, #116]	; (800dc28 <prvAddNewTaskToReadyList+0xd0>)
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbbc:	4b1b      	ldr	r3, [pc, #108]	; (800dc2c <prvAddNewTaskToReadyList+0xd4>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d903      	bls.n	800dbcc <prvAddNewTaskToReadyList+0x74>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc8:	4a18      	ldr	r2, [pc, #96]	; (800dc2c <prvAddNewTaskToReadyList+0xd4>)
 800dbca:	6013      	str	r3, [r2, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	4413      	add	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4a15      	ldr	r2, [pc, #84]	; (800dc30 <prvAddNewTaskToReadyList+0xd8>)
 800dbda:	441a      	add	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	3304      	adds	r3, #4
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	4610      	mov	r0, r2
 800dbe4:	f7fe fdf1 	bl	800c7ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dbe8:	f001 fb2c 	bl	800f244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dbec:	4b0d      	ldr	r3, [pc, #52]	; (800dc24 <prvAddNewTaskToReadyList+0xcc>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00e      	beq.n	800dc12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dbf4:	4b0a      	ldr	r3, [pc, #40]	; (800dc20 <prvAddNewTaskToReadyList+0xc8>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d207      	bcs.n	800dc12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc02:	4b0c      	ldr	r3, [pc, #48]	; (800dc34 <prvAddNewTaskToReadyList+0xdc>)
 800dc04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc08:	601a      	str	r2, [r3, #0]
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc12:	bf00      	nop
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	20001440 	.word	0x20001440
 800dc20:	20000f6c 	.word	0x20000f6c
 800dc24:	2000144c 	.word	0x2000144c
 800dc28:	2000145c 	.word	0x2000145c
 800dc2c:	20001448 	.word	0x20001448
 800dc30:	20000f70 	.word	0x20000f70
 800dc34:	e000ed04 	.word	0xe000ed04

0800dc38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dc40:	2300      	movs	r3, #0
 800dc42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d017      	beq.n	800dc7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dc4a:	4b13      	ldr	r3, [pc, #76]	; (800dc98 <vTaskDelay+0x60>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00a      	beq.n	800dc68 <vTaskDelay+0x30>
	__asm volatile
 800dc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc56:	f383 8811 	msr	BASEPRI, r3
 800dc5a:	f3bf 8f6f 	isb	sy
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	60bb      	str	r3, [r7, #8]
}
 800dc64:	bf00      	nop
 800dc66:	e7fe      	b.n	800dc66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dc68:	f000 f880 	bl	800dd6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 fde8 	bl	800e844 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc74:	f000 f888 	bl	800dd88 <xTaskResumeAll>
 800dc78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d107      	bne.n	800dc90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dc80:	4b06      	ldr	r3, [pc, #24]	; (800dc9c <vTaskDelay+0x64>)
 800dc82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc86:	601a      	str	r2, [r3, #0]
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc90:	bf00      	nop
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	20001468 	.word	0x20001468
 800dc9c:	e000ed04 	.word	0xe000ed04

0800dca0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b08a      	sub	sp, #40	; 0x28
 800dca4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dca6:	2300      	movs	r3, #0
 800dca8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dcae:	463a      	mov	r2, r7
 800dcb0:	1d39      	adds	r1, r7, #4
 800dcb2:	f107 0308 	add.w	r3, r7, #8
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fe fd26 	bl	800c708 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dcbc:	6839      	ldr	r1, [r7, #0]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	68ba      	ldr	r2, [r7, #8]
 800dcc2:	9202      	str	r2, [sp, #8]
 800dcc4:	9301      	str	r3, [sp, #4]
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	2300      	movs	r3, #0
 800dccc:	460a      	mov	r2, r1
 800dcce:	4921      	ldr	r1, [pc, #132]	; (800dd54 <vTaskStartScheduler+0xb4>)
 800dcd0:	4821      	ldr	r0, [pc, #132]	; (800dd58 <vTaskStartScheduler+0xb8>)
 800dcd2:	f7ff fe0f 	bl	800d8f4 <xTaskCreateStatic>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	4a20      	ldr	r2, [pc, #128]	; (800dd5c <vTaskStartScheduler+0xbc>)
 800dcda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dcdc:	4b1f      	ldr	r3, [pc, #124]	; (800dd5c <vTaskStartScheduler+0xbc>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d002      	beq.n	800dcea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dce4:	2301      	movs	r3, #1
 800dce6:	617b      	str	r3, [r7, #20]
 800dce8:	e001      	b.n	800dcee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dcea:	2300      	movs	r3, #0
 800dcec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d102      	bne.n	800dcfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dcf4:	f000 fdfa 	bl	800e8ec <xTimerCreateTimerTask>
 800dcf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d116      	bne.n	800dd2e <vTaskStartScheduler+0x8e>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	613b      	str	r3, [r7, #16]
}
 800dd12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd14:	4b12      	ldr	r3, [pc, #72]	; (800dd60 <vTaskStartScheduler+0xc0>)
 800dd16:	f04f 32ff 	mov.w	r2, #4294967295
 800dd1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd1c:	4b11      	ldr	r3, [pc, #68]	; (800dd64 <vTaskStartScheduler+0xc4>)
 800dd1e:	2201      	movs	r2, #1
 800dd20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd22:	4b11      	ldr	r3, [pc, #68]	; (800dd68 <vTaskStartScheduler+0xc8>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd28:	f001 f9ba 	bl	800f0a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd2c:	e00e      	b.n	800dd4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd34:	d10a      	bne.n	800dd4c <vTaskStartScheduler+0xac>
	__asm volatile
 800dd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3a:	f383 8811 	msr	BASEPRI, r3
 800dd3e:	f3bf 8f6f 	isb	sy
 800dd42:	f3bf 8f4f 	dsb	sy
 800dd46:	60fb      	str	r3, [r7, #12]
}
 800dd48:	bf00      	nop
 800dd4a:	e7fe      	b.n	800dd4a <vTaskStartScheduler+0xaa>
}
 800dd4c:	bf00      	nop
 800dd4e:	3718      	adds	r7, #24
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	08013cac 	.word	0x08013cac
 800dd58:	0800e385 	.word	0x0800e385
 800dd5c:	20001464 	.word	0x20001464
 800dd60:	20001460 	.word	0x20001460
 800dd64:	2000144c 	.word	0x2000144c
 800dd68:	20001444 	.word	0x20001444

0800dd6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dd70:	4b04      	ldr	r3, [pc, #16]	; (800dd84 <vTaskSuspendAll+0x18>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	3301      	adds	r3, #1
 800dd76:	4a03      	ldr	r2, [pc, #12]	; (800dd84 <vTaskSuspendAll+0x18>)
 800dd78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dd7a:	bf00      	nop
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr
 800dd84:	20001468 	.word	0x20001468

0800dd88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd92:	2300      	movs	r3, #0
 800dd94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd96:	4b42      	ldr	r3, [pc, #264]	; (800dea0 <xTaskResumeAll+0x118>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10a      	bne.n	800ddb4 <xTaskResumeAll+0x2c>
	__asm volatile
 800dd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda2:	f383 8811 	msr	BASEPRI, r3
 800dda6:	f3bf 8f6f 	isb	sy
 800ddaa:	f3bf 8f4f 	dsb	sy
 800ddae:	603b      	str	r3, [r7, #0]
}
 800ddb0:	bf00      	nop
 800ddb2:	e7fe      	b.n	800ddb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ddb4:	f001 fa16 	bl	800f1e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ddb8:	4b39      	ldr	r3, [pc, #228]	; (800dea0 <xTaskResumeAll+0x118>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	4a38      	ldr	r2, [pc, #224]	; (800dea0 <xTaskResumeAll+0x118>)
 800ddc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddc2:	4b37      	ldr	r3, [pc, #220]	; (800dea0 <xTaskResumeAll+0x118>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d162      	bne.n	800de90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ddca:	4b36      	ldr	r3, [pc, #216]	; (800dea4 <xTaskResumeAll+0x11c>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d05e      	beq.n	800de90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddd2:	e02f      	b.n	800de34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddd4:	4b34      	ldr	r3, [pc, #208]	; (800dea8 <xTaskResumeAll+0x120>)
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	3318      	adds	r3, #24
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7fe fd4f 	bl	800c884 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	3304      	adds	r3, #4
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fe fd4a 	bl	800c884 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf4:	4b2d      	ldr	r3, [pc, #180]	; (800deac <xTaskResumeAll+0x124>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d903      	bls.n	800de04 <xTaskResumeAll+0x7c>
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de00:	4a2a      	ldr	r2, [pc, #168]	; (800deac <xTaskResumeAll+0x124>)
 800de02:	6013      	str	r3, [r2, #0]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de08:	4613      	mov	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4413      	add	r3, r2
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	4a27      	ldr	r2, [pc, #156]	; (800deb0 <xTaskResumeAll+0x128>)
 800de12:	441a      	add	r2, r3
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	3304      	adds	r3, #4
 800de18:	4619      	mov	r1, r3
 800de1a:	4610      	mov	r0, r2
 800de1c:	f7fe fcd5 	bl	800c7ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de24:	4b23      	ldr	r3, [pc, #140]	; (800deb4 <xTaskResumeAll+0x12c>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d302      	bcc.n	800de34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800de2e:	4b22      	ldr	r3, [pc, #136]	; (800deb8 <xTaskResumeAll+0x130>)
 800de30:	2201      	movs	r2, #1
 800de32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de34:	4b1c      	ldr	r3, [pc, #112]	; (800dea8 <xTaskResumeAll+0x120>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1cb      	bne.n	800ddd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d001      	beq.n	800de46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de42:	f000 fb55 	bl	800e4f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800de46:	4b1d      	ldr	r3, [pc, #116]	; (800debc <xTaskResumeAll+0x134>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d010      	beq.n	800de74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de52:	f000 f847 	bl	800dee4 <xTaskIncrementTick>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800de5c:	4b16      	ldr	r3, [pc, #88]	; (800deb8 <xTaskResumeAll+0x130>)
 800de5e:	2201      	movs	r2, #1
 800de60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	3b01      	subs	r3, #1
 800de66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d1f1      	bne.n	800de52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800de6e:	4b13      	ldr	r3, [pc, #76]	; (800debc <xTaskResumeAll+0x134>)
 800de70:	2200      	movs	r2, #0
 800de72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de74:	4b10      	ldr	r3, [pc, #64]	; (800deb8 <xTaskResumeAll+0x130>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d009      	beq.n	800de90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de7c:	2301      	movs	r3, #1
 800de7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de80:	4b0f      	ldr	r3, [pc, #60]	; (800dec0 <xTaskResumeAll+0x138>)
 800de82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de86:	601a      	str	r2, [r3, #0]
 800de88:	f3bf 8f4f 	dsb	sy
 800de8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de90:	f001 f9d8 	bl	800f244 <vPortExitCritical>

	return xAlreadyYielded;
 800de94:	68bb      	ldr	r3, [r7, #8]
}
 800de96:	4618      	mov	r0, r3
 800de98:	3710      	adds	r7, #16
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop
 800dea0:	20001468 	.word	0x20001468
 800dea4:	20001440 	.word	0x20001440
 800dea8:	20001400 	.word	0x20001400
 800deac:	20001448 	.word	0x20001448
 800deb0:	20000f70 	.word	0x20000f70
 800deb4:	20000f6c 	.word	0x20000f6c
 800deb8:	20001454 	.word	0x20001454
 800debc:	20001450 	.word	0x20001450
 800dec0:	e000ed04 	.word	0xe000ed04

0800dec4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800deca:	4b05      	ldr	r3, [pc, #20]	; (800dee0 <xTaskGetTickCount+0x1c>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ded0:	687b      	ldr	r3, [r7, #4]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	370c      	adds	r7, #12
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr
 800dede:	bf00      	nop
 800dee0:	20001444 	.word	0x20001444

0800dee4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b086      	sub	sp, #24
 800dee8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800deea:	2300      	movs	r3, #0
 800deec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deee:	4b4f      	ldr	r3, [pc, #316]	; (800e02c <xTaskIncrementTick+0x148>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	f040 808f 	bne.w	800e016 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800def8:	4b4d      	ldr	r3, [pc, #308]	; (800e030 <xTaskIncrementTick+0x14c>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	3301      	adds	r3, #1
 800defe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df00:	4a4b      	ldr	r2, [pc, #300]	; (800e030 <xTaskIncrementTick+0x14c>)
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d120      	bne.n	800df4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800df0c:	4b49      	ldr	r3, [pc, #292]	; (800e034 <xTaskIncrementTick+0x150>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00a      	beq.n	800df2c <xTaskIncrementTick+0x48>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	603b      	str	r3, [r7, #0]
}
 800df28:	bf00      	nop
 800df2a:	e7fe      	b.n	800df2a <xTaskIncrementTick+0x46>
 800df2c:	4b41      	ldr	r3, [pc, #260]	; (800e034 <xTaskIncrementTick+0x150>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	60fb      	str	r3, [r7, #12]
 800df32:	4b41      	ldr	r3, [pc, #260]	; (800e038 <xTaskIncrementTick+0x154>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a3f      	ldr	r2, [pc, #252]	; (800e034 <xTaskIncrementTick+0x150>)
 800df38:	6013      	str	r3, [r2, #0]
 800df3a:	4a3f      	ldr	r2, [pc, #252]	; (800e038 <xTaskIncrementTick+0x154>)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	6013      	str	r3, [r2, #0]
 800df40:	4b3e      	ldr	r3, [pc, #248]	; (800e03c <xTaskIncrementTick+0x158>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	3301      	adds	r3, #1
 800df46:	4a3d      	ldr	r2, [pc, #244]	; (800e03c <xTaskIncrementTick+0x158>)
 800df48:	6013      	str	r3, [r2, #0]
 800df4a:	f000 fad1 	bl	800e4f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df4e:	4b3c      	ldr	r3, [pc, #240]	; (800e040 <xTaskIncrementTick+0x15c>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	693a      	ldr	r2, [r7, #16]
 800df54:	429a      	cmp	r2, r3
 800df56:	d349      	bcc.n	800dfec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df58:	4b36      	ldr	r3, [pc, #216]	; (800e034 <xTaskIncrementTick+0x150>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d104      	bne.n	800df6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df62:	4b37      	ldr	r3, [pc, #220]	; (800e040 <xTaskIncrementTick+0x15c>)
 800df64:	f04f 32ff 	mov.w	r2, #4294967295
 800df68:	601a      	str	r2, [r3, #0]
					break;
 800df6a:	e03f      	b.n	800dfec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df6c:	4b31      	ldr	r3, [pc, #196]	; (800e034 <xTaskIncrementTick+0x150>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	429a      	cmp	r2, r3
 800df82:	d203      	bcs.n	800df8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df84:	4a2e      	ldr	r2, [pc, #184]	; (800e040 <xTaskIncrementTick+0x15c>)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df8a:	e02f      	b.n	800dfec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	3304      	adds	r3, #4
 800df90:	4618      	mov	r0, r3
 800df92:	f7fe fc77 	bl	800c884 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d004      	beq.n	800dfa8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	3318      	adds	r3, #24
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fe fc6e 	bl	800c884 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfac:	4b25      	ldr	r3, [pc, #148]	; (800e044 <xTaskIncrementTick+0x160>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d903      	bls.n	800dfbc <xTaskIncrementTick+0xd8>
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb8:	4a22      	ldr	r2, [pc, #136]	; (800e044 <xTaskIncrementTick+0x160>)
 800dfba:	6013      	str	r3, [r2, #0]
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	009b      	lsls	r3, r3, #2
 800dfc4:	4413      	add	r3, r2
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	4a1f      	ldr	r2, [pc, #124]	; (800e048 <xTaskIncrementTick+0x164>)
 800dfca:	441a      	add	r2, r3
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	3304      	adds	r3, #4
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	4610      	mov	r0, r2
 800dfd4:	f7fe fbf9 	bl	800c7ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfdc:	4b1b      	ldr	r3, [pc, #108]	; (800e04c <xTaskIncrementTick+0x168>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d3b8      	bcc.n	800df58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfea:	e7b5      	b.n	800df58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dfec:	4b17      	ldr	r3, [pc, #92]	; (800e04c <xTaskIncrementTick+0x168>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff2:	4915      	ldr	r1, [pc, #84]	; (800e048 <xTaskIncrementTick+0x164>)
 800dff4:	4613      	mov	r3, r2
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	4413      	add	r3, r2
 800dffa:	009b      	lsls	r3, r3, #2
 800dffc:	440b      	add	r3, r1
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2b01      	cmp	r3, #1
 800e002:	d901      	bls.n	800e008 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e004:	2301      	movs	r3, #1
 800e006:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e008:	4b11      	ldr	r3, [pc, #68]	; (800e050 <xTaskIncrementTick+0x16c>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d007      	beq.n	800e020 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e010:	2301      	movs	r3, #1
 800e012:	617b      	str	r3, [r7, #20]
 800e014:	e004      	b.n	800e020 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e016:	4b0f      	ldr	r3, [pc, #60]	; (800e054 <xTaskIncrementTick+0x170>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	3301      	adds	r3, #1
 800e01c:	4a0d      	ldr	r2, [pc, #52]	; (800e054 <xTaskIncrementTick+0x170>)
 800e01e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e020:	697b      	ldr	r3, [r7, #20]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3718      	adds	r7, #24
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20001468 	.word	0x20001468
 800e030:	20001444 	.word	0x20001444
 800e034:	200013f8 	.word	0x200013f8
 800e038:	200013fc 	.word	0x200013fc
 800e03c:	20001458 	.word	0x20001458
 800e040:	20001460 	.word	0x20001460
 800e044:	20001448 	.word	0x20001448
 800e048:	20000f70 	.word	0x20000f70
 800e04c:	20000f6c 	.word	0x20000f6c
 800e050:	20001454 	.word	0x20001454
 800e054:	20001450 	.word	0x20001450

0800e058 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e05e:	4b28      	ldr	r3, [pc, #160]	; (800e100 <vTaskSwitchContext+0xa8>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d003      	beq.n	800e06e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e066:	4b27      	ldr	r3, [pc, #156]	; (800e104 <vTaskSwitchContext+0xac>)
 800e068:	2201      	movs	r2, #1
 800e06a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e06c:	e041      	b.n	800e0f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e06e:	4b25      	ldr	r3, [pc, #148]	; (800e104 <vTaskSwitchContext+0xac>)
 800e070:	2200      	movs	r2, #0
 800e072:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e074:	4b24      	ldr	r3, [pc, #144]	; (800e108 <vTaskSwitchContext+0xb0>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	60fb      	str	r3, [r7, #12]
 800e07a:	e010      	b.n	800e09e <vTaskSwitchContext+0x46>
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d10a      	bne.n	800e098 <vTaskSwitchContext+0x40>
	__asm volatile
 800e082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e086:	f383 8811 	msr	BASEPRI, r3
 800e08a:	f3bf 8f6f 	isb	sy
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	607b      	str	r3, [r7, #4]
}
 800e094:	bf00      	nop
 800e096:	e7fe      	b.n	800e096 <vTaskSwitchContext+0x3e>
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	3b01      	subs	r3, #1
 800e09c:	60fb      	str	r3, [r7, #12]
 800e09e:	491b      	ldr	r1, [pc, #108]	; (800e10c <vTaskSwitchContext+0xb4>)
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	4413      	add	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	440b      	add	r3, r1
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d0e4      	beq.n	800e07c <vTaskSwitchContext+0x24>
 800e0b2:	68fa      	ldr	r2, [r7, #12]
 800e0b4:	4613      	mov	r3, r2
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	4413      	add	r3, r2
 800e0ba:	009b      	lsls	r3, r3, #2
 800e0bc:	4a13      	ldr	r2, [pc, #76]	; (800e10c <vTaskSwitchContext+0xb4>)
 800e0be:	4413      	add	r3, r2
 800e0c0:	60bb      	str	r3, [r7, #8]
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	605a      	str	r2, [r3, #4]
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	685a      	ldr	r2, [r3, #4]
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	3308      	adds	r3, #8
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d104      	bne.n	800e0e2 <vTaskSwitchContext+0x8a>
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	685a      	ldr	r2, [r3, #4]
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	605a      	str	r2, [r3, #4]
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	68db      	ldr	r3, [r3, #12]
 800e0e8:	4a09      	ldr	r2, [pc, #36]	; (800e110 <vTaskSwitchContext+0xb8>)
 800e0ea:	6013      	str	r3, [r2, #0]
 800e0ec:	4a06      	ldr	r2, [pc, #24]	; (800e108 <vTaskSwitchContext+0xb0>)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	6013      	str	r3, [r2, #0]
}
 800e0f2:	bf00      	nop
 800e0f4:	3714      	adds	r7, #20
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop
 800e100:	20001468 	.word	0x20001468
 800e104:	20001454 	.word	0x20001454
 800e108:	20001448 	.word	0x20001448
 800e10c:	20000f70 	.word	0x20000f70
 800e110:	20000f6c 	.word	0x20000f6c

0800e114 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10a      	bne.n	800e13a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	60fb      	str	r3, [r7, #12]
}
 800e136:	bf00      	nop
 800e138:	e7fe      	b.n	800e138 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e13a:	4b07      	ldr	r3, [pc, #28]	; (800e158 <vTaskPlaceOnEventList+0x44>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	3318      	adds	r3, #24
 800e140:	4619      	mov	r1, r3
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f7fe fb65 	bl	800c812 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e148:	2101      	movs	r1, #1
 800e14a:	6838      	ldr	r0, [r7, #0]
 800e14c:	f000 fb7a 	bl	800e844 <prvAddCurrentTaskToDelayedList>
}
 800e150:	bf00      	nop
 800e152:	3710      	adds	r7, #16
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}
 800e158:	20000f6c 	.word	0x20000f6c

0800e15c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b086      	sub	sp, #24
 800e160:	af00      	add	r7, sp, #0
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	60b9      	str	r1, [r7, #8]
 800e166:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10a      	bne.n	800e184 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	617b      	str	r3, [r7, #20]
}
 800e180:	bf00      	nop
 800e182:	e7fe      	b.n	800e182 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e184:	4b0a      	ldr	r3, [pc, #40]	; (800e1b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	3318      	adds	r3, #24
 800e18a:	4619      	mov	r1, r3
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f7fe fb1c 	bl	800c7ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e198:	f04f 33ff 	mov.w	r3, #4294967295
 800e19c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e19e:	6879      	ldr	r1, [r7, #4]
 800e1a0:	68b8      	ldr	r0, [r7, #8]
 800e1a2:	f000 fb4f 	bl	800e844 <prvAddCurrentTaskToDelayedList>
	}
 800e1a6:	bf00      	nop
 800e1a8:	3718      	adds	r7, #24
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	20000f6c 	.word	0x20000f6c

0800e1b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	68db      	ldr	r3, [r3, #12]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d10a      	bne.n	800e1e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	60fb      	str	r3, [r7, #12]
}
 800e1dc:	bf00      	nop
 800e1de:	e7fe      	b.n	800e1de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	3318      	adds	r3, #24
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7fe fb4d 	bl	800c884 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1ea:	4b1e      	ldr	r3, [pc, #120]	; (800e264 <xTaskRemoveFromEventList+0xb0>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d11d      	bne.n	800e22e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	3304      	adds	r3, #4
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fe fb44 	bl	800c884 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e200:	4b19      	ldr	r3, [pc, #100]	; (800e268 <xTaskRemoveFromEventList+0xb4>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	429a      	cmp	r2, r3
 800e206:	d903      	bls.n	800e210 <xTaskRemoveFromEventList+0x5c>
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20c:	4a16      	ldr	r2, [pc, #88]	; (800e268 <xTaskRemoveFromEventList+0xb4>)
 800e20e:	6013      	str	r3, [r2, #0]
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e214:	4613      	mov	r3, r2
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	4413      	add	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4a13      	ldr	r2, [pc, #76]	; (800e26c <xTaskRemoveFromEventList+0xb8>)
 800e21e:	441a      	add	r2, r3
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	3304      	adds	r3, #4
 800e224:	4619      	mov	r1, r3
 800e226:	4610      	mov	r0, r2
 800e228:	f7fe facf 	bl	800c7ca <vListInsertEnd>
 800e22c:	e005      	b.n	800e23a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	3318      	adds	r3, #24
 800e232:	4619      	mov	r1, r3
 800e234:	480e      	ldr	r0, [pc, #56]	; (800e270 <xTaskRemoveFromEventList+0xbc>)
 800e236:	f7fe fac8 	bl	800c7ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e23e:	4b0d      	ldr	r3, [pc, #52]	; (800e274 <xTaskRemoveFromEventList+0xc0>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e244:	429a      	cmp	r2, r3
 800e246:	d905      	bls.n	800e254 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e248:	2301      	movs	r3, #1
 800e24a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e24c:	4b0a      	ldr	r3, [pc, #40]	; (800e278 <xTaskRemoveFromEventList+0xc4>)
 800e24e:	2201      	movs	r2, #1
 800e250:	601a      	str	r2, [r3, #0]
 800e252:	e001      	b.n	800e258 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e254:	2300      	movs	r3, #0
 800e256:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e258:	697b      	ldr	r3, [r7, #20]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3718      	adds	r7, #24
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	20001468 	.word	0x20001468
 800e268:	20001448 	.word	0x20001448
 800e26c:	20000f70 	.word	0x20000f70
 800e270:	20001400 	.word	0x20001400
 800e274:	20000f6c 	.word	0x20000f6c
 800e278:	20001454 	.word	0x20001454

0800e27c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e27c:	b480      	push	{r7}
 800e27e:	b083      	sub	sp, #12
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e284:	4b06      	ldr	r3, [pc, #24]	; (800e2a0 <vTaskInternalSetTimeOutState+0x24>)
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e28c:	4b05      	ldr	r3, [pc, #20]	; (800e2a4 <vTaskInternalSetTimeOutState+0x28>)
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	605a      	str	r2, [r3, #4]
}
 800e294:	bf00      	nop
 800e296:	370c      	adds	r7, #12
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr
 800e2a0:	20001458 	.word	0x20001458
 800e2a4:	20001444 	.word	0x20001444

0800e2a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b088      	sub	sp, #32
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d10a      	bne.n	800e2ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2bc:	f383 8811 	msr	BASEPRI, r3
 800e2c0:	f3bf 8f6f 	isb	sy
 800e2c4:	f3bf 8f4f 	dsb	sy
 800e2c8:	613b      	str	r3, [r7, #16]
}
 800e2ca:	bf00      	nop
 800e2cc:	e7fe      	b.n	800e2cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d10a      	bne.n	800e2ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d8:	f383 8811 	msr	BASEPRI, r3
 800e2dc:	f3bf 8f6f 	isb	sy
 800e2e0:	f3bf 8f4f 	dsb	sy
 800e2e4:	60fb      	str	r3, [r7, #12]
}
 800e2e6:	bf00      	nop
 800e2e8:	e7fe      	b.n	800e2e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e2ea:	f000 ff7b 	bl	800f1e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e2ee:	4b1d      	ldr	r3, [pc, #116]	; (800e364 <xTaskCheckForTimeOut+0xbc>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	69ba      	ldr	r2, [r7, #24]
 800e2fa:	1ad3      	subs	r3, r2, r3
 800e2fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e306:	d102      	bne.n	800e30e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e308:	2300      	movs	r3, #0
 800e30a:	61fb      	str	r3, [r7, #28]
 800e30c:	e023      	b.n	800e356 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	4b15      	ldr	r3, [pc, #84]	; (800e368 <xTaskCheckForTimeOut+0xc0>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	429a      	cmp	r2, r3
 800e318:	d007      	beq.n	800e32a <xTaskCheckForTimeOut+0x82>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	69ba      	ldr	r2, [r7, #24]
 800e320:	429a      	cmp	r2, r3
 800e322:	d302      	bcc.n	800e32a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e324:	2301      	movs	r3, #1
 800e326:	61fb      	str	r3, [r7, #28]
 800e328:	e015      	b.n	800e356 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	697a      	ldr	r2, [r7, #20]
 800e330:	429a      	cmp	r2, r3
 800e332:	d20b      	bcs.n	800e34c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	1ad2      	subs	r2, r2, r3
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7ff ff9b 	bl	800e27c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e346:	2300      	movs	r3, #0
 800e348:	61fb      	str	r3, [r7, #28]
 800e34a:	e004      	b.n	800e356 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	2200      	movs	r2, #0
 800e350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e352:	2301      	movs	r3, #1
 800e354:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e356:	f000 ff75 	bl	800f244 <vPortExitCritical>

	return xReturn;
 800e35a:	69fb      	ldr	r3, [r7, #28]
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3720      	adds	r7, #32
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}
 800e364:	20001444 	.word	0x20001444
 800e368:	20001458 	.word	0x20001458

0800e36c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e36c:	b480      	push	{r7}
 800e36e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e370:	4b03      	ldr	r3, [pc, #12]	; (800e380 <vTaskMissedYield+0x14>)
 800e372:	2201      	movs	r2, #1
 800e374:	601a      	str	r2, [r3, #0]
}
 800e376:	bf00      	nop
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr
 800e380:	20001454 	.word	0x20001454

0800e384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e38c:	f000 f852 	bl	800e434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e390:	4b06      	ldr	r3, [pc, #24]	; (800e3ac <prvIdleTask+0x28>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2b01      	cmp	r3, #1
 800e396:	d9f9      	bls.n	800e38c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e398:	4b05      	ldr	r3, [pc, #20]	; (800e3b0 <prvIdleTask+0x2c>)
 800e39a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e39e:	601a      	str	r2, [r3, #0]
 800e3a0:	f3bf 8f4f 	dsb	sy
 800e3a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3a8:	e7f0      	b.n	800e38c <prvIdleTask+0x8>
 800e3aa:	bf00      	nop
 800e3ac:	20000f70 	.word	0x20000f70
 800e3b0:	e000ed04 	.word	0xe000ed04

0800e3b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	607b      	str	r3, [r7, #4]
 800e3be:	e00c      	b.n	800e3da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4413      	add	r3, r2
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	4a12      	ldr	r2, [pc, #72]	; (800e414 <prvInitialiseTaskLists+0x60>)
 800e3cc:	4413      	add	r3, r2
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fe f9ce 	bl	800c770 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	607b      	str	r3, [r7, #4]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2b37      	cmp	r3, #55	; 0x37
 800e3de:	d9ef      	bls.n	800e3c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3e0:	480d      	ldr	r0, [pc, #52]	; (800e418 <prvInitialiseTaskLists+0x64>)
 800e3e2:	f7fe f9c5 	bl	800c770 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e3e6:	480d      	ldr	r0, [pc, #52]	; (800e41c <prvInitialiseTaskLists+0x68>)
 800e3e8:	f7fe f9c2 	bl	800c770 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e3ec:	480c      	ldr	r0, [pc, #48]	; (800e420 <prvInitialiseTaskLists+0x6c>)
 800e3ee:	f7fe f9bf 	bl	800c770 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e3f2:	480c      	ldr	r0, [pc, #48]	; (800e424 <prvInitialiseTaskLists+0x70>)
 800e3f4:	f7fe f9bc 	bl	800c770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e3f8:	480b      	ldr	r0, [pc, #44]	; (800e428 <prvInitialiseTaskLists+0x74>)
 800e3fa:	f7fe f9b9 	bl	800c770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e3fe:	4b0b      	ldr	r3, [pc, #44]	; (800e42c <prvInitialiseTaskLists+0x78>)
 800e400:	4a05      	ldr	r2, [pc, #20]	; (800e418 <prvInitialiseTaskLists+0x64>)
 800e402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e404:	4b0a      	ldr	r3, [pc, #40]	; (800e430 <prvInitialiseTaskLists+0x7c>)
 800e406:	4a05      	ldr	r2, [pc, #20]	; (800e41c <prvInitialiseTaskLists+0x68>)
 800e408:	601a      	str	r2, [r3, #0]
}
 800e40a:	bf00      	nop
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	20000f70 	.word	0x20000f70
 800e418:	200013d0 	.word	0x200013d0
 800e41c:	200013e4 	.word	0x200013e4
 800e420:	20001400 	.word	0x20001400
 800e424:	20001414 	.word	0x20001414
 800e428:	2000142c 	.word	0x2000142c
 800e42c:	200013f8 	.word	0x200013f8
 800e430:	200013fc 	.word	0x200013fc

0800e434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e43a:	e019      	b.n	800e470 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e43c:	f000 fed2 	bl	800f1e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e440:	4b10      	ldr	r3, [pc, #64]	; (800e484 <prvCheckTasksWaitingTermination+0x50>)
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	3304      	adds	r3, #4
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fe fa19 	bl	800c884 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e452:	4b0d      	ldr	r3, [pc, #52]	; (800e488 <prvCheckTasksWaitingTermination+0x54>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	3b01      	subs	r3, #1
 800e458:	4a0b      	ldr	r2, [pc, #44]	; (800e488 <prvCheckTasksWaitingTermination+0x54>)
 800e45a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e45c:	4b0b      	ldr	r3, [pc, #44]	; (800e48c <prvCheckTasksWaitingTermination+0x58>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	3b01      	subs	r3, #1
 800e462:	4a0a      	ldr	r2, [pc, #40]	; (800e48c <prvCheckTasksWaitingTermination+0x58>)
 800e464:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e466:	f000 feed 	bl	800f244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 f810 	bl	800e490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e470:	4b06      	ldr	r3, [pc, #24]	; (800e48c <prvCheckTasksWaitingTermination+0x58>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d1e1      	bne.n	800e43c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e478:	bf00      	nop
 800e47a:	bf00      	nop
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	20001414 	.word	0x20001414
 800e488:	20001440 	.word	0x20001440
 800e48c:	20001428 	.word	0x20001428

0800e490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d108      	bne.n	800e4b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f001 f88a 	bl	800f5c0 <vPortFree>
				vPortFree( pxTCB );
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f001 f887 	bl	800f5c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4b2:	e018      	b.n	800e4e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d103      	bne.n	800e4c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f001 f87e 	bl	800f5c0 <vPortFree>
	}
 800e4c4:	e00f      	b.n	800e4e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e4cc:	2b02      	cmp	r3, #2
 800e4ce:	d00a      	beq.n	800e4e6 <prvDeleteTCB+0x56>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	60fb      	str	r3, [r7, #12]
}
 800e4e2:	bf00      	nop
 800e4e4:	e7fe      	b.n	800e4e4 <prvDeleteTCB+0x54>
	}
 800e4e6:	bf00      	nop
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
	...

0800e4f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4f6:	4b0c      	ldr	r3, [pc, #48]	; (800e528 <prvResetNextTaskUnblockTime+0x38>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d104      	bne.n	800e50a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e500:	4b0a      	ldr	r3, [pc, #40]	; (800e52c <prvResetNextTaskUnblockTime+0x3c>)
 800e502:	f04f 32ff 	mov.w	r2, #4294967295
 800e506:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e508:	e008      	b.n	800e51c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e50a:	4b07      	ldr	r3, [pc, #28]	; (800e528 <prvResetNextTaskUnblockTime+0x38>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	4a04      	ldr	r2, [pc, #16]	; (800e52c <prvResetNextTaskUnblockTime+0x3c>)
 800e51a:	6013      	str	r3, [r2, #0]
}
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	200013f8 	.word	0x200013f8
 800e52c:	20001460 	.word	0x20001460

0800e530 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e530:	b480      	push	{r7}
 800e532:	b083      	sub	sp, #12
 800e534:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e536:	4b0b      	ldr	r3, [pc, #44]	; (800e564 <xTaskGetSchedulerState+0x34>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d102      	bne.n	800e544 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e53e:	2301      	movs	r3, #1
 800e540:	607b      	str	r3, [r7, #4]
 800e542:	e008      	b.n	800e556 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e544:	4b08      	ldr	r3, [pc, #32]	; (800e568 <xTaskGetSchedulerState+0x38>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d102      	bne.n	800e552 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e54c:	2302      	movs	r3, #2
 800e54e:	607b      	str	r3, [r7, #4]
 800e550:	e001      	b.n	800e556 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e552:	2300      	movs	r3, #0
 800e554:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e556:	687b      	ldr	r3, [r7, #4]
	}
 800e558:	4618      	mov	r0, r3
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr
 800e564:	2000144c 	.word	0x2000144c
 800e568:	20001468 	.word	0x20001468

0800e56c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e578:	2300      	movs	r3, #0
 800e57a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d051      	beq.n	800e626 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e586:	4b2a      	ldr	r3, [pc, #168]	; (800e630 <xTaskPriorityInherit+0xc4>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d241      	bcs.n	800e614 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	699b      	ldr	r3, [r3, #24]
 800e594:	2b00      	cmp	r3, #0
 800e596:	db06      	blt.n	800e5a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e598:	4b25      	ldr	r3, [pc, #148]	; (800e630 <xTaskPriorityInherit+0xc4>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	6959      	ldr	r1, [r3, #20]
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	4a1f      	ldr	r2, [pc, #124]	; (800e634 <xTaskPriorityInherit+0xc8>)
 800e5b8:	4413      	add	r3, r2
 800e5ba:	4299      	cmp	r1, r3
 800e5bc:	d122      	bne.n	800e604 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	3304      	adds	r3, #4
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7fe f95e 	bl	800c884 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5c8:	4b19      	ldr	r3, [pc, #100]	; (800e630 <xTaskPriorityInherit+0xc4>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5d6:	4b18      	ldr	r3, [pc, #96]	; (800e638 <xTaskPriorityInherit+0xcc>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d903      	bls.n	800e5e6 <xTaskPriorityInherit+0x7a>
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e2:	4a15      	ldr	r2, [pc, #84]	; (800e638 <xTaskPriorityInherit+0xcc>)
 800e5e4:	6013      	str	r3, [r2, #0]
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	4413      	add	r3, r2
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	4a10      	ldr	r2, [pc, #64]	; (800e634 <xTaskPriorityInherit+0xc8>)
 800e5f4:	441a      	add	r2, r3
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	3304      	adds	r3, #4
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	f7fe f8e4 	bl	800c7ca <vListInsertEnd>
 800e602:	e004      	b.n	800e60e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e604:	4b0a      	ldr	r3, [pc, #40]	; (800e630 <xTaskPriorityInherit+0xc4>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e60e:	2301      	movs	r3, #1
 800e610:	60fb      	str	r3, [r7, #12]
 800e612:	e008      	b.n	800e626 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e618:	4b05      	ldr	r3, [pc, #20]	; (800e630 <xTaskPriorityInherit+0xc4>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e61e:	429a      	cmp	r2, r3
 800e620:	d201      	bcs.n	800e626 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e622:	2301      	movs	r3, #1
 800e624:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e626:	68fb      	ldr	r3, [r7, #12]
	}
 800e628:	4618      	mov	r0, r3
 800e62a:	3710      	adds	r7, #16
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	20000f6c 	.word	0x20000f6c
 800e634:	20000f70 	.word	0x20000f70
 800e638:	20001448 	.word	0x20001448

0800e63c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b086      	sub	sp, #24
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e648:	2300      	movs	r3, #0
 800e64a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d056      	beq.n	800e700 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e652:	4b2e      	ldr	r3, [pc, #184]	; (800e70c <xTaskPriorityDisinherit+0xd0>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	693a      	ldr	r2, [r7, #16]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d00a      	beq.n	800e672 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e660:	f383 8811 	msr	BASEPRI, r3
 800e664:	f3bf 8f6f 	isb	sy
 800e668:	f3bf 8f4f 	dsb	sy
 800e66c:	60fb      	str	r3, [r7, #12]
}
 800e66e:	bf00      	nop
 800e670:	e7fe      	b.n	800e670 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e676:	2b00      	cmp	r3, #0
 800e678:	d10a      	bne.n	800e690 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e67e:	f383 8811 	msr	BASEPRI, r3
 800e682:	f3bf 8f6f 	isb	sy
 800e686:	f3bf 8f4f 	dsb	sy
 800e68a:	60bb      	str	r3, [r7, #8]
}
 800e68c:	bf00      	nop
 800e68e:	e7fe      	b.n	800e68e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e694:	1e5a      	subs	r2, r3, #1
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d02c      	beq.n	800e700 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d128      	bne.n	800e700 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	3304      	adds	r3, #4
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fe f8e6 	bl	800c884 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6d0:	4b0f      	ldr	r3, [pc, #60]	; (800e710 <xTaskPriorityDisinherit+0xd4>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d903      	bls.n	800e6e0 <xTaskPriorityDisinherit+0xa4>
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6dc:	4a0c      	ldr	r2, [pc, #48]	; (800e710 <xTaskPriorityDisinherit+0xd4>)
 800e6de:	6013      	str	r3, [r2, #0]
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	009b      	lsls	r3, r3, #2
 800e6e8:	4413      	add	r3, r2
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	4a09      	ldr	r2, [pc, #36]	; (800e714 <xTaskPriorityDisinherit+0xd8>)
 800e6ee:	441a      	add	r2, r3
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	3304      	adds	r3, #4
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	4610      	mov	r0, r2
 800e6f8:	f7fe f867 	bl	800c7ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e700:	697b      	ldr	r3, [r7, #20]
	}
 800e702:	4618      	mov	r0, r3
 800e704:	3718      	adds	r7, #24
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	20000f6c 	.word	0x20000f6c
 800e710:	20001448 	.word	0x20001448
 800e714:	20000f70 	.word	0x20000f70

0800e718 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b088      	sub	sp, #32
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e726:	2301      	movs	r3, #1
 800e728:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d06a      	beq.n	800e806 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e734:	2b00      	cmp	r3, #0
 800e736:	d10a      	bne.n	800e74e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	60fb      	str	r3, [r7, #12]
}
 800e74a:	bf00      	nop
 800e74c:	e7fe      	b.n	800e74c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e752:	683a      	ldr	r2, [r7, #0]
 800e754:	429a      	cmp	r2, r3
 800e756:	d902      	bls.n	800e75e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	61fb      	str	r3, [r7, #28]
 800e75c:	e002      	b.n	800e764 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e762:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e768:	69fa      	ldr	r2, [r7, #28]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d04b      	beq.n	800e806 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e772:	697a      	ldr	r2, [r7, #20]
 800e774:	429a      	cmp	r2, r3
 800e776:	d146      	bne.n	800e806 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e778:	4b25      	ldr	r3, [pc, #148]	; (800e810 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	69ba      	ldr	r2, [r7, #24]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d10a      	bne.n	800e798 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e786:	f383 8811 	msr	BASEPRI, r3
 800e78a:	f3bf 8f6f 	isb	sy
 800e78e:	f3bf 8f4f 	dsb	sy
 800e792:	60bb      	str	r3, [r7, #8]
}
 800e794:	bf00      	nop
 800e796:	e7fe      	b.n	800e796 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e79c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	69fa      	ldr	r2, [r7, #28]
 800e7a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	699b      	ldr	r3, [r3, #24]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	db04      	blt.n	800e7b6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	6959      	ldr	r1, [r3, #20]
 800e7ba:	693a      	ldr	r2, [r7, #16]
 800e7bc:	4613      	mov	r3, r2
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	4413      	add	r3, r2
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	4a13      	ldr	r2, [pc, #76]	; (800e814 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e7c6:	4413      	add	r3, r2
 800e7c8:	4299      	cmp	r1, r3
 800e7ca:	d11c      	bne.n	800e806 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	3304      	adds	r3, #4
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7fe f857 	bl	800c884 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7da:	4b0f      	ldr	r3, [pc, #60]	; (800e818 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d903      	bls.n	800e7ea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e6:	4a0c      	ldr	r2, [pc, #48]	; (800e818 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e7e8:	6013      	str	r3, [r2, #0]
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	009b      	lsls	r3, r3, #2
 800e7f2:	4413      	add	r3, r2
 800e7f4:	009b      	lsls	r3, r3, #2
 800e7f6:	4a07      	ldr	r2, [pc, #28]	; (800e814 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e7f8:	441a      	add	r2, r3
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	3304      	adds	r3, #4
 800e7fe:	4619      	mov	r1, r3
 800e800:	4610      	mov	r0, r2
 800e802:	f7fd ffe2 	bl	800c7ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e806:	bf00      	nop
 800e808:	3720      	adds	r7, #32
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	20000f6c 	.word	0x20000f6c
 800e814:	20000f70 	.word	0x20000f70
 800e818:	20001448 	.word	0x20001448

0800e81c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e81c:	b480      	push	{r7}
 800e81e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e820:	4b07      	ldr	r3, [pc, #28]	; (800e840 <pvTaskIncrementMutexHeldCount+0x24>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d004      	beq.n	800e832 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e828:	4b05      	ldr	r3, [pc, #20]	; (800e840 <pvTaskIncrementMutexHeldCount+0x24>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e82e:	3201      	adds	r2, #1
 800e830:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e832:	4b03      	ldr	r3, [pc, #12]	; (800e840 <pvTaskIncrementMutexHeldCount+0x24>)
 800e834:	681b      	ldr	r3, [r3, #0]
	}
 800e836:	4618      	mov	r0, r3
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr
 800e840:	20000f6c 	.word	0x20000f6c

0800e844 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e84e:	4b21      	ldr	r3, [pc, #132]	; (800e8d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e854:	4b20      	ldr	r3, [pc, #128]	; (800e8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	3304      	adds	r3, #4
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7fe f812 	bl	800c884 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e866:	d10a      	bne.n	800e87e <prvAddCurrentTaskToDelayedList+0x3a>
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d007      	beq.n	800e87e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e86e:	4b1a      	ldr	r3, [pc, #104]	; (800e8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	3304      	adds	r3, #4
 800e874:	4619      	mov	r1, r3
 800e876:	4819      	ldr	r0, [pc, #100]	; (800e8dc <prvAddCurrentTaskToDelayedList+0x98>)
 800e878:	f7fd ffa7 	bl	800c7ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e87c:	e026      	b.n	800e8cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	4413      	add	r3, r2
 800e884:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e886:	4b14      	ldr	r3, [pc, #80]	; (800e8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	68ba      	ldr	r2, [r7, #8]
 800e88c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e88e:	68ba      	ldr	r2, [r7, #8]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	429a      	cmp	r2, r3
 800e894:	d209      	bcs.n	800e8aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e896:	4b12      	ldr	r3, [pc, #72]	; (800e8e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	4b0f      	ldr	r3, [pc, #60]	; (800e8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	3304      	adds	r3, #4
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	4610      	mov	r0, r2
 800e8a4:	f7fd ffb5 	bl	800c812 <vListInsert>
}
 800e8a8:	e010      	b.n	800e8cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8aa:	4b0e      	ldr	r3, [pc, #56]	; (800e8e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	4b0a      	ldr	r3, [pc, #40]	; (800e8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	3304      	adds	r3, #4
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	4610      	mov	r0, r2
 800e8b8:	f7fd ffab 	bl	800c812 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8bc:	4b0a      	ldr	r3, [pc, #40]	; (800e8e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	68ba      	ldr	r2, [r7, #8]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d202      	bcs.n	800e8cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e8c6:	4a08      	ldr	r2, [pc, #32]	; (800e8e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	6013      	str	r3, [r2, #0]
}
 800e8cc:	bf00      	nop
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	20001444 	.word	0x20001444
 800e8d8:	20000f6c 	.word	0x20000f6c
 800e8dc:	2000142c 	.word	0x2000142c
 800e8e0:	200013fc 	.word	0x200013fc
 800e8e4:	200013f8 	.word	0x200013f8
 800e8e8:	20001460 	.word	0x20001460

0800e8ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b08a      	sub	sp, #40	; 0x28
 800e8f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e8f6:	f000 fb07 	bl	800ef08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e8fa:	4b1c      	ldr	r3, [pc, #112]	; (800e96c <xTimerCreateTimerTask+0x80>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d021      	beq.n	800e946 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e902:	2300      	movs	r3, #0
 800e904:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e906:	2300      	movs	r3, #0
 800e908:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e90a:	1d3a      	adds	r2, r7, #4
 800e90c:	f107 0108 	add.w	r1, r7, #8
 800e910:	f107 030c 	add.w	r3, r7, #12
 800e914:	4618      	mov	r0, r3
 800e916:	f7fd ff11 	bl	800c73c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e91a:	6879      	ldr	r1, [r7, #4]
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	68fa      	ldr	r2, [r7, #12]
 800e920:	9202      	str	r2, [sp, #8]
 800e922:	9301      	str	r3, [sp, #4]
 800e924:	2302      	movs	r3, #2
 800e926:	9300      	str	r3, [sp, #0]
 800e928:	2300      	movs	r3, #0
 800e92a:	460a      	mov	r2, r1
 800e92c:	4910      	ldr	r1, [pc, #64]	; (800e970 <xTimerCreateTimerTask+0x84>)
 800e92e:	4811      	ldr	r0, [pc, #68]	; (800e974 <xTimerCreateTimerTask+0x88>)
 800e930:	f7fe ffe0 	bl	800d8f4 <xTaskCreateStatic>
 800e934:	4603      	mov	r3, r0
 800e936:	4a10      	ldr	r2, [pc, #64]	; (800e978 <xTimerCreateTimerTask+0x8c>)
 800e938:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e93a:	4b0f      	ldr	r3, [pc, #60]	; (800e978 <xTimerCreateTimerTask+0x8c>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d001      	beq.n	800e946 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e942:	2301      	movs	r3, #1
 800e944:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d10a      	bne.n	800e962 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e950:	f383 8811 	msr	BASEPRI, r3
 800e954:	f3bf 8f6f 	isb	sy
 800e958:	f3bf 8f4f 	dsb	sy
 800e95c:	613b      	str	r3, [r7, #16]
}
 800e95e:	bf00      	nop
 800e960:	e7fe      	b.n	800e960 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e962:	697b      	ldr	r3, [r7, #20]
}
 800e964:	4618      	mov	r0, r3
 800e966:	3718      	adds	r7, #24
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	2000149c 	.word	0x2000149c
 800e970:	08013cb4 	.word	0x08013cb4
 800e974:	0800eab1 	.word	0x0800eab1
 800e978:	200014a0 	.word	0x200014a0

0800e97c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b08a      	sub	sp, #40	; 0x28
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
 800e988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e98a:	2300      	movs	r3, #0
 800e98c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d10a      	bne.n	800e9aa <xTimerGenericCommand+0x2e>
	__asm volatile
 800e994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e998:	f383 8811 	msr	BASEPRI, r3
 800e99c:	f3bf 8f6f 	isb	sy
 800e9a0:	f3bf 8f4f 	dsb	sy
 800e9a4:	623b      	str	r3, [r7, #32]
}
 800e9a6:	bf00      	nop
 800e9a8:	e7fe      	b.n	800e9a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e9aa:	4b1a      	ldr	r3, [pc, #104]	; (800ea14 <xTimerGenericCommand+0x98>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d02a      	beq.n	800ea08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	2b05      	cmp	r3, #5
 800e9c2:	dc18      	bgt.n	800e9f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e9c4:	f7ff fdb4 	bl	800e530 <xTaskGetSchedulerState>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b02      	cmp	r3, #2
 800e9cc:	d109      	bne.n	800e9e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e9ce:	4b11      	ldr	r3, [pc, #68]	; (800ea14 <xTimerGenericCommand+0x98>)
 800e9d0:	6818      	ldr	r0, [r3, #0]
 800e9d2:	f107 0110 	add.w	r1, r7, #16
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9da:	f7fe f925 	bl	800cc28 <xQueueGenericSend>
 800e9de:	6278      	str	r0, [r7, #36]	; 0x24
 800e9e0:	e012      	b.n	800ea08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e9e2:	4b0c      	ldr	r3, [pc, #48]	; (800ea14 <xTimerGenericCommand+0x98>)
 800e9e4:	6818      	ldr	r0, [r3, #0]
 800e9e6:	f107 0110 	add.w	r1, r7, #16
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f7fe f91b 	bl	800cc28 <xQueueGenericSend>
 800e9f2:	6278      	str	r0, [r7, #36]	; 0x24
 800e9f4:	e008      	b.n	800ea08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e9f6:	4b07      	ldr	r3, [pc, #28]	; (800ea14 <xTimerGenericCommand+0x98>)
 800e9f8:	6818      	ldr	r0, [r3, #0]
 800e9fa:	f107 0110 	add.w	r1, r7, #16
 800e9fe:	2300      	movs	r3, #0
 800ea00:	683a      	ldr	r2, [r7, #0]
 800ea02:	f7fe fa0f 	bl	800ce24 <xQueueGenericSendFromISR>
 800ea06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3728      	adds	r7, #40	; 0x28
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	2000149c 	.word	0x2000149c

0800ea18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b088      	sub	sp, #32
 800ea1c:	af02      	add	r7, sp, #8
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea22:	4b22      	ldr	r3, [pc, #136]	; (800eaac <prvProcessExpiredTimer+0x94>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	3304      	adds	r3, #4
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7fd ff27 	bl	800c884 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea3c:	f003 0304 	and.w	r3, r3, #4
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d022      	beq.n	800ea8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	699a      	ldr	r2, [r3, #24]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	18d1      	adds	r1, r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	683a      	ldr	r2, [r7, #0]
 800ea50:	6978      	ldr	r0, [r7, #20]
 800ea52:	f000 f8d1 	bl	800ebf8 <prvInsertTimerInActiveList>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d01f      	beq.n	800ea9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	9300      	str	r3, [sp, #0]
 800ea60:	2300      	movs	r3, #0
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	2100      	movs	r1, #0
 800ea66:	6978      	ldr	r0, [r7, #20]
 800ea68:	f7ff ff88 	bl	800e97c <xTimerGenericCommand>
 800ea6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d113      	bne.n	800ea9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ea74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea78:	f383 8811 	msr	BASEPRI, r3
 800ea7c:	f3bf 8f6f 	isb	sy
 800ea80:	f3bf 8f4f 	dsb	sy
 800ea84:	60fb      	str	r3, [r7, #12]
}
 800ea86:	bf00      	nop
 800ea88:	e7fe      	b.n	800ea88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea90:	f023 0301 	bic.w	r3, r3, #1
 800ea94:	b2da      	uxtb	r2, r3
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	6a1b      	ldr	r3, [r3, #32]
 800eaa0:	6978      	ldr	r0, [r7, #20]
 800eaa2:	4798      	blx	r3
}
 800eaa4:	bf00      	nop
 800eaa6:	3718      	adds	r7, #24
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	20001494 	.word	0x20001494

0800eab0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eab8:	f107 0308 	add.w	r3, r7, #8
 800eabc:	4618      	mov	r0, r3
 800eabe:	f000 f857 	bl	800eb70 <prvGetNextExpireTime>
 800eac2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	4619      	mov	r1, r3
 800eac8:	68f8      	ldr	r0, [r7, #12]
 800eaca:	f000 f803 	bl	800ead4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eace:	f000 f8d5 	bl	800ec7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ead2:	e7f1      	b.n	800eab8 <prvTimerTask+0x8>

0800ead4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eade:	f7ff f945 	bl	800dd6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eae2:	f107 0308 	add.w	r3, r7, #8
 800eae6:	4618      	mov	r0, r3
 800eae8:	f000 f866 	bl	800ebb8 <prvSampleTimeNow>
 800eaec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d130      	bne.n	800eb56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d10a      	bne.n	800eb10 <prvProcessTimerOrBlockTask+0x3c>
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d806      	bhi.n	800eb10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eb02:	f7ff f941 	bl	800dd88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eb06:	68f9      	ldr	r1, [r7, #12]
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f7ff ff85 	bl	800ea18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eb0e:	e024      	b.n	800eb5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d008      	beq.n	800eb28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eb16:	4b13      	ldr	r3, [pc, #76]	; (800eb64 <prvProcessTimerOrBlockTask+0x90>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d101      	bne.n	800eb24 <prvProcessTimerOrBlockTask+0x50>
 800eb20:	2301      	movs	r3, #1
 800eb22:	e000      	b.n	800eb26 <prvProcessTimerOrBlockTask+0x52>
 800eb24:	2300      	movs	r3, #0
 800eb26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eb28:	4b0f      	ldr	r3, [pc, #60]	; (800eb68 <prvProcessTimerOrBlockTask+0x94>)
 800eb2a:	6818      	ldr	r0, [r3, #0]
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	683a      	ldr	r2, [r7, #0]
 800eb34:	4619      	mov	r1, r3
 800eb36:	f7fe fea9 	bl	800d88c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eb3a:	f7ff f925 	bl	800dd88 <xTaskResumeAll>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10a      	bne.n	800eb5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eb44:	4b09      	ldr	r3, [pc, #36]	; (800eb6c <prvProcessTimerOrBlockTask+0x98>)
 800eb46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb4a:	601a      	str	r2, [r3, #0]
 800eb4c:	f3bf 8f4f 	dsb	sy
 800eb50:	f3bf 8f6f 	isb	sy
}
 800eb54:	e001      	b.n	800eb5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eb56:	f7ff f917 	bl	800dd88 <xTaskResumeAll>
}
 800eb5a:	bf00      	nop
 800eb5c:	3710      	adds	r7, #16
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	20001498 	.word	0x20001498
 800eb68:	2000149c 	.word	0x2000149c
 800eb6c:	e000ed04 	.word	0xe000ed04

0800eb70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eb70:	b480      	push	{r7}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eb78:	4b0e      	ldr	r3, [pc, #56]	; (800ebb4 <prvGetNextExpireTime+0x44>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d101      	bne.n	800eb86 <prvGetNextExpireTime+0x16>
 800eb82:	2201      	movs	r2, #1
 800eb84:	e000      	b.n	800eb88 <prvGetNextExpireTime+0x18>
 800eb86:	2200      	movs	r2, #0
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d105      	bne.n	800eba0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb94:	4b07      	ldr	r3, [pc, #28]	; (800ebb4 <prvGetNextExpireTime+0x44>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	60fb      	str	r3, [r7, #12]
 800eb9e:	e001      	b.n	800eba4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eba0:	2300      	movs	r3, #0
 800eba2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eba4:	68fb      	ldr	r3, [r7, #12]
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3714      	adds	r7, #20
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	20001494 	.word	0x20001494

0800ebb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ebc0:	f7ff f980 	bl	800dec4 <xTaskGetTickCount>
 800ebc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ebc6:	4b0b      	ldr	r3, [pc, #44]	; (800ebf4 <prvSampleTimeNow+0x3c>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d205      	bcs.n	800ebdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ebd0:	f000 f936 	bl	800ee40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	601a      	str	r2, [r3, #0]
 800ebda:	e002      	b.n	800ebe2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ebe2:	4a04      	ldr	r2, [pc, #16]	; (800ebf4 <prvSampleTimeNow+0x3c>)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	200014a4 	.word	0x200014a4

0800ebf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b086      	sub	sp, #24
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	60f8      	str	r0, [r7, #12]
 800ec00:	60b9      	str	r1, [r7, #8]
 800ec02:	607a      	str	r2, [r7, #4]
 800ec04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ec06:	2300      	movs	r3, #0
 800ec08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ec16:	68ba      	ldr	r2, [r7, #8]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d812      	bhi.n	800ec44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	1ad2      	subs	r2, r2, r3
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	699b      	ldr	r3, [r3, #24]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d302      	bcc.n	800ec32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	617b      	str	r3, [r7, #20]
 800ec30:	e01b      	b.n	800ec6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec32:	4b10      	ldr	r3, [pc, #64]	; (800ec74 <prvInsertTimerInActiveList+0x7c>)
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	3304      	adds	r3, #4
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	4610      	mov	r0, r2
 800ec3e:	f7fd fde8 	bl	800c812 <vListInsert>
 800ec42:	e012      	b.n	800ec6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d206      	bcs.n	800ec5a <prvInsertTimerInActiveList+0x62>
 800ec4c:	68ba      	ldr	r2, [r7, #8]
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d302      	bcc.n	800ec5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ec54:	2301      	movs	r3, #1
 800ec56:	617b      	str	r3, [r7, #20]
 800ec58:	e007      	b.n	800ec6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec5a:	4b07      	ldr	r3, [pc, #28]	; (800ec78 <prvInsertTimerInActiveList+0x80>)
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	3304      	adds	r3, #4
 800ec62:	4619      	mov	r1, r3
 800ec64:	4610      	mov	r0, r2
 800ec66:	f7fd fdd4 	bl	800c812 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec6a:	697b      	ldr	r3, [r7, #20]
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3718      	adds	r7, #24
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	20001498 	.word	0x20001498
 800ec78:	20001494 	.word	0x20001494

0800ec7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b08e      	sub	sp, #56	; 0x38
 800ec80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec82:	e0ca      	b.n	800ee1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	da18      	bge.n	800ecbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ec8a:	1d3b      	adds	r3, r7, #4
 800ec8c:	3304      	adds	r3, #4
 800ec8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ec90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d10a      	bne.n	800ecac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ec96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9a:	f383 8811 	msr	BASEPRI, r3
 800ec9e:	f3bf 8f6f 	isb	sy
 800eca2:	f3bf 8f4f 	dsb	sy
 800eca6:	61fb      	str	r3, [r7, #28]
}
 800eca8:	bf00      	nop
 800ecaa:	e7fe      	b.n	800ecaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ecac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecb2:	6850      	ldr	r0, [r2, #4]
 800ecb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecb6:	6892      	ldr	r2, [r2, #8]
 800ecb8:	4611      	mov	r1, r2
 800ecba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	f2c0 80aa 	blt.w	800ee18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ecc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecca:	695b      	ldr	r3, [r3, #20]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d004      	beq.n	800ecda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd2:	3304      	adds	r3, #4
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fd fdd5 	bl	800c884 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ecda:	463b      	mov	r3, r7
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7ff ff6b 	bl	800ebb8 <prvSampleTimeNow>
 800ece2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2b09      	cmp	r3, #9
 800ece8:	f200 8097 	bhi.w	800ee1a <prvProcessReceivedCommands+0x19e>
 800ecec:	a201      	add	r2, pc, #4	; (adr r2, 800ecf4 <prvProcessReceivedCommands+0x78>)
 800ecee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecf2:	bf00      	nop
 800ecf4:	0800ed1d 	.word	0x0800ed1d
 800ecf8:	0800ed1d 	.word	0x0800ed1d
 800ecfc:	0800ed1d 	.word	0x0800ed1d
 800ed00:	0800ed91 	.word	0x0800ed91
 800ed04:	0800eda5 	.word	0x0800eda5
 800ed08:	0800edef 	.word	0x0800edef
 800ed0c:	0800ed1d 	.word	0x0800ed1d
 800ed10:	0800ed1d 	.word	0x0800ed1d
 800ed14:	0800ed91 	.word	0x0800ed91
 800ed18:	0800eda5 	.word	0x0800eda5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed22:	f043 0301 	orr.w	r3, r3, #1
 800ed26:	b2da      	uxtb	r2, r3
 800ed28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed2e:	68ba      	ldr	r2, [r7, #8]
 800ed30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed32:	699b      	ldr	r3, [r3, #24]
 800ed34:	18d1      	adds	r1, r2, r3
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed3c:	f7ff ff5c 	bl	800ebf8 <prvInsertTimerInActiveList>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d069      	beq.n	800ee1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed48:	6a1b      	ldr	r3, [r3, #32]
 800ed4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed54:	f003 0304 	and.w	r3, r3, #4
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d05e      	beq.n	800ee1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed5c:	68ba      	ldr	r2, [r7, #8]
 800ed5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed60:	699b      	ldr	r3, [r3, #24]
 800ed62:	441a      	add	r2, r3
 800ed64:	2300      	movs	r3, #0
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	2300      	movs	r3, #0
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed6e:	f7ff fe05 	bl	800e97c <xTimerGenericCommand>
 800ed72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ed74:	6a3b      	ldr	r3, [r7, #32]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d14f      	bne.n	800ee1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ed7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7e:	f383 8811 	msr	BASEPRI, r3
 800ed82:	f3bf 8f6f 	isb	sy
 800ed86:	f3bf 8f4f 	dsb	sy
 800ed8a:	61bb      	str	r3, [r7, #24]
}
 800ed8c:	bf00      	nop
 800ed8e:	e7fe      	b.n	800ed8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed96:	f023 0301 	bic.w	r3, r3, #1
 800ed9a:	b2da      	uxtb	r2, r3
 800ed9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800eda2:	e03a      	b.n	800ee1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edaa:	f043 0301 	orr.w	r3, r3, #1
 800edae:	b2da      	uxtb	r2, r3
 800edb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800edb6:	68ba      	ldr	r2, [r7, #8]
 800edb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800edbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbe:	699b      	ldr	r3, [r3, #24]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d10a      	bne.n	800edda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800edc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	617b      	str	r3, [r7, #20]
}
 800edd6:	bf00      	nop
 800edd8:	e7fe      	b.n	800edd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800edda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eddc:	699a      	ldr	r2, [r3, #24]
 800edde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede0:	18d1      	adds	r1, r2, r3
 800ede2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ede6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ede8:	f7ff ff06 	bl	800ebf8 <prvInsertTimerInActiveList>
					break;
 800edec:	e015      	b.n	800ee1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800edee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edf4:	f003 0302 	and.w	r3, r3, #2
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d103      	bne.n	800ee04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800edfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edfe:	f000 fbdf 	bl	800f5c0 <vPortFree>
 800ee02:	e00a      	b.n	800ee1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee0a:	f023 0301 	bic.w	r3, r3, #1
 800ee0e:	b2da      	uxtb	r2, r3
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ee16:	e000      	b.n	800ee1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ee18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee1a:	4b08      	ldr	r3, [pc, #32]	; (800ee3c <prvProcessReceivedCommands+0x1c0>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	1d39      	adds	r1, r7, #4
 800ee20:	2200      	movs	r2, #0
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fe f926 	bl	800d074 <xQueueReceive>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f47f af2a 	bne.w	800ec84 <prvProcessReceivedCommands+0x8>
	}
}
 800ee30:	bf00      	nop
 800ee32:	bf00      	nop
 800ee34:	3730      	adds	r7, #48	; 0x30
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	2000149c 	.word	0x2000149c

0800ee40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b088      	sub	sp, #32
 800ee44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee46:	e048      	b.n	800eeda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee48:	4b2d      	ldr	r3, [pc, #180]	; (800ef00 <prvSwitchTimerLists+0xc0>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee52:	4b2b      	ldr	r3, [pc, #172]	; (800ef00 <prvSwitchTimerLists+0xc0>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	3304      	adds	r3, #4
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fd fd0f 	bl	800c884 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	68f8      	ldr	r0, [r7, #12]
 800ee6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee74:	f003 0304 	and.w	r3, r3, #4
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d02e      	beq.n	800eeda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	699b      	ldr	r3, [r3, #24]
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	4413      	add	r3, r2
 800ee84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ee86:	68ba      	ldr	r2, [r7, #8]
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d90e      	bls.n	800eeac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	68ba      	ldr	r2, [r7, #8]
 800ee92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	68fa      	ldr	r2, [r7, #12]
 800ee98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee9a:	4b19      	ldr	r3, [pc, #100]	; (800ef00 <prvSwitchTimerLists+0xc0>)
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	3304      	adds	r3, #4
 800eea2:	4619      	mov	r1, r3
 800eea4:	4610      	mov	r0, r2
 800eea6:	f7fd fcb4 	bl	800c812 <vListInsert>
 800eeaa:	e016      	b.n	800eeda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eeac:	2300      	movs	r3, #0
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	693a      	ldr	r2, [r7, #16]
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	68f8      	ldr	r0, [r7, #12]
 800eeb8:	f7ff fd60 	bl	800e97c <xTimerGenericCommand>
 800eebc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d10a      	bne.n	800eeda <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec8:	f383 8811 	msr	BASEPRI, r3
 800eecc:	f3bf 8f6f 	isb	sy
 800eed0:	f3bf 8f4f 	dsb	sy
 800eed4:	603b      	str	r3, [r7, #0]
}
 800eed6:	bf00      	nop
 800eed8:	e7fe      	b.n	800eed8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eeda:	4b09      	ldr	r3, [pc, #36]	; (800ef00 <prvSwitchTimerLists+0xc0>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d1b1      	bne.n	800ee48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eee4:	4b06      	ldr	r3, [pc, #24]	; (800ef00 <prvSwitchTimerLists+0xc0>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eeea:	4b06      	ldr	r3, [pc, #24]	; (800ef04 <prvSwitchTimerLists+0xc4>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	4a04      	ldr	r2, [pc, #16]	; (800ef00 <prvSwitchTimerLists+0xc0>)
 800eef0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eef2:	4a04      	ldr	r2, [pc, #16]	; (800ef04 <prvSwitchTimerLists+0xc4>)
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	6013      	str	r3, [r2, #0]
}
 800eef8:	bf00      	nop
 800eefa:	3718      	adds	r7, #24
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	20001494 	.word	0x20001494
 800ef04:	20001498 	.word	0x20001498

0800ef08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef0e:	f000 f969 	bl	800f1e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef12:	4b15      	ldr	r3, [pc, #84]	; (800ef68 <prvCheckForValidListAndQueue+0x60>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d120      	bne.n	800ef5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ef1a:	4814      	ldr	r0, [pc, #80]	; (800ef6c <prvCheckForValidListAndQueue+0x64>)
 800ef1c:	f7fd fc28 	bl	800c770 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef20:	4813      	ldr	r0, [pc, #76]	; (800ef70 <prvCheckForValidListAndQueue+0x68>)
 800ef22:	f7fd fc25 	bl	800c770 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef26:	4b13      	ldr	r3, [pc, #76]	; (800ef74 <prvCheckForValidListAndQueue+0x6c>)
 800ef28:	4a10      	ldr	r2, [pc, #64]	; (800ef6c <prvCheckForValidListAndQueue+0x64>)
 800ef2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef2c:	4b12      	ldr	r3, [pc, #72]	; (800ef78 <prvCheckForValidListAndQueue+0x70>)
 800ef2e:	4a10      	ldr	r2, [pc, #64]	; (800ef70 <prvCheckForValidListAndQueue+0x68>)
 800ef30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef32:	2300      	movs	r3, #0
 800ef34:	9300      	str	r3, [sp, #0]
 800ef36:	4b11      	ldr	r3, [pc, #68]	; (800ef7c <prvCheckForValidListAndQueue+0x74>)
 800ef38:	4a11      	ldr	r2, [pc, #68]	; (800ef80 <prvCheckForValidListAndQueue+0x78>)
 800ef3a:	2110      	movs	r1, #16
 800ef3c:	200a      	movs	r0, #10
 800ef3e:	f7fd fd33 	bl	800c9a8 <xQueueGenericCreateStatic>
 800ef42:	4603      	mov	r3, r0
 800ef44:	4a08      	ldr	r2, [pc, #32]	; (800ef68 <prvCheckForValidListAndQueue+0x60>)
 800ef46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef48:	4b07      	ldr	r3, [pc, #28]	; (800ef68 <prvCheckForValidListAndQueue+0x60>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d005      	beq.n	800ef5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef50:	4b05      	ldr	r3, [pc, #20]	; (800ef68 <prvCheckForValidListAndQueue+0x60>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	490b      	ldr	r1, [pc, #44]	; (800ef84 <prvCheckForValidListAndQueue+0x7c>)
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7fe fc44 	bl	800d7e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef5c:	f000 f972 	bl	800f244 <vPortExitCritical>
}
 800ef60:	bf00      	nop
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	2000149c 	.word	0x2000149c
 800ef6c:	2000146c 	.word	0x2000146c
 800ef70:	20001480 	.word	0x20001480
 800ef74:	20001494 	.word	0x20001494
 800ef78:	20001498 	.word	0x20001498
 800ef7c:	20001548 	.word	0x20001548
 800ef80:	200014a8 	.word	0x200014a8
 800ef84:	08013cbc 	.word	0x08013cbc

0800ef88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b085      	sub	sp, #20
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	60f8      	str	r0, [r7, #12]
 800ef90:	60b9      	str	r1, [r7, #8]
 800ef92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	3b04      	subs	r3, #4
 800ef98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800efa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	3b04      	subs	r3, #4
 800efa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	f023 0201 	bic.w	r2, r3, #1
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	3b04      	subs	r3, #4
 800efb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800efb8:	4a0c      	ldr	r2, [pc, #48]	; (800efec <pxPortInitialiseStack+0x64>)
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	3b14      	subs	r3, #20
 800efc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	3b04      	subs	r3, #4
 800efce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f06f 0202 	mvn.w	r2, #2
 800efd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	3b20      	subs	r3, #32
 800efdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800efde:	68fb      	ldr	r3, [r7, #12]
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3714      	adds	r7, #20
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr
 800efec:	0800eff1 	.word	0x0800eff1

0800eff0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eff0:	b480      	push	{r7}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eff6:	2300      	movs	r3, #0
 800eff8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800effa:	4b12      	ldr	r3, [pc, #72]	; (800f044 <prvTaskExitError+0x54>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f002:	d00a      	beq.n	800f01a <prvTaskExitError+0x2a>
	__asm volatile
 800f004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f008:	f383 8811 	msr	BASEPRI, r3
 800f00c:	f3bf 8f6f 	isb	sy
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	60fb      	str	r3, [r7, #12]
}
 800f016:	bf00      	nop
 800f018:	e7fe      	b.n	800f018 <prvTaskExitError+0x28>
	__asm volatile
 800f01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01e:	f383 8811 	msr	BASEPRI, r3
 800f022:	f3bf 8f6f 	isb	sy
 800f026:	f3bf 8f4f 	dsb	sy
 800f02a:	60bb      	str	r3, [r7, #8]
}
 800f02c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f02e:	bf00      	nop
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d0fc      	beq.n	800f030 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f036:	bf00      	nop
 800f038:	bf00      	nop
 800f03a:	3714      	adds	r7, #20
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr
 800f044:	20000044 	.word	0x20000044
	...

0800f050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f050:	4b07      	ldr	r3, [pc, #28]	; (800f070 <pxCurrentTCBConst2>)
 800f052:	6819      	ldr	r1, [r3, #0]
 800f054:	6808      	ldr	r0, [r1, #0]
 800f056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05a:	f380 8809 	msr	PSP, r0
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f04f 0000 	mov.w	r0, #0
 800f066:	f380 8811 	msr	BASEPRI, r0
 800f06a:	4770      	bx	lr
 800f06c:	f3af 8000 	nop.w

0800f070 <pxCurrentTCBConst2>:
 800f070:	20000f6c 	.word	0x20000f6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f074:	bf00      	nop
 800f076:	bf00      	nop

0800f078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f078:	4808      	ldr	r0, [pc, #32]	; (800f09c <prvPortStartFirstTask+0x24>)
 800f07a:	6800      	ldr	r0, [r0, #0]
 800f07c:	6800      	ldr	r0, [r0, #0]
 800f07e:	f380 8808 	msr	MSP, r0
 800f082:	f04f 0000 	mov.w	r0, #0
 800f086:	f380 8814 	msr	CONTROL, r0
 800f08a:	b662      	cpsie	i
 800f08c:	b661      	cpsie	f
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	df00      	svc	0
 800f098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f09a:	bf00      	nop
 800f09c:	e000ed08 	.word	0xe000ed08

0800f0a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b086      	sub	sp, #24
 800f0a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f0a6:	4b46      	ldr	r3, [pc, #280]	; (800f1c0 <xPortStartScheduler+0x120>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4a46      	ldr	r2, [pc, #280]	; (800f1c4 <xPortStartScheduler+0x124>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d10a      	bne.n	800f0c6 <xPortStartScheduler+0x26>
	__asm volatile
 800f0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b4:	f383 8811 	msr	BASEPRI, r3
 800f0b8:	f3bf 8f6f 	isb	sy
 800f0bc:	f3bf 8f4f 	dsb	sy
 800f0c0:	613b      	str	r3, [r7, #16]
}
 800f0c2:	bf00      	nop
 800f0c4:	e7fe      	b.n	800f0c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f0c6:	4b3e      	ldr	r3, [pc, #248]	; (800f1c0 <xPortStartScheduler+0x120>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a3f      	ldr	r2, [pc, #252]	; (800f1c8 <xPortStartScheduler+0x128>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d10a      	bne.n	800f0e6 <xPortStartScheduler+0x46>
	__asm volatile
 800f0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d4:	f383 8811 	msr	BASEPRI, r3
 800f0d8:	f3bf 8f6f 	isb	sy
 800f0dc:	f3bf 8f4f 	dsb	sy
 800f0e0:	60fb      	str	r3, [r7, #12]
}
 800f0e2:	bf00      	nop
 800f0e4:	e7fe      	b.n	800f0e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f0e6:	4b39      	ldr	r3, [pc, #228]	; (800f1cc <xPortStartScheduler+0x12c>)
 800f0e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	22ff      	movs	r2, #255	; 0xff
 800f0f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f100:	78fb      	ldrb	r3, [r7, #3]
 800f102:	b2db      	uxtb	r3, r3
 800f104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f108:	b2da      	uxtb	r2, r3
 800f10a:	4b31      	ldr	r3, [pc, #196]	; (800f1d0 <xPortStartScheduler+0x130>)
 800f10c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f10e:	4b31      	ldr	r3, [pc, #196]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f110:	2207      	movs	r2, #7
 800f112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f114:	e009      	b.n	800f12a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f116:	4b2f      	ldr	r3, [pc, #188]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	3b01      	subs	r3, #1
 800f11c:	4a2d      	ldr	r2, [pc, #180]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f11e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f120:	78fb      	ldrb	r3, [r7, #3]
 800f122:	b2db      	uxtb	r3, r3
 800f124:	005b      	lsls	r3, r3, #1
 800f126:	b2db      	uxtb	r3, r3
 800f128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f12a:	78fb      	ldrb	r3, [r7, #3]
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f132:	2b80      	cmp	r3, #128	; 0x80
 800f134:	d0ef      	beq.n	800f116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f136:	4b27      	ldr	r3, [pc, #156]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f1c3 0307 	rsb	r3, r3, #7
 800f13e:	2b04      	cmp	r3, #4
 800f140:	d00a      	beq.n	800f158 <xPortStartScheduler+0xb8>
	__asm volatile
 800f142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f146:	f383 8811 	msr	BASEPRI, r3
 800f14a:	f3bf 8f6f 	isb	sy
 800f14e:	f3bf 8f4f 	dsb	sy
 800f152:	60bb      	str	r3, [r7, #8]
}
 800f154:	bf00      	nop
 800f156:	e7fe      	b.n	800f156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f158:	4b1e      	ldr	r3, [pc, #120]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	021b      	lsls	r3, r3, #8
 800f15e:	4a1d      	ldr	r2, [pc, #116]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f162:	4b1c      	ldr	r3, [pc, #112]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f16a:	4a1a      	ldr	r2, [pc, #104]	; (800f1d4 <xPortStartScheduler+0x134>)
 800f16c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	b2da      	uxtb	r2, r3
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f176:	4b18      	ldr	r3, [pc, #96]	; (800f1d8 <xPortStartScheduler+0x138>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	4a17      	ldr	r2, [pc, #92]	; (800f1d8 <xPortStartScheduler+0x138>)
 800f17c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f182:	4b15      	ldr	r3, [pc, #84]	; (800f1d8 <xPortStartScheduler+0x138>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4a14      	ldr	r2, [pc, #80]	; (800f1d8 <xPortStartScheduler+0x138>)
 800f188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f18c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f18e:	f000 f8dd 	bl	800f34c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f192:	4b12      	ldr	r3, [pc, #72]	; (800f1dc <xPortStartScheduler+0x13c>)
 800f194:	2200      	movs	r2, #0
 800f196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f198:	f000 f8fc 	bl	800f394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f19c:	4b10      	ldr	r3, [pc, #64]	; (800f1e0 <xPortStartScheduler+0x140>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4a0f      	ldr	r2, [pc, #60]	; (800f1e0 <xPortStartScheduler+0x140>)
 800f1a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f1a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f1a8:	f7ff ff66 	bl	800f078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f1ac:	f7fe ff54 	bl	800e058 <vTaskSwitchContext>
	prvTaskExitError();
 800f1b0:	f7ff ff1e 	bl	800eff0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1b4:	2300      	movs	r3, #0
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3718      	adds	r7, #24
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	e000ed00 	.word	0xe000ed00
 800f1c4:	410fc271 	.word	0x410fc271
 800f1c8:	410fc270 	.word	0x410fc270
 800f1cc:	e000e400 	.word	0xe000e400
 800f1d0:	20001598 	.word	0x20001598
 800f1d4:	2000159c 	.word	0x2000159c
 800f1d8:	e000ed20 	.word	0xe000ed20
 800f1dc:	20000044 	.word	0x20000044
 800f1e0:	e000ef34 	.word	0xe000ef34

0800f1e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
	__asm volatile
 800f1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ee:	f383 8811 	msr	BASEPRI, r3
 800f1f2:	f3bf 8f6f 	isb	sy
 800f1f6:	f3bf 8f4f 	dsb	sy
 800f1fa:	607b      	str	r3, [r7, #4]
}
 800f1fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f1fe:	4b0f      	ldr	r3, [pc, #60]	; (800f23c <vPortEnterCritical+0x58>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	3301      	adds	r3, #1
 800f204:	4a0d      	ldr	r2, [pc, #52]	; (800f23c <vPortEnterCritical+0x58>)
 800f206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f208:	4b0c      	ldr	r3, [pc, #48]	; (800f23c <vPortEnterCritical+0x58>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d10f      	bne.n	800f230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f210:	4b0b      	ldr	r3, [pc, #44]	; (800f240 <vPortEnterCritical+0x5c>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	b2db      	uxtb	r3, r3
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00a      	beq.n	800f230 <vPortEnterCritical+0x4c>
	__asm volatile
 800f21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21e:	f383 8811 	msr	BASEPRI, r3
 800f222:	f3bf 8f6f 	isb	sy
 800f226:	f3bf 8f4f 	dsb	sy
 800f22a:	603b      	str	r3, [r7, #0]
}
 800f22c:	bf00      	nop
 800f22e:	e7fe      	b.n	800f22e <vPortEnterCritical+0x4a>
	}
}
 800f230:	bf00      	nop
 800f232:	370c      	adds	r7, #12
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr
 800f23c:	20000044 	.word	0x20000044
 800f240:	e000ed04 	.word	0xe000ed04

0800f244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f24a:	4b12      	ldr	r3, [pc, #72]	; (800f294 <vPortExitCritical+0x50>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d10a      	bne.n	800f268 <vPortExitCritical+0x24>
	__asm volatile
 800f252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f256:	f383 8811 	msr	BASEPRI, r3
 800f25a:	f3bf 8f6f 	isb	sy
 800f25e:	f3bf 8f4f 	dsb	sy
 800f262:	607b      	str	r3, [r7, #4]
}
 800f264:	bf00      	nop
 800f266:	e7fe      	b.n	800f266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f268:	4b0a      	ldr	r3, [pc, #40]	; (800f294 <vPortExitCritical+0x50>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	3b01      	subs	r3, #1
 800f26e:	4a09      	ldr	r2, [pc, #36]	; (800f294 <vPortExitCritical+0x50>)
 800f270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f272:	4b08      	ldr	r3, [pc, #32]	; (800f294 <vPortExitCritical+0x50>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d105      	bne.n	800f286 <vPortExitCritical+0x42>
 800f27a:	2300      	movs	r3, #0
 800f27c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	f383 8811 	msr	BASEPRI, r3
}
 800f284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f286:	bf00      	nop
 800f288:	370c      	adds	r7, #12
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop
 800f294:	20000044 	.word	0x20000044
	...

0800f2a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f2a0:	f3ef 8009 	mrs	r0, PSP
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	4b15      	ldr	r3, [pc, #84]	; (800f300 <pxCurrentTCBConst>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	f01e 0f10 	tst.w	lr, #16
 800f2b0:	bf08      	it	eq
 800f2b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f2b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ba:	6010      	str	r0, [r2, #0]
 800f2bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f2c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f2c4:	f380 8811 	msr	BASEPRI, r0
 800f2c8:	f3bf 8f4f 	dsb	sy
 800f2cc:	f3bf 8f6f 	isb	sy
 800f2d0:	f7fe fec2 	bl	800e058 <vTaskSwitchContext>
 800f2d4:	f04f 0000 	mov.w	r0, #0
 800f2d8:	f380 8811 	msr	BASEPRI, r0
 800f2dc:	bc09      	pop	{r0, r3}
 800f2de:	6819      	ldr	r1, [r3, #0]
 800f2e0:	6808      	ldr	r0, [r1, #0]
 800f2e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e6:	f01e 0f10 	tst.w	lr, #16
 800f2ea:	bf08      	it	eq
 800f2ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f2f0:	f380 8809 	msr	PSP, r0
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	4770      	bx	lr
 800f2fa:	bf00      	nop
 800f2fc:	f3af 8000 	nop.w

0800f300 <pxCurrentTCBConst>:
 800f300:	20000f6c 	.word	0x20000f6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f304:	bf00      	nop
 800f306:	bf00      	nop

0800f308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	607b      	str	r3, [r7, #4]
}
 800f320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f322:	f7fe fddf 	bl	800dee4 <xTaskIncrementTick>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d003      	beq.n	800f334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f32c:	4b06      	ldr	r3, [pc, #24]	; (800f348 <xPortSysTickHandler+0x40>)
 800f32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f332:	601a      	str	r2, [r3, #0]
 800f334:	2300      	movs	r3, #0
 800f336:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	f383 8811 	msr	BASEPRI, r3
}
 800f33e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f340:	bf00      	nop
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	e000ed04 	.word	0xe000ed04

0800f34c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f34c:	b480      	push	{r7}
 800f34e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f350:	4b0b      	ldr	r3, [pc, #44]	; (800f380 <vPortSetupTimerInterrupt+0x34>)
 800f352:	2200      	movs	r2, #0
 800f354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f356:	4b0b      	ldr	r3, [pc, #44]	; (800f384 <vPortSetupTimerInterrupt+0x38>)
 800f358:	2200      	movs	r2, #0
 800f35a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f35c:	4b0a      	ldr	r3, [pc, #40]	; (800f388 <vPortSetupTimerInterrupt+0x3c>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	4a0a      	ldr	r2, [pc, #40]	; (800f38c <vPortSetupTimerInterrupt+0x40>)
 800f362:	fba2 2303 	umull	r2, r3, r2, r3
 800f366:	099b      	lsrs	r3, r3, #6
 800f368:	4a09      	ldr	r2, [pc, #36]	; (800f390 <vPortSetupTimerInterrupt+0x44>)
 800f36a:	3b01      	subs	r3, #1
 800f36c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f36e:	4b04      	ldr	r3, [pc, #16]	; (800f380 <vPortSetupTimerInterrupt+0x34>)
 800f370:	2207      	movs	r2, #7
 800f372:	601a      	str	r2, [r3, #0]
}
 800f374:	bf00      	nop
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop
 800f380:	e000e010 	.word	0xe000e010
 800f384:	e000e018 	.word	0xe000e018
 800f388:	20000000 	.word	0x20000000
 800f38c:	10624dd3 	.word	0x10624dd3
 800f390:	e000e014 	.word	0xe000e014

0800f394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f3a4 <vPortEnableVFP+0x10>
 800f398:	6801      	ldr	r1, [r0, #0]
 800f39a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f39e:	6001      	str	r1, [r0, #0]
 800f3a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f3a2:	bf00      	nop
 800f3a4:	e000ed88 	.word	0xe000ed88

0800f3a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f3ae:	f3ef 8305 	mrs	r3, IPSR
 800f3b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2b0f      	cmp	r3, #15
 800f3b8:	d914      	bls.n	800f3e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f3ba:	4a17      	ldr	r2, [pc, #92]	; (800f418 <vPortValidateInterruptPriority+0x70>)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	4413      	add	r3, r2
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f3c4:	4b15      	ldr	r3, [pc, #84]	; (800f41c <vPortValidateInterruptPriority+0x74>)
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	7afa      	ldrb	r2, [r7, #11]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d20a      	bcs.n	800f3e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d2:	f383 8811 	msr	BASEPRI, r3
 800f3d6:	f3bf 8f6f 	isb	sy
 800f3da:	f3bf 8f4f 	dsb	sy
 800f3de:	607b      	str	r3, [r7, #4]
}
 800f3e0:	bf00      	nop
 800f3e2:	e7fe      	b.n	800f3e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f3e4:	4b0e      	ldr	r3, [pc, #56]	; (800f420 <vPortValidateInterruptPriority+0x78>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f3ec:	4b0d      	ldr	r3, [pc, #52]	; (800f424 <vPortValidateInterruptPriority+0x7c>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d90a      	bls.n	800f40a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f8:	f383 8811 	msr	BASEPRI, r3
 800f3fc:	f3bf 8f6f 	isb	sy
 800f400:	f3bf 8f4f 	dsb	sy
 800f404:	603b      	str	r3, [r7, #0]
}
 800f406:	bf00      	nop
 800f408:	e7fe      	b.n	800f408 <vPortValidateInterruptPriority+0x60>
	}
 800f40a:	bf00      	nop
 800f40c:	3714      	adds	r7, #20
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	e000e3f0 	.word	0xe000e3f0
 800f41c:	20001598 	.word	0x20001598
 800f420:	e000ed0c 	.word	0xe000ed0c
 800f424:	2000159c 	.word	0x2000159c

0800f428 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b08a      	sub	sp, #40	; 0x28
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f430:	2300      	movs	r3, #0
 800f432:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f434:	f7fe fc9a 	bl	800dd6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f438:	4b5b      	ldr	r3, [pc, #364]	; (800f5a8 <pvPortMalloc+0x180>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d101      	bne.n	800f444 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f440:	f000 f920 	bl	800f684 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f444:	4b59      	ldr	r3, [pc, #356]	; (800f5ac <pvPortMalloc+0x184>)
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4013      	ands	r3, r2
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f040 8093 	bne.w	800f578 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d01d      	beq.n	800f494 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f458:	2208      	movs	r2, #8
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4413      	add	r3, r2
 800f45e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f003 0307 	and.w	r3, r3, #7
 800f466:	2b00      	cmp	r3, #0
 800f468:	d014      	beq.n	800f494 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f023 0307 	bic.w	r3, r3, #7
 800f470:	3308      	adds	r3, #8
 800f472:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f003 0307 	and.w	r3, r3, #7
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d00a      	beq.n	800f494 <pvPortMalloc+0x6c>
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f482:	f383 8811 	msr	BASEPRI, r3
 800f486:	f3bf 8f6f 	isb	sy
 800f48a:	f3bf 8f4f 	dsb	sy
 800f48e:	617b      	str	r3, [r7, #20]
}
 800f490:	bf00      	nop
 800f492:	e7fe      	b.n	800f492 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d06e      	beq.n	800f578 <pvPortMalloc+0x150>
 800f49a:	4b45      	ldr	r3, [pc, #276]	; (800f5b0 <pvPortMalloc+0x188>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d869      	bhi.n	800f578 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f4a4:	4b43      	ldr	r3, [pc, #268]	; (800f5b4 <pvPortMalloc+0x18c>)
 800f4a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f4a8:	4b42      	ldr	r3, [pc, #264]	; (800f5b4 <pvPortMalloc+0x18c>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4ae:	e004      	b.n	800f4ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d903      	bls.n	800f4cc <pvPortMalloc+0xa4>
 800f4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d1f1      	bne.n	800f4b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f4cc:	4b36      	ldr	r3, [pc, #216]	; (800f5a8 <pvPortMalloc+0x180>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d050      	beq.n	800f578 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4d6:	6a3b      	ldr	r3, [r7, #32]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2208      	movs	r2, #8
 800f4dc:	4413      	add	r3, r2
 800f4de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	6a3b      	ldr	r3, [r7, #32]
 800f4e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ea:	685a      	ldr	r2, [r3, #4]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	1ad2      	subs	r2, r2, r3
 800f4f0:	2308      	movs	r3, #8
 800f4f2:	005b      	lsls	r3, r3, #1
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d91f      	bls.n	800f538 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f500:	69bb      	ldr	r3, [r7, #24]
 800f502:	f003 0307 	and.w	r3, r3, #7
 800f506:	2b00      	cmp	r3, #0
 800f508:	d00a      	beq.n	800f520 <pvPortMalloc+0xf8>
	__asm volatile
 800f50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f50e:	f383 8811 	msr	BASEPRI, r3
 800f512:	f3bf 8f6f 	isb	sy
 800f516:	f3bf 8f4f 	dsb	sy
 800f51a:	613b      	str	r3, [r7, #16]
}
 800f51c:	bf00      	nop
 800f51e:	e7fe      	b.n	800f51e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f522:	685a      	ldr	r2, [r3, #4]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	1ad2      	subs	r2, r2, r3
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f532:	69b8      	ldr	r0, [r7, #24]
 800f534:	f000 f908 	bl	800f748 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f538:	4b1d      	ldr	r3, [pc, #116]	; (800f5b0 <pvPortMalloc+0x188>)
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	1ad3      	subs	r3, r2, r3
 800f542:	4a1b      	ldr	r2, [pc, #108]	; (800f5b0 <pvPortMalloc+0x188>)
 800f544:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f546:	4b1a      	ldr	r3, [pc, #104]	; (800f5b0 <pvPortMalloc+0x188>)
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	4b1b      	ldr	r3, [pc, #108]	; (800f5b8 <pvPortMalloc+0x190>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d203      	bcs.n	800f55a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f552:	4b17      	ldr	r3, [pc, #92]	; (800f5b0 <pvPortMalloc+0x188>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a18      	ldr	r2, [pc, #96]	; (800f5b8 <pvPortMalloc+0x190>)
 800f558:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55c:	685a      	ldr	r2, [r3, #4]
 800f55e:	4b13      	ldr	r3, [pc, #76]	; (800f5ac <pvPortMalloc+0x184>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	431a      	orrs	r2, r3
 800f564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f566:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56a:	2200      	movs	r2, #0
 800f56c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f56e:	4b13      	ldr	r3, [pc, #76]	; (800f5bc <pvPortMalloc+0x194>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	3301      	adds	r3, #1
 800f574:	4a11      	ldr	r2, [pc, #68]	; (800f5bc <pvPortMalloc+0x194>)
 800f576:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f578:	f7fe fc06 	bl	800dd88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	f003 0307 	and.w	r3, r3, #7
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00a      	beq.n	800f59c <pvPortMalloc+0x174>
	__asm volatile
 800f586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58a:	f383 8811 	msr	BASEPRI, r3
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f3bf 8f4f 	dsb	sy
 800f596:	60fb      	str	r3, [r7, #12]
}
 800f598:	bf00      	nop
 800f59a:	e7fe      	b.n	800f59a <pvPortMalloc+0x172>
	return pvReturn;
 800f59c:	69fb      	ldr	r3, [r7, #28]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3728      	adds	r7, #40	; 0x28
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	200034e8 	.word	0x200034e8
 800f5ac:	200034fc 	.word	0x200034fc
 800f5b0:	200034ec 	.word	0x200034ec
 800f5b4:	200034e0 	.word	0x200034e0
 800f5b8:	200034f0 	.word	0x200034f0
 800f5bc:	200034f4 	.word	0x200034f4

0800f5c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b086      	sub	sp, #24
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d04d      	beq.n	800f66e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f5d2:	2308      	movs	r3, #8
 800f5d4:	425b      	negs	r3, r3
 800f5d6:	697a      	ldr	r2, [r7, #20]
 800f5d8:	4413      	add	r3, r2
 800f5da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	685a      	ldr	r2, [r3, #4]
 800f5e4:	4b24      	ldr	r3, [pc, #144]	; (800f678 <vPortFree+0xb8>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4013      	ands	r3, r2
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d10a      	bne.n	800f604 <vPortFree+0x44>
	__asm volatile
 800f5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	60fb      	str	r3, [r7, #12]
}
 800f600:	bf00      	nop
 800f602:	e7fe      	b.n	800f602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d00a      	beq.n	800f622 <vPortFree+0x62>
	__asm volatile
 800f60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f610:	f383 8811 	msr	BASEPRI, r3
 800f614:	f3bf 8f6f 	isb	sy
 800f618:	f3bf 8f4f 	dsb	sy
 800f61c:	60bb      	str	r3, [r7, #8]
}
 800f61e:	bf00      	nop
 800f620:	e7fe      	b.n	800f620 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	685a      	ldr	r2, [r3, #4]
 800f626:	4b14      	ldr	r3, [pc, #80]	; (800f678 <vPortFree+0xb8>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4013      	ands	r3, r2
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d01e      	beq.n	800f66e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d11a      	bne.n	800f66e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	685a      	ldr	r2, [r3, #4]
 800f63c:	4b0e      	ldr	r3, [pc, #56]	; (800f678 <vPortFree+0xb8>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	43db      	mvns	r3, r3
 800f642:	401a      	ands	r2, r3
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f648:	f7fe fb90 	bl	800dd6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	685a      	ldr	r2, [r3, #4]
 800f650:	4b0a      	ldr	r3, [pc, #40]	; (800f67c <vPortFree+0xbc>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4413      	add	r3, r2
 800f656:	4a09      	ldr	r2, [pc, #36]	; (800f67c <vPortFree+0xbc>)
 800f658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f65a:	6938      	ldr	r0, [r7, #16]
 800f65c:	f000 f874 	bl	800f748 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f660:	4b07      	ldr	r3, [pc, #28]	; (800f680 <vPortFree+0xc0>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	3301      	adds	r3, #1
 800f666:	4a06      	ldr	r2, [pc, #24]	; (800f680 <vPortFree+0xc0>)
 800f668:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f66a:	f7fe fb8d 	bl	800dd88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f66e:	bf00      	nop
 800f670:	3718      	adds	r7, #24
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	200034fc 	.word	0x200034fc
 800f67c:	200034ec 	.word	0x200034ec
 800f680:	200034f8 	.word	0x200034f8

0800f684 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f68a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f68e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f690:	4b27      	ldr	r3, [pc, #156]	; (800f730 <prvHeapInit+0xac>)
 800f692:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f003 0307 	and.w	r3, r3, #7
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d00c      	beq.n	800f6b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	3307      	adds	r3, #7
 800f6a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f023 0307 	bic.w	r3, r3, #7
 800f6aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f6ac:	68ba      	ldr	r2, [r7, #8]
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	1ad3      	subs	r3, r2, r3
 800f6b2:	4a1f      	ldr	r2, [pc, #124]	; (800f730 <prvHeapInit+0xac>)
 800f6b4:	4413      	add	r3, r2
 800f6b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f6bc:	4a1d      	ldr	r2, [pc, #116]	; (800f734 <prvHeapInit+0xb0>)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f6c2:	4b1c      	ldr	r3, [pc, #112]	; (800f734 <prvHeapInit+0xb0>)
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	68ba      	ldr	r2, [r7, #8]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f6d0:	2208      	movs	r2, #8
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	1a9b      	subs	r3, r3, r2
 800f6d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f023 0307 	bic.w	r3, r3, #7
 800f6de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	4a15      	ldr	r2, [pc, #84]	; (800f738 <prvHeapInit+0xb4>)
 800f6e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f6e6:	4b14      	ldr	r3, [pc, #80]	; (800f738 <prvHeapInit+0xb4>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f6ee:	4b12      	ldr	r3, [pc, #72]	; (800f738 <prvHeapInit+0xb4>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	68fa      	ldr	r2, [r7, #12]
 800f6fe:	1ad2      	subs	r2, r2, r3
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f704:	4b0c      	ldr	r3, [pc, #48]	; (800f738 <prvHeapInit+0xb4>)
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	4a0a      	ldr	r2, [pc, #40]	; (800f73c <prvHeapInit+0xb8>)
 800f712:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	4a09      	ldr	r2, [pc, #36]	; (800f740 <prvHeapInit+0xbc>)
 800f71a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f71c:	4b09      	ldr	r3, [pc, #36]	; (800f744 <prvHeapInit+0xc0>)
 800f71e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f722:	601a      	str	r2, [r3, #0]
}
 800f724:	bf00      	nop
 800f726:	3714      	adds	r7, #20
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr
 800f730:	200015a0 	.word	0x200015a0
 800f734:	200034e0 	.word	0x200034e0
 800f738:	200034e8 	.word	0x200034e8
 800f73c:	200034f0 	.word	0x200034f0
 800f740:	200034ec 	.word	0x200034ec
 800f744:	200034fc 	.word	0x200034fc

0800f748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f748:	b480      	push	{r7}
 800f74a:	b085      	sub	sp, #20
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f750:	4b28      	ldr	r3, [pc, #160]	; (800f7f4 <prvInsertBlockIntoFreeList+0xac>)
 800f752:	60fb      	str	r3, [r7, #12]
 800f754:	e002      	b.n	800f75c <prvInsertBlockIntoFreeList+0x14>
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	60fb      	str	r3, [r7, #12]
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	429a      	cmp	r2, r3
 800f764:	d8f7      	bhi.n	800f756 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	68ba      	ldr	r2, [r7, #8]
 800f770:	4413      	add	r3, r2
 800f772:	687a      	ldr	r2, [r7, #4]
 800f774:	429a      	cmp	r2, r3
 800f776:	d108      	bne.n	800f78a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	685a      	ldr	r2, [r3, #4]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	441a      	add	r2, r3
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	68ba      	ldr	r2, [r7, #8]
 800f794:	441a      	add	r2, r3
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d118      	bne.n	800f7d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	4b15      	ldr	r3, [pc, #84]	; (800f7f8 <prvInsertBlockIntoFreeList+0xb0>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d00d      	beq.n	800f7c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	685a      	ldr	r2, [r3, #4]
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	441a      	add	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	601a      	str	r2, [r3, #0]
 800f7c4:	e008      	b.n	800f7d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f7c6:	4b0c      	ldr	r3, [pc, #48]	; (800f7f8 <prvInsertBlockIntoFreeList+0xb0>)
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	601a      	str	r2, [r3, #0]
 800f7ce:	e003      	b.n	800f7d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f7d8:	68fa      	ldr	r2, [r7, #12]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d002      	beq.n	800f7e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	687a      	ldr	r2, [r7, #4]
 800f7e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7e6:	bf00      	nop
 800f7e8:	3714      	adds	r7, #20
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr
 800f7f2:	bf00      	nop
 800f7f4:	200034e0 	.word	0x200034e0
 800f7f8:	200034e8 	.word	0x200034e8

0800f7fc <_ZdlPvj>:
 800f7fc:	f000 b814 	b.w	800f828 <_ZdlPv>

0800f800 <_Znwj>:
 800f800:	2801      	cmp	r0, #1
 800f802:	bf38      	it	cc
 800f804:	2001      	movcc	r0, #1
 800f806:	b510      	push	{r4, lr}
 800f808:	4604      	mov	r4, r0
 800f80a:	4620      	mov	r0, r4
 800f80c:	f000 ff78 	bl	8010700 <malloc>
 800f810:	b930      	cbnz	r0, 800f820 <_Znwj+0x20>
 800f812:	f000 f81d 	bl	800f850 <_ZSt15get_new_handlerv>
 800f816:	b908      	cbnz	r0, 800f81c <_Znwj+0x1c>
 800f818:	f000 ff3c 	bl	8010694 <abort>
 800f81c:	4780      	blx	r0
 800f81e:	e7f4      	b.n	800f80a <_Znwj+0xa>
 800f820:	bd10      	pop	{r4, pc}

0800f822 <__cxa_pure_virtual>:
 800f822:	b508      	push	{r3, lr}
 800f824:	f000 f80e 	bl	800f844 <_ZSt9terminatev>

0800f828 <_ZdlPv>:
 800f828:	f000 bf72 	b.w	8010710 <free>

0800f82c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f82c:	b508      	push	{r3, lr}
 800f82e:	4780      	blx	r0
 800f830:	f000 ff30 	bl	8010694 <abort>

0800f834 <_ZSt13get_terminatev>:
 800f834:	4b02      	ldr	r3, [pc, #8]	; (800f840 <_ZSt13get_terminatev+0xc>)
 800f836:	6818      	ldr	r0, [r3, #0]
 800f838:	f3bf 8f5b 	dmb	ish
 800f83c:	4770      	bx	lr
 800f83e:	bf00      	nop
 800f840:	20000048 	.word	0x20000048

0800f844 <_ZSt9terminatev>:
 800f844:	b508      	push	{r3, lr}
 800f846:	f7ff fff5 	bl	800f834 <_ZSt13get_terminatev>
 800f84a:	f7ff ffef 	bl	800f82c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800f850 <_ZSt15get_new_handlerv>:
 800f850:	4b02      	ldr	r3, [pc, #8]	; (800f85c <_ZSt15get_new_handlerv+0xc>)
 800f852:	6818      	ldr	r0, [r3, #0]
 800f854:	f3bf 8f5b 	dmb	ish
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	20003500 	.word	0x20003500

0800f860 <pow>:
 800f860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f862:	ed2d 8b02 	vpush	{d8}
 800f866:	eeb0 8a40 	vmov.f32	s16, s0
 800f86a:	eef0 8a60 	vmov.f32	s17, s1
 800f86e:	ec55 4b11 	vmov	r4, r5, d1
 800f872:	f000 f865 	bl	800f940 <__ieee754_pow>
 800f876:	4622      	mov	r2, r4
 800f878:	462b      	mov	r3, r5
 800f87a:	4620      	mov	r0, r4
 800f87c:	4629      	mov	r1, r5
 800f87e:	ec57 6b10 	vmov	r6, r7, d0
 800f882:	f7f1 f963 	bl	8000b4c <__aeabi_dcmpun>
 800f886:	2800      	cmp	r0, #0
 800f888:	d13b      	bne.n	800f902 <pow+0xa2>
 800f88a:	ec51 0b18 	vmov	r0, r1, d8
 800f88e:	2200      	movs	r2, #0
 800f890:	2300      	movs	r3, #0
 800f892:	f7f1 f929 	bl	8000ae8 <__aeabi_dcmpeq>
 800f896:	b1b8      	cbz	r0, 800f8c8 <pow+0x68>
 800f898:	2200      	movs	r2, #0
 800f89a:	2300      	movs	r3, #0
 800f89c:	4620      	mov	r0, r4
 800f89e:	4629      	mov	r1, r5
 800f8a0:	f7f1 f922 	bl	8000ae8 <__aeabi_dcmpeq>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	d146      	bne.n	800f936 <pow+0xd6>
 800f8a8:	ec45 4b10 	vmov	d0, r4, r5
 800f8ac:	f000 fe61 	bl	8010572 <finite>
 800f8b0:	b338      	cbz	r0, 800f902 <pow+0xa2>
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	4629      	mov	r1, r5
 800f8ba:	f7f1 f91f 	bl	8000afc <__aeabi_dcmplt>
 800f8be:	b300      	cbz	r0, 800f902 <pow+0xa2>
 800f8c0:	f000 fef4 	bl	80106ac <__errno>
 800f8c4:	2322      	movs	r3, #34	; 0x22
 800f8c6:	e01b      	b.n	800f900 <pow+0xa0>
 800f8c8:	ec47 6b10 	vmov	d0, r6, r7
 800f8cc:	f000 fe51 	bl	8010572 <finite>
 800f8d0:	b9e0      	cbnz	r0, 800f90c <pow+0xac>
 800f8d2:	eeb0 0a48 	vmov.f32	s0, s16
 800f8d6:	eef0 0a68 	vmov.f32	s1, s17
 800f8da:	f000 fe4a 	bl	8010572 <finite>
 800f8de:	b1a8      	cbz	r0, 800f90c <pow+0xac>
 800f8e0:	ec45 4b10 	vmov	d0, r4, r5
 800f8e4:	f000 fe45 	bl	8010572 <finite>
 800f8e8:	b180      	cbz	r0, 800f90c <pow+0xac>
 800f8ea:	4632      	mov	r2, r6
 800f8ec:	463b      	mov	r3, r7
 800f8ee:	4630      	mov	r0, r6
 800f8f0:	4639      	mov	r1, r7
 800f8f2:	f7f1 f92b 	bl	8000b4c <__aeabi_dcmpun>
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	d0e2      	beq.n	800f8c0 <pow+0x60>
 800f8fa:	f000 fed7 	bl	80106ac <__errno>
 800f8fe:	2321      	movs	r3, #33	; 0x21
 800f900:	6003      	str	r3, [r0, #0]
 800f902:	ecbd 8b02 	vpop	{d8}
 800f906:	ec47 6b10 	vmov	d0, r6, r7
 800f90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f90c:	2200      	movs	r2, #0
 800f90e:	2300      	movs	r3, #0
 800f910:	4630      	mov	r0, r6
 800f912:	4639      	mov	r1, r7
 800f914:	f7f1 f8e8 	bl	8000ae8 <__aeabi_dcmpeq>
 800f918:	2800      	cmp	r0, #0
 800f91a:	d0f2      	beq.n	800f902 <pow+0xa2>
 800f91c:	eeb0 0a48 	vmov.f32	s0, s16
 800f920:	eef0 0a68 	vmov.f32	s1, s17
 800f924:	f000 fe25 	bl	8010572 <finite>
 800f928:	2800      	cmp	r0, #0
 800f92a:	d0ea      	beq.n	800f902 <pow+0xa2>
 800f92c:	ec45 4b10 	vmov	d0, r4, r5
 800f930:	f000 fe1f 	bl	8010572 <finite>
 800f934:	e7c3      	b.n	800f8be <pow+0x5e>
 800f936:	4f01      	ldr	r7, [pc, #4]	; (800f93c <pow+0xdc>)
 800f938:	2600      	movs	r6, #0
 800f93a:	e7e2      	b.n	800f902 <pow+0xa2>
 800f93c:	3ff00000 	.word	0x3ff00000

0800f940 <__ieee754_pow>:
 800f940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f944:	ed2d 8b06 	vpush	{d8-d10}
 800f948:	b089      	sub	sp, #36	; 0x24
 800f94a:	ed8d 1b00 	vstr	d1, [sp]
 800f94e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f952:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f956:	ea58 0102 	orrs.w	r1, r8, r2
 800f95a:	ec57 6b10 	vmov	r6, r7, d0
 800f95e:	d115      	bne.n	800f98c <__ieee754_pow+0x4c>
 800f960:	19b3      	adds	r3, r6, r6
 800f962:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f966:	4152      	adcs	r2, r2
 800f968:	4299      	cmp	r1, r3
 800f96a:	4b89      	ldr	r3, [pc, #548]	; (800fb90 <__ieee754_pow+0x250>)
 800f96c:	4193      	sbcs	r3, r2
 800f96e:	f080 84d2 	bcs.w	8010316 <__ieee754_pow+0x9d6>
 800f972:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f976:	4630      	mov	r0, r6
 800f978:	4639      	mov	r1, r7
 800f97a:	f7f0 fc97 	bl	80002ac <__adddf3>
 800f97e:	ec41 0b10 	vmov	d0, r0, r1
 800f982:	b009      	add	sp, #36	; 0x24
 800f984:	ecbd 8b06 	vpop	{d8-d10}
 800f988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98c:	4b81      	ldr	r3, [pc, #516]	; (800fb94 <__ieee754_pow+0x254>)
 800f98e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f992:	429c      	cmp	r4, r3
 800f994:	ee10 aa10 	vmov	sl, s0
 800f998:	463d      	mov	r5, r7
 800f99a:	dc06      	bgt.n	800f9aa <__ieee754_pow+0x6a>
 800f99c:	d101      	bne.n	800f9a2 <__ieee754_pow+0x62>
 800f99e:	2e00      	cmp	r6, #0
 800f9a0:	d1e7      	bne.n	800f972 <__ieee754_pow+0x32>
 800f9a2:	4598      	cmp	r8, r3
 800f9a4:	dc01      	bgt.n	800f9aa <__ieee754_pow+0x6a>
 800f9a6:	d10f      	bne.n	800f9c8 <__ieee754_pow+0x88>
 800f9a8:	b172      	cbz	r2, 800f9c8 <__ieee754_pow+0x88>
 800f9aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f9ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f9b2:	ea55 050a 	orrs.w	r5, r5, sl
 800f9b6:	d1dc      	bne.n	800f972 <__ieee754_pow+0x32>
 800f9b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f9bc:	18db      	adds	r3, r3, r3
 800f9be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f9c2:	4152      	adcs	r2, r2
 800f9c4:	429d      	cmp	r5, r3
 800f9c6:	e7d0      	b.n	800f96a <__ieee754_pow+0x2a>
 800f9c8:	2d00      	cmp	r5, #0
 800f9ca:	da3b      	bge.n	800fa44 <__ieee754_pow+0x104>
 800f9cc:	4b72      	ldr	r3, [pc, #456]	; (800fb98 <__ieee754_pow+0x258>)
 800f9ce:	4598      	cmp	r8, r3
 800f9d0:	dc51      	bgt.n	800fa76 <__ieee754_pow+0x136>
 800f9d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f9d6:	4598      	cmp	r8, r3
 800f9d8:	f340 84ac 	ble.w	8010334 <__ieee754_pow+0x9f4>
 800f9dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f9e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f9e4:	2b14      	cmp	r3, #20
 800f9e6:	dd0f      	ble.n	800fa08 <__ieee754_pow+0xc8>
 800f9e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f9ec:	fa22 f103 	lsr.w	r1, r2, r3
 800f9f0:	fa01 f303 	lsl.w	r3, r1, r3
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	f040 849d 	bne.w	8010334 <__ieee754_pow+0x9f4>
 800f9fa:	f001 0101 	and.w	r1, r1, #1
 800f9fe:	f1c1 0302 	rsb	r3, r1, #2
 800fa02:	9304      	str	r3, [sp, #16]
 800fa04:	b182      	cbz	r2, 800fa28 <__ieee754_pow+0xe8>
 800fa06:	e05f      	b.n	800fac8 <__ieee754_pow+0x188>
 800fa08:	2a00      	cmp	r2, #0
 800fa0a:	d15b      	bne.n	800fac4 <__ieee754_pow+0x184>
 800fa0c:	f1c3 0314 	rsb	r3, r3, #20
 800fa10:	fa48 f103 	asr.w	r1, r8, r3
 800fa14:	fa01 f303 	lsl.w	r3, r1, r3
 800fa18:	4543      	cmp	r3, r8
 800fa1a:	f040 8488 	bne.w	801032e <__ieee754_pow+0x9ee>
 800fa1e:	f001 0101 	and.w	r1, r1, #1
 800fa22:	f1c1 0302 	rsb	r3, r1, #2
 800fa26:	9304      	str	r3, [sp, #16]
 800fa28:	4b5c      	ldr	r3, [pc, #368]	; (800fb9c <__ieee754_pow+0x25c>)
 800fa2a:	4598      	cmp	r8, r3
 800fa2c:	d132      	bne.n	800fa94 <__ieee754_pow+0x154>
 800fa2e:	f1b9 0f00 	cmp.w	r9, #0
 800fa32:	f280 8478 	bge.w	8010326 <__ieee754_pow+0x9e6>
 800fa36:	4959      	ldr	r1, [pc, #356]	; (800fb9c <__ieee754_pow+0x25c>)
 800fa38:	4632      	mov	r2, r6
 800fa3a:	463b      	mov	r3, r7
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	f7f0 ff15 	bl	800086c <__aeabi_ddiv>
 800fa42:	e79c      	b.n	800f97e <__ieee754_pow+0x3e>
 800fa44:	2300      	movs	r3, #0
 800fa46:	9304      	str	r3, [sp, #16]
 800fa48:	2a00      	cmp	r2, #0
 800fa4a:	d13d      	bne.n	800fac8 <__ieee754_pow+0x188>
 800fa4c:	4b51      	ldr	r3, [pc, #324]	; (800fb94 <__ieee754_pow+0x254>)
 800fa4e:	4598      	cmp	r8, r3
 800fa50:	d1ea      	bne.n	800fa28 <__ieee754_pow+0xe8>
 800fa52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fa56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fa5a:	ea53 030a 	orrs.w	r3, r3, sl
 800fa5e:	f000 845a 	beq.w	8010316 <__ieee754_pow+0x9d6>
 800fa62:	4b4f      	ldr	r3, [pc, #316]	; (800fba0 <__ieee754_pow+0x260>)
 800fa64:	429c      	cmp	r4, r3
 800fa66:	dd08      	ble.n	800fa7a <__ieee754_pow+0x13a>
 800fa68:	f1b9 0f00 	cmp.w	r9, #0
 800fa6c:	f2c0 8457 	blt.w	801031e <__ieee754_pow+0x9de>
 800fa70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa74:	e783      	b.n	800f97e <__ieee754_pow+0x3e>
 800fa76:	2302      	movs	r3, #2
 800fa78:	e7e5      	b.n	800fa46 <__ieee754_pow+0x106>
 800fa7a:	f1b9 0f00 	cmp.w	r9, #0
 800fa7e:	f04f 0000 	mov.w	r0, #0
 800fa82:	f04f 0100 	mov.w	r1, #0
 800fa86:	f6bf af7a 	bge.w	800f97e <__ieee754_pow+0x3e>
 800fa8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fa8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fa92:	e774      	b.n	800f97e <__ieee754_pow+0x3e>
 800fa94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800fa98:	d106      	bne.n	800faa8 <__ieee754_pow+0x168>
 800fa9a:	4632      	mov	r2, r6
 800fa9c:	463b      	mov	r3, r7
 800fa9e:	4630      	mov	r0, r6
 800faa0:	4639      	mov	r1, r7
 800faa2:	f7f0 fdb9 	bl	8000618 <__aeabi_dmul>
 800faa6:	e76a      	b.n	800f97e <__ieee754_pow+0x3e>
 800faa8:	4b3e      	ldr	r3, [pc, #248]	; (800fba4 <__ieee754_pow+0x264>)
 800faaa:	4599      	cmp	r9, r3
 800faac:	d10c      	bne.n	800fac8 <__ieee754_pow+0x188>
 800faae:	2d00      	cmp	r5, #0
 800fab0:	db0a      	blt.n	800fac8 <__ieee754_pow+0x188>
 800fab2:	ec47 6b10 	vmov	d0, r6, r7
 800fab6:	b009      	add	sp, #36	; 0x24
 800fab8:	ecbd 8b06 	vpop	{d8-d10}
 800fabc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac0:	f000 bc6c 	b.w	801039c <__ieee754_sqrt>
 800fac4:	2300      	movs	r3, #0
 800fac6:	9304      	str	r3, [sp, #16]
 800fac8:	ec47 6b10 	vmov	d0, r6, r7
 800facc:	f000 fd48 	bl	8010560 <fabs>
 800fad0:	ec51 0b10 	vmov	r0, r1, d0
 800fad4:	f1ba 0f00 	cmp.w	sl, #0
 800fad8:	d129      	bne.n	800fb2e <__ieee754_pow+0x1ee>
 800fada:	b124      	cbz	r4, 800fae6 <__ieee754_pow+0x1a6>
 800fadc:	4b2f      	ldr	r3, [pc, #188]	; (800fb9c <__ieee754_pow+0x25c>)
 800fade:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d123      	bne.n	800fb2e <__ieee754_pow+0x1ee>
 800fae6:	f1b9 0f00 	cmp.w	r9, #0
 800faea:	da05      	bge.n	800faf8 <__ieee754_pow+0x1b8>
 800faec:	4602      	mov	r2, r0
 800faee:	460b      	mov	r3, r1
 800faf0:	2000      	movs	r0, #0
 800faf2:	492a      	ldr	r1, [pc, #168]	; (800fb9c <__ieee754_pow+0x25c>)
 800faf4:	f7f0 feba 	bl	800086c <__aeabi_ddiv>
 800faf8:	2d00      	cmp	r5, #0
 800fafa:	f6bf af40 	bge.w	800f97e <__ieee754_pow+0x3e>
 800fafe:	9b04      	ldr	r3, [sp, #16]
 800fb00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fb04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fb08:	4323      	orrs	r3, r4
 800fb0a:	d108      	bne.n	800fb1e <__ieee754_pow+0x1de>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	460b      	mov	r3, r1
 800fb10:	4610      	mov	r0, r2
 800fb12:	4619      	mov	r1, r3
 800fb14:	f7f0 fbc8 	bl	80002a8 <__aeabi_dsub>
 800fb18:	4602      	mov	r2, r0
 800fb1a:	460b      	mov	r3, r1
 800fb1c:	e78f      	b.n	800fa3e <__ieee754_pow+0xfe>
 800fb1e:	9b04      	ldr	r3, [sp, #16]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	f47f af2c 	bne.w	800f97e <__ieee754_pow+0x3e>
 800fb26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	e727      	b.n	800f97e <__ieee754_pow+0x3e>
 800fb2e:	0feb      	lsrs	r3, r5, #31
 800fb30:	3b01      	subs	r3, #1
 800fb32:	9306      	str	r3, [sp, #24]
 800fb34:	9a06      	ldr	r2, [sp, #24]
 800fb36:	9b04      	ldr	r3, [sp, #16]
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	d102      	bne.n	800fb42 <__ieee754_pow+0x202>
 800fb3c:	4632      	mov	r2, r6
 800fb3e:	463b      	mov	r3, r7
 800fb40:	e7e6      	b.n	800fb10 <__ieee754_pow+0x1d0>
 800fb42:	4b19      	ldr	r3, [pc, #100]	; (800fba8 <__ieee754_pow+0x268>)
 800fb44:	4598      	cmp	r8, r3
 800fb46:	f340 80fb 	ble.w	800fd40 <__ieee754_pow+0x400>
 800fb4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fb4e:	4598      	cmp	r8, r3
 800fb50:	4b13      	ldr	r3, [pc, #76]	; (800fba0 <__ieee754_pow+0x260>)
 800fb52:	dd0c      	ble.n	800fb6e <__ieee754_pow+0x22e>
 800fb54:	429c      	cmp	r4, r3
 800fb56:	dc0f      	bgt.n	800fb78 <__ieee754_pow+0x238>
 800fb58:	f1b9 0f00 	cmp.w	r9, #0
 800fb5c:	da0f      	bge.n	800fb7e <__ieee754_pow+0x23e>
 800fb5e:	2000      	movs	r0, #0
 800fb60:	b009      	add	sp, #36	; 0x24
 800fb62:	ecbd 8b06 	vpop	{d8-d10}
 800fb66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb6a:	f000 bcf0 	b.w	801054e <__math_oflow>
 800fb6e:	429c      	cmp	r4, r3
 800fb70:	dbf2      	blt.n	800fb58 <__ieee754_pow+0x218>
 800fb72:	4b0a      	ldr	r3, [pc, #40]	; (800fb9c <__ieee754_pow+0x25c>)
 800fb74:	429c      	cmp	r4, r3
 800fb76:	dd19      	ble.n	800fbac <__ieee754_pow+0x26c>
 800fb78:	f1b9 0f00 	cmp.w	r9, #0
 800fb7c:	dcef      	bgt.n	800fb5e <__ieee754_pow+0x21e>
 800fb7e:	2000      	movs	r0, #0
 800fb80:	b009      	add	sp, #36	; 0x24
 800fb82:	ecbd 8b06 	vpop	{d8-d10}
 800fb86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8a:	f000 bcd7 	b.w	801053c <__math_uflow>
 800fb8e:	bf00      	nop
 800fb90:	fff00000 	.word	0xfff00000
 800fb94:	7ff00000 	.word	0x7ff00000
 800fb98:	433fffff 	.word	0x433fffff
 800fb9c:	3ff00000 	.word	0x3ff00000
 800fba0:	3fefffff 	.word	0x3fefffff
 800fba4:	3fe00000 	.word	0x3fe00000
 800fba8:	41e00000 	.word	0x41e00000
 800fbac:	4b60      	ldr	r3, [pc, #384]	; (800fd30 <__ieee754_pow+0x3f0>)
 800fbae:	2200      	movs	r2, #0
 800fbb0:	f7f0 fb7a 	bl	80002a8 <__aeabi_dsub>
 800fbb4:	a354      	add	r3, pc, #336	; (adr r3, 800fd08 <__ieee754_pow+0x3c8>)
 800fbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbba:	4604      	mov	r4, r0
 800fbbc:	460d      	mov	r5, r1
 800fbbe:	f7f0 fd2b 	bl	8000618 <__aeabi_dmul>
 800fbc2:	a353      	add	r3, pc, #332	; (adr r3, 800fd10 <__ieee754_pow+0x3d0>)
 800fbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc8:	4606      	mov	r6, r0
 800fbca:	460f      	mov	r7, r1
 800fbcc:	4620      	mov	r0, r4
 800fbce:	4629      	mov	r1, r5
 800fbd0:	f7f0 fd22 	bl	8000618 <__aeabi_dmul>
 800fbd4:	4b57      	ldr	r3, [pc, #348]	; (800fd34 <__ieee754_pow+0x3f4>)
 800fbd6:	4682      	mov	sl, r0
 800fbd8:	468b      	mov	fp, r1
 800fbda:	2200      	movs	r2, #0
 800fbdc:	4620      	mov	r0, r4
 800fbde:	4629      	mov	r1, r5
 800fbe0:	f7f0 fd1a 	bl	8000618 <__aeabi_dmul>
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	a14b      	add	r1, pc, #300	; (adr r1, 800fd18 <__ieee754_pow+0x3d8>)
 800fbea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbee:	f7f0 fb5b 	bl	80002a8 <__aeabi_dsub>
 800fbf2:	4622      	mov	r2, r4
 800fbf4:	462b      	mov	r3, r5
 800fbf6:	f7f0 fd0f 	bl	8000618 <__aeabi_dmul>
 800fbfa:	4602      	mov	r2, r0
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	2000      	movs	r0, #0
 800fc00:	494d      	ldr	r1, [pc, #308]	; (800fd38 <__ieee754_pow+0x3f8>)
 800fc02:	f7f0 fb51 	bl	80002a8 <__aeabi_dsub>
 800fc06:	4622      	mov	r2, r4
 800fc08:	4680      	mov	r8, r0
 800fc0a:	4689      	mov	r9, r1
 800fc0c:	462b      	mov	r3, r5
 800fc0e:	4620      	mov	r0, r4
 800fc10:	4629      	mov	r1, r5
 800fc12:	f7f0 fd01 	bl	8000618 <__aeabi_dmul>
 800fc16:	4602      	mov	r2, r0
 800fc18:	460b      	mov	r3, r1
 800fc1a:	4640      	mov	r0, r8
 800fc1c:	4649      	mov	r1, r9
 800fc1e:	f7f0 fcfb 	bl	8000618 <__aeabi_dmul>
 800fc22:	a33f      	add	r3, pc, #252	; (adr r3, 800fd20 <__ieee754_pow+0x3e0>)
 800fc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc28:	f7f0 fcf6 	bl	8000618 <__aeabi_dmul>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	460b      	mov	r3, r1
 800fc30:	4650      	mov	r0, sl
 800fc32:	4659      	mov	r1, fp
 800fc34:	f7f0 fb38 	bl	80002a8 <__aeabi_dsub>
 800fc38:	4602      	mov	r2, r0
 800fc3a:	460b      	mov	r3, r1
 800fc3c:	4680      	mov	r8, r0
 800fc3e:	4689      	mov	r9, r1
 800fc40:	4630      	mov	r0, r6
 800fc42:	4639      	mov	r1, r7
 800fc44:	f7f0 fb32 	bl	80002ac <__adddf3>
 800fc48:	2000      	movs	r0, #0
 800fc4a:	4632      	mov	r2, r6
 800fc4c:	463b      	mov	r3, r7
 800fc4e:	4604      	mov	r4, r0
 800fc50:	460d      	mov	r5, r1
 800fc52:	f7f0 fb29 	bl	80002a8 <__aeabi_dsub>
 800fc56:	4602      	mov	r2, r0
 800fc58:	460b      	mov	r3, r1
 800fc5a:	4640      	mov	r0, r8
 800fc5c:	4649      	mov	r1, r9
 800fc5e:	f7f0 fb23 	bl	80002a8 <__aeabi_dsub>
 800fc62:	9b04      	ldr	r3, [sp, #16]
 800fc64:	9a06      	ldr	r2, [sp, #24]
 800fc66:	3b01      	subs	r3, #1
 800fc68:	4313      	orrs	r3, r2
 800fc6a:	4682      	mov	sl, r0
 800fc6c:	468b      	mov	fp, r1
 800fc6e:	f040 81e7 	bne.w	8010040 <__ieee754_pow+0x700>
 800fc72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fd28 <__ieee754_pow+0x3e8>
 800fc76:	eeb0 8a47 	vmov.f32	s16, s14
 800fc7a:	eef0 8a67 	vmov.f32	s17, s15
 800fc7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fc82:	2600      	movs	r6, #0
 800fc84:	4632      	mov	r2, r6
 800fc86:	463b      	mov	r3, r7
 800fc88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc8c:	f7f0 fb0c 	bl	80002a8 <__aeabi_dsub>
 800fc90:	4622      	mov	r2, r4
 800fc92:	462b      	mov	r3, r5
 800fc94:	f7f0 fcc0 	bl	8000618 <__aeabi_dmul>
 800fc98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc9c:	4680      	mov	r8, r0
 800fc9e:	4689      	mov	r9, r1
 800fca0:	4650      	mov	r0, sl
 800fca2:	4659      	mov	r1, fp
 800fca4:	f7f0 fcb8 	bl	8000618 <__aeabi_dmul>
 800fca8:	4602      	mov	r2, r0
 800fcaa:	460b      	mov	r3, r1
 800fcac:	4640      	mov	r0, r8
 800fcae:	4649      	mov	r1, r9
 800fcb0:	f7f0 fafc 	bl	80002ac <__adddf3>
 800fcb4:	4632      	mov	r2, r6
 800fcb6:	463b      	mov	r3, r7
 800fcb8:	4680      	mov	r8, r0
 800fcba:	4689      	mov	r9, r1
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	4629      	mov	r1, r5
 800fcc0:	f7f0 fcaa 	bl	8000618 <__aeabi_dmul>
 800fcc4:	460b      	mov	r3, r1
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	460d      	mov	r5, r1
 800fcca:	4602      	mov	r2, r0
 800fccc:	4649      	mov	r1, r9
 800fcce:	4640      	mov	r0, r8
 800fcd0:	f7f0 faec 	bl	80002ac <__adddf3>
 800fcd4:	4b19      	ldr	r3, [pc, #100]	; (800fd3c <__ieee754_pow+0x3fc>)
 800fcd6:	4299      	cmp	r1, r3
 800fcd8:	ec45 4b19 	vmov	d9, r4, r5
 800fcdc:	4606      	mov	r6, r0
 800fcde:	460f      	mov	r7, r1
 800fce0:	468b      	mov	fp, r1
 800fce2:	f340 82f1 	ble.w	80102c8 <__ieee754_pow+0x988>
 800fce6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fcea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fcee:	4303      	orrs	r3, r0
 800fcf0:	f000 81e4 	beq.w	80100bc <__ieee754_pow+0x77c>
 800fcf4:	ec51 0b18 	vmov	r0, r1, d8
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	f7f0 fefe 	bl	8000afc <__aeabi_dcmplt>
 800fd00:	3800      	subs	r0, #0
 800fd02:	bf18      	it	ne
 800fd04:	2001      	movne	r0, #1
 800fd06:	e72b      	b.n	800fb60 <__ieee754_pow+0x220>
 800fd08:	60000000 	.word	0x60000000
 800fd0c:	3ff71547 	.word	0x3ff71547
 800fd10:	f85ddf44 	.word	0xf85ddf44
 800fd14:	3e54ae0b 	.word	0x3e54ae0b
 800fd18:	55555555 	.word	0x55555555
 800fd1c:	3fd55555 	.word	0x3fd55555
 800fd20:	652b82fe 	.word	0x652b82fe
 800fd24:	3ff71547 	.word	0x3ff71547
 800fd28:	00000000 	.word	0x00000000
 800fd2c:	bff00000 	.word	0xbff00000
 800fd30:	3ff00000 	.word	0x3ff00000
 800fd34:	3fd00000 	.word	0x3fd00000
 800fd38:	3fe00000 	.word	0x3fe00000
 800fd3c:	408fffff 	.word	0x408fffff
 800fd40:	4bd5      	ldr	r3, [pc, #852]	; (8010098 <__ieee754_pow+0x758>)
 800fd42:	402b      	ands	r3, r5
 800fd44:	2200      	movs	r2, #0
 800fd46:	b92b      	cbnz	r3, 800fd54 <__ieee754_pow+0x414>
 800fd48:	4bd4      	ldr	r3, [pc, #848]	; (801009c <__ieee754_pow+0x75c>)
 800fd4a:	f7f0 fc65 	bl	8000618 <__aeabi_dmul>
 800fd4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fd52:	460c      	mov	r4, r1
 800fd54:	1523      	asrs	r3, r4, #20
 800fd56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fd5a:	4413      	add	r3, r2
 800fd5c:	9305      	str	r3, [sp, #20]
 800fd5e:	4bd0      	ldr	r3, [pc, #832]	; (80100a0 <__ieee754_pow+0x760>)
 800fd60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fd64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fd68:	429c      	cmp	r4, r3
 800fd6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fd6e:	dd08      	ble.n	800fd82 <__ieee754_pow+0x442>
 800fd70:	4bcc      	ldr	r3, [pc, #816]	; (80100a4 <__ieee754_pow+0x764>)
 800fd72:	429c      	cmp	r4, r3
 800fd74:	f340 8162 	ble.w	801003c <__ieee754_pow+0x6fc>
 800fd78:	9b05      	ldr	r3, [sp, #20]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	9305      	str	r3, [sp, #20]
 800fd7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fd82:	2400      	movs	r4, #0
 800fd84:	00e3      	lsls	r3, r4, #3
 800fd86:	9307      	str	r3, [sp, #28]
 800fd88:	4bc7      	ldr	r3, [pc, #796]	; (80100a8 <__ieee754_pow+0x768>)
 800fd8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd8e:	ed93 7b00 	vldr	d7, [r3]
 800fd92:	4629      	mov	r1, r5
 800fd94:	ec53 2b17 	vmov	r2, r3, d7
 800fd98:	eeb0 9a47 	vmov.f32	s18, s14
 800fd9c:	eef0 9a67 	vmov.f32	s19, s15
 800fda0:	4682      	mov	sl, r0
 800fda2:	f7f0 fa81 	bl	80002a8 <__aeabi_dsub>
 800fda6:	4652      	mov	r2, sl
 800fda8:	4606      	mov	r6, r0
 800fdaa:	460f      	mov	r7, r1
 800fdac:	462b      	mov	r3, r5
 800fdae:	ec51 0b19 	vmov	r0, r1, d9
 800fdb2:	f7f0 fa7b 	bl	80002ac <__adddf3>
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	460b      	mov	r3, r1
 800fdba:	2000      	movs	r0, #0
 800fdbc:	49bb      	ldr	r1, [pc, #748]	; (80100ac <__ieee754_pow+0x76c>)
 800fdbe:	f7f0 fd55 	bl	800086c <__aeabi_ddiv>
 800fdc2:	ec41 0b1a 	vmov	d10, r0, r1
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	460b      	mov	r3, r1
 800fdca:	4630      	mov	r0, r6
 800fdcc:	4639      	mov	r1, r7
 800fdce:	f7f0 fc23 	bl	8000618 <__aeabi_dmul>
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdd8:	9302      	str	r3, [sp, #8]
 800fdda:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fdde:	46ab      	mov	fp, r5
 800fde0:	106d      	asrs	r5, r5, #1
 800fde2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fde6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fdea:	ec41 0b18 	vmov	d8, r0, r1
 800fdee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	4640      	mov	r0, r8
 800fdf6:	4649      	mov	r1, r9
 800fdf8:	4614      	mov	r4, r2
 800fdfa:	461d      	mov	r5, r3
 800fdfc:	f7f0 fc0c 	bl	8000618 <__aeabi_dmul>
 800fe00:	4602      	mov	r2, r0
 800fe02:	460b      	mov	r3, r1
 800fe04:	4630      	mov	r0, r6
 800fe06:	4639      	mov	r1, r7
 800fe08:	f7f0 fa4e 	bl	80002a8 <__aeabi_dsub>
 800fe0c:	ec53 2b19 	vmov	r2, r3, d9
 800fe10:	4606      	mov	r6, r0
 800fe12:	460f      	mov	r7, r1
 800fe14:	4620      	mov	r0, r4
 800fe16:	4629      	mov	r1, r5
 800fe18:	f7f0 fa46 	bl	80002a8 <__aeabi_dsub>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	460b      	mov	r3, r1
 800fe20:	4650      	mov	r0, sl
 800fe22:	4659      	mov	r1, fp
 800fe24:	f7f0 fa40 	bl	80002a8 <__aeabi_dsub>
 800fe28:	4642      	mov	r2, r8
 800fe2a:	464b      	mov	r3, r9
 800fe2c:	f7f0 fbf4 	bl	8000618 <__aeabi_dmul>
 800fe30:	4602      	mov	r2, r0
 800fe32:	460b      	mov	r3, r1
 800fe34:	4630      	mov	r0, r6
 800fe36:	4639      	mov	r1, r7
 800fe38:	f7f0 fa36 	bl	80002a8 <__aeabi_dsub>
 800fe3c:	ec53 2b1a 	vmov	r2, r3, d10
 800fe40:	f7f0 fbea 	bl	8000618 <__aeabi_dmul>
 800fe44:	ec53 2b18 	vmov	r2, r3, d8
 800fe48:	ec41 0b19 	vmov	d9, r0, r1
 800fe4c:	ec51 0b18 	vmov	r0, r1, d8
 800fe50:	f7f0 fbe2 	bl	8000618 <__aeabi_dmul>
 800fe54:	a37c      	add	r3, pc, #496	; (adr r3, 8010048 <__ieee754_pow+0x708>)
 800fe56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5a:	4604      	mov	r4, r0
 800fe5c:	460d      	mov	r5, r1
 800fe5e:	f7f0 fbdb 	bl	8000618 <__aeabi_dmul>
 800fe62:	a37b      	add	r3, pc, #492	; (adr r3, 8010050 <__ieee754_pow+0x710>)
 800fe64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe68:	f7f0 fa20 	bl	80002ac <__adddf3>
 800fe6c:	4622      	mov	r2, r4
 800fe6e:	462b      	mov	r3, r5
 800fe70:	f7f0 fbd2 	bl	8000618 <__aeabi_dmul>
 800fe74:	a378      	add	r3, pc, #480	; (adr r3, 8010058 <__ieee754_pow+0x718>)
 800fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7a:	f7f0 fa17 	bl	80002ac <__adddf3>
 800fe7e:	4622      	mov	r2, r4
 800fe80:	462b      	mov	r3, r5
 800fe82:	f7f0 fbc9 	bl	8000618 <__aeabi_dmul>
 800fe86:	a376      	add	r3, pc, #472	; (adr r3, 8010060 <__ieee754_pow+0x720>)
 800fe88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8c:	f7f0 fa0e 	bl	80002ac <__adddf3>
 800fe90:	4622      	mov	r2, r4
 800fe92:	462b      	mov	r3, r5
 800fe94:	f7f0 fbc0 	bl	8000618 <__aeabi_dmul>
 800fe98:	a373      	add	r3, pc, #460	; (adr r3, 8010068 <__ieee754_pow+0x728>)
 800fe9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9e:	f7f0 fa05 	bl	80002ac <__adddf3>
 800fea2:	4622      	mov	r2, r4
 800fea4:	462b      	mov	r3, r5
 800fea6:	f7f0 fbb7 	bl	8000618 <__aeabi_dmul>
 800feaa:	a371      	add	r3, pc, #452	; (adr r3, 8010070 <__ieee754_pow+0x730>)
 800feac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb0:	f7f0 f9fc 	bl	80002ac <__adddf3>
 800feb4:	4622      	mov	r2, r4
 800feb6:	4606      	mov	r6, r0
 800feb8:	460f      	mov	r7, r1
 800feba:	462b      	mov	r3, r5
 800febc:	4620      	mov	r0, r4
 800febe:	4629      	mov	r1, r5
 800fec0:	f7f0 fbaa 	bl	8000618 <__aeabi_dmul>
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	4630      	mov	r0, r6
 800feca:	4639      	mov	r1, r7
 800fecc:	f7f0 fba4 	bl	8000618 <__aeabi_dmul>
 800fed0:	4642      	mov	r2, r8
 800fed2:	4604      	mov	r4, r0
 800fed4:	460d      	mov	r5, r1
 800fed6:	464b      	mov	r3, r9
 800fed8:	ec51 0b18 	vmov	r0, r1, d8
 800fedc:	f7f0 f9e6 	bl	80002ac <__adddf3>
 800fee0:	ec53 2b19 	vmov	r2, r3, d9
 800fee4:	f7f0 fb98 	bl	8000618 <__aeabi_dmul>
 800fee8:	4622      	mov	r2, r4
 800feea:	462b      	mov	r3, r5
 800feec:	f7f0 f9de 	bl	80002ac <__adddf3>
 800fef0:	4642      	mov	r2, r8
 800fef2:	4682      	mov	sl, r0
 800fef4:	468b      	mov	fp, r1
 800fef6:	464b      	mov	r3, r9
 800fef8:	4640      	mov	r0, r8
 800fefa:	4649      	mov	r1, r9
 800fefc:	f7f0 fb8c 	bl	8000618 <__aeabi_dmul>
 800ff00:	4b6b      	ldr	r3, [pc, #428]	; (80100b0 <__ieee754_pow+0x770>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	4606      	mov	r6, r0
 800ff06:	460f      	mov	r7, r1
 800ff08:	f7f0 f9d0 	bl	80002ac <__adddf3>
 800ff0c:	4652      	mov	r2, sl
 800ff0e:	465b      	mov	r3, fp
 800ff10:	f7f0 f9cc 	bl	80002ac <__adddf3>
 800ff14:	2000      	movs	r0, #0
 800ff16:	4604      	mov	r4, r0
 800ff18:	460d      	mov	r5, r1
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	4640      	mov	r0, r8
 800ff20:	4649      	mov	r1, r9
 800ff22:	f7f0 fb79 	bl	8000618 <__aeabi_dmul>
 800ff26:	4b62      	ldr	r3, [pc, #392]	; (80100b0 <__ieee754_pow+0x770>)
 800ff28:	4680      	mov	r8, r0
 800ff2a:	4689      	mov	r9, r1
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	4620      	mov	r0, r4
 800ff30:	4629      	mov	r1, r5
 800ff32:	f7f0 f9b9 	bl	80002a8 <__aeabi_dsub>
 800ff36:	4632      	mov	r2, r6
 800ff38:	463b      	mov	r3, r7
 800ff3a:	f7f0 f9b5 	bl	80002a8 <__aeabi_dsub>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	460b      	mov	r3, r1
 800ff42:	4650      	mov	r0, sl
 800ff44:	4659      	mov	r1, fp
 800ff46:	f7f0 f9af 	bl	80002a8 <__aeabi_dsub>
 800ff4a:	ec53 2b18 	vmov	r2, r3, d8
 800ff4e:	f7f0 fb63 	bl	8000618 <__aeabi_dmul>
 800ff52:	4622      	mov	r2, r4
 800ff54:	4606      	mov	r6, r0
 800ff56:	460f      	mov	r7, r1
 800ff58:	462b      	mov	r3, r5
 800ff5a:	ec51 0b19 	vmov	r0, r1, d9
 800ff5e:	f7f0 fb5b 	bl	8000618 <__aeabi_dmul>
 800ff62:	4602      	mov	r2, r0
 800ff64:	460b      	mov	r3, r1
 800ff66:	4630      	mov	r0, r6
 800ff68:	4639      	mov	r1, r7
 800ff6a:	f7f0 f99f 	bl	80002ac <__adddf3>
 800ff6e:	4606      	mov	r6, r0
 800ff70:	460f      	mov	r7, r1
 800ff72:	4602      	mov	r2, r0
 800ff74:	460b      	mov	r3, r1
 800ff76:	4640      	mov	r0, r8
 800ff78:	4649      	mov	r1, r9
 800ff7a:	f7f0 f997 	bl	80002ac <__adddf3>
 800ff7e:	a33e      	add	r3, pc, #248	; (adr r3, 8010078 <__ieee754_pow+0x738>)
 800ff80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff84:	2000      	movs	r0, #0
 800ff86:	4604      	mov	r4, r0
 800ff88:	460d      	mov	r5, r1
 800ff8a:	f7f0 fb45 	bl	8000618 <__aeabi_dmul>
 800ff8e:	4642      	mov	r2, r8
 800ff90:	ec41 0b18 	vmov	d8, r0, r1
 800ff94:	464b      	mov	r3, r9
 800ff96:	4620      	mov	r0, r4
 800ff98:	4629      	mov	r1, r5
 800ff9a:	f7f0 f985 	bl	80002a8 <__aeabi_dsub>
 800ff9e:	4602      	mov	r2, r0
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	4639      	mov	r1, r7
 800ffa6:	f7f0 f97f 	bl	80002a8 <__aeabi_dsub>
 800ffaa:	a335      	add	r3, pc, #212	; (adr r3, 8010080 <__ieee754_pow+0x740>)
 800ffac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb0:	f7f0 fb32 	bl	8000618 <__aeabi_dmul>
 800ffb4:	a334      	add	r3, pc, #208	; (adr r3, 8010088 <__ieee754_pow+0x748>)
 800ffb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffba:	4606      	mov	r6, r0
 800ffbc:	460f      	mov	r7, r1
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	4629      	mov	r1, r5
 800ffc2:	f7f0 fb29 	bl	8000618 <__aeabi_dmul>
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	460b      	mov	r3, r1
 800ffca:	4630      	mov	r0, r6
 800ffcc:	4639      	mov	r1, r7
 800ffce:	f7f0 f96d 	bl	80002ac <__adddf3>
 800ffd2:	9a07      	ldr	r2, [sp, #28]
 800ffd4:	4b37      	ldr	r3, [pc, #220]	; (80100b4 <__ieee754_pow+0x774>)
 800ffd6:	4413      	add	r3, r2
 800ffd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffdc:	f7f0 f966 	bl	80002ac <__adddf3>
 800ffe0:	4682      	mov	sl, r0
 800ffe2:	9805      	ldr	r0, [sp, #20]
 800ffe4:	468b      	mov	fp, r1
 800ffe6:	f7f0 faad 	bl	8000544 <__aeabi_i2d>
 800ffea:	9a07      	ldr	r2, [sp, #28]
 800ffec:	4b32      	ldr	r3, [pc, #200]	; (80100b8 <__ieee754_pow+0x778>)
 800ffee:	4413      	add	r3, r2
 800fff0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fff4:	4606      	mov	r6, r0
 800fff6:	460f      	mov	r7, r1
 800fff8:	4652      	mov	r2, sl
 800fffa:	465b      	mov	r3, fp
 800fffc:	ec51 0b18 	vmov	r0, r1, d8
 8010000:	f7f0 f954 	bl	80002ac <__adddf3>
 8010004:	4642      	mov	r2, r8
 8010006:	464b      	mov	r3, r9
 8010008:	f7f0 f950 	bl	80002ac <__adddf3>
 801000c:	4632      	mov	r2, r6
 801000e:	463b      	mov	r3, r7
 8010010:	f7f0 f94c 	bl	80002ac <__adddf3>
 8010014:	2000      	movs	r0, #0
 8010016:	4632      	mov	r2, r6
 8010018:	463b      	mov	r3, r7
 801001a:	4604      	mov	r4, r0
 801001c:	460d      	mov	r5, r1
 801001e:	f7f0 f943 	bl	80002a8 <__aeabi_dsub>
 8010022:	4642      	mov	r2, r8
 8010024:	464b      	mov	r3, r9
 8010026:	f7f0 f93f 	bl	80002a8 <__aeabi_dsub>
 801002a:	ec53 2b18 	vmov	r2, r3, d8
 801002e:	f7f0 f93b 	bl	80002a8 <__aeabi_dsub>
 8010032:	4602      	mov	r2, r0
 8010034:	460b      	mov	r3, r1
 8010036:	4650      	mov	r0, sl
 8010038:	4659      	mov	r1, fp
 801003a:	e610      	b.n	800fc5e <__ieee754_pow+0x31e>
 801003c:	2401      	movs	r4, #1
 801003e:	e6a1      	b.n	800fd84 <__ieee754_pow+0x444>
 8010040:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010090 <__ieee754_pow+0x750>
 8010044:	e617      	b.n	800fc76 <__ieee754_pow+0x336>
 8010046:	bf00      	nop
 8010048:	4a454eef 	.word	0x4a454eef
 801004c:	3fca7e28 	.word	0x3fca7e28
 8010050:	93c9db65 	.word	0x93c9db65
 8010054:	3fcd864a 	.word	0x3fcd864a
 8010058:	a91d4101 	.word	0xa91d4101
 801005c:	3fd17460 	.word	0x3fd17460
 8010060:	518f264d 	.word	0x518f264d
 8010064:	3fd55555 	.word	0x3fd55555
 8010068:	db6fabff 	.word	0xdb6fabff
 801006c:	3fdb6db6 	.word	0x3fdb6db6
 8010070:	33333303 	.word	0x33333303
 8010074:	3fe33333 	.word	0x3fe33333
 8010078:	e0000000 	.word	0xe0000000
 801007c:	3feec709 	.word	0x3feec709
 8010080:	dc3a03fd 	.word	0xdc3a03fd
 8010084:	3feec709 	.word	0x3feec709
 8010088:	145b01f5 	.word	0x145b01f5
 801008c:	be3e2fe0 	.word	0xbe3e2fe0
 8010090:	00000000 	.word	0x00000000
 8010094:	3ff00000 	.word	0x3ff00000
 8010098:	7ff00000 	.word	0x7ff00000
 801009c:	43400000 	.word	0x43400000
 80100a0:	0003988e 	.word	0x0003988e
 80100a4:	000bb679 	.word	0x000bb679
 80100a8:	08014020 	.word	0x08014020
 80100ac:	3ff00000 	.word	0x3ff00000
 80100b0:	40080000 	.word	0x40080000
 80100b4:	08014040 	.word	0x08014040
 80100b8:	08014030 	.word	0x08014030
 80100bc:	a3b5      	add	r3, pc, #724	; (adr r3, 8010394 <__ieee754_pow+0xa54>)
 80100be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c2:	4640      	mov	r0, r8
 80100c4:	4649      	mov	r1, r9
 80100c6:	f7f0 f8f1 	bl	80002ac <__adddf3>
 80100ca:	4622      	mov	r2, r4
 80100cc:	ec41 0b1a 	vmov	d10, r0, r1
 80100d0:	462b      	mov	r3, r5
 80100d2:	4630      	mov	r0, r6
 80100d4:	4639      	mov	r1, r7
 80100d6:	f7f0 f8e7 	bl	80002a8 <__aeabi_dsub>
 80100da:	4602      	mov	r2, r0
 80100dc:	460b      	mov	r3, r1
 80100de:	ec51 0b1a 	vmov	r0, r1, d10
 80100e2:	f7f0 fd29 	bl	8000b38 <__aeabi_dcmpgt>
 80100e6:	2800      	cmp	r0, #0
 80100e8:	f47f ae04 	bne.w	800fcf4 <__ieee754_pow+0x3b4>
 80100ec:	4aa4      	ldr	r2, [pc, #656]	; (8010380 <__ieee754_pow+0xa40>)
 80100ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100f2:	4293      	cmp	r3, r2
 80100f4:	f340 8108 	ble.w	8010308 <__ieee754_pow+0x9c8>
 80100f8:	151b      	asrs	r3, r3, #20
 80100fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80100fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010102:	fa4a f303 	asr.w	r3, sl, r3
 8010106:	445b      	add	r3, fp
 8010108:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801010c:	4e9d      	ldr	r6, [pc, #628]	; (8010384 <__ieee754_pow+0xa44>)
 801010e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010112:	4116      	asrs	r6, r2
 8010114:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010118:	2000      	movs	r0, #0
 801011a:	ea23 0106 	bic.w	r1, r3, r6
 801011e:	f1c2 0214 	rsb	r2, r2, #20
 8010122:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010126:	fa4a fa02 	asr.w	sl, sl, r2
 801012a:	f1bb 0f00 	cmp.w	fp, #0
 801012e:	4602      	mov	r2, r0
 8010130:	460b      	mov	r3, r1
 8010132:	4620      	mov	r0, r4
 8010134:	4629      	mov	r1, r5
 8010136:	bfb8      	it	lt
 8010138:	f1ca 0a00 	rsblt	sl, sl, #0
 801013c:	f7f0 f8b4 	bl	80002a8 <__aeabi_dsub>
 8010140:	ec41 0b19 	vmov	d9, r0, r1
 8010144:	4642      	mov	r2, r8
 8010146:	464b      	mov	r3, r9
 8010148:	ec51 0b19 	vmov	r0, r1, d9
 801014c:	f7f0 f8ae 	bl	80002ac <__adddf3>
 8010150:	a37b      	add	r3, pc, #492	; (adr r3, 8010340 <__ieee754_pow+0xa00>)
 8010152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010156:	2000      	movs	r0, #0
 8010158:	4604      	mov	r4, r0
 801015a:	460d      	mov	r5, r1
 801015c:	f7f0 fa5c 	bl	8000618 <__aeabi_dmul>
 8010160:	ec53 2b19 	vmov	r2, r3, d9
 8010164:	4606      	mov	r6, r0
 8010166:	460f      	mov	r7, r1
 8010168:	4620      	mov	r0, r4
 801016a:	4629      	mov	r1, r5
 801016c:	f7f0 f89c 	bl	80002a8 <__aeabi_dsub>
 8010170:	4602      	mov	r2, r0
 8010172:	460b      	mov	r3, r1
 8010174:	4640      	mov	r0, r8
 8010176:	4649      	mov	r1, r9
 8010178:	f7f0 f896 	bl	80002a8 <__aeabi_dsub>
 801017c:	a372      	add	r3, pc, #456	; (adr r3, 8010348 <__ieee754_pow+0xa08>)
 801017e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010182:	f7f0 fa49 	bl	8000618 <__aeabi_dmul>
 8010186:	a372      	add	r3, pc, #456	; (adr r3, 8010350 <__ieee754_pow+0xa10>)
 8010188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018c:	4680      	mov	r8, r0
 801018e:	4689      	mov	r9, r1
 8010190:	4620      	mov	r0, r4
 8010192:	4629      	mov	r1, r5
 8010194:	f7f0 fa40 	bl	8000618 <__aeabi_dmul>
 8010198:	4602      	mov	r2, r0
 801019a:	460b      	mov	r3, r1
 801019c:	4640      	mov	r0, r8
 801019e:	4649      	mov	r1, r9
 80101a0:	f7f0 f884 	bl	80002ac <__adddf3>
 80101a4:	4604      	mov	r4, r0
 80101a6:	460d      	mov	r5, r1
 80101a8:	4602      	mov	r2, r0
 80101aa:	460b      	mov	r3, r1
 80101ac:	4630      	mov	r0, r6
 80101ae:	4639      	mov	r1, r7
 80101b0:	f7f0 f87c 	bl	80002ac <__adddf3>
 80101b4:	4632      	mov	r2, r6
 80101b6:	463b      	mov	r3, r7
 80101b8:	4680      	mov	r8, r0
 80101ba:	4689      	mov	r9, r1
 80101bc:	f7f0 f874 	bl	80002a8 <__aeabi_dsub>
 80101c0:	4602      	mov	r2, r0
 80101c2:	460b      	mov	r3, r1
 80101c4:	4620      	mov	r0, r4
 80101c6:	4629      	mov	r1, r5
 80101c8:	f7f0 f86e 	bl	80002a8 <__aeabi_dsub>
 80101cc:	4642      	mov	r2, r8
 80101ce:	4606      	mov	r6, r0
 80101d0:	460f      	mov	r7, r1
 80101d2:	464b      	mov	r3, r9
 80101d4:	4640      	mov	r0, r8
 80101d6:	4649      	mov	r1, r9
 80101d8:	f7f0 fa1e 	bl	8000618 <__aeabi_dmul>
 80101dc:	a35e      	add	r3, pc, #376	; (adr r3, 8010358 <__ieee754_pow+0xa18>)
 80101de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e2:	4604      	mov	r4, r0
 80101e4:	460d      	mov	r5, r1
 80101e6:	f7f0 fa17 	bl	8000618 <__aeabi_dmul>
 80101ea:	a35d      	add	r3, pc, #372	; (adr r3, 8010360 <__ieee754_pow+0xa20>)
 80101ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f0:	f7f0 f85a 	bl	80002a8 <__aeabi_dsub>
 80101f4:	4622      	mov	r2, r4
 80101f6:	462b      	mov	r3, r5
 80101f8:	f7f0 fa0e 	bl	8000618 <__aeabi_dmul>
 80101fc:	a35a      	add	r3, pc, #360	; (adr r3, 8010368 <__ieee754_pow+0xa28>)
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	f7f0 f853 	bl	80002ac <__adddf3>
 8010206:	4622      	mov	r2, r4
 8010208:	462b      	mov	r3, r5
 801020a:	f7f0 fa05 	bl	8000618 <__aeabi_dmul>
 801020e:	a358      	add	r3, pc, #352	; (adr r3, 8010370 <__ieee754_pow+0xa30>)
 8010210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010214:	f7f0 f848 	bl	80002a8 <__aeabi_dsub>
 8010218:	4622      	mov	r2, r4
 801021a:	462b      	mov	r3, r5
 801021c:	f7f0 f9fc 	bl	8000618 <__aeabi_dmul>
 8010220:	a355      	add	r3, pc, #340	; (adr r3, 8010378 <__ieee754_pow+0xa38>)
 8010222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010226:	f7f0 f841 	bl	80002ac <__adddf3>
 801022a:	4622      	mov	r2, r4
 801022c:	462b      	mov	r3, r5
 801022e:	f7f0 f9f3 	bl	8000618 <__aeabi_dmul>
 8010232:	4602      	mov	r2, r0
 8010234:	460b      	mov	r3, r1
 8010236:	4640      	mov	r0, r8
 8010238:	4649      	mov	r1, r9
 801023a:	f7f0 f835 	bl	80002a8 <__aeabi_dsub>
 801023e:	4604      	mov	r4, r0
 8010240:	460d      	mov	r5, r1
 8010242:	4602      	mov	r2, r0
 8010244:	460b      	mov	r3, r1
 8010246:	4640      	mov	r0, r8
 8010248:	4649      	mov	r1, r9
 801024a:	f7f0 f9e5 	bl	8000618 <__aeabi_dmul>
 801024e:	2200      	movs	r2, #0
 8010250:	ec41 0b19 	vmov	d9, r0, r1
 8010254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010258:	4620      	mov	r0, r4
 801025a:	4629      	mov	r1, r5
 801025c:	f7f0 f824 	bl	80002a8 <__aeabi_dsub>
 8010260:	4602      	mov	r2, r0
 8010262:	460b      	mov	r3, r1
 8010264:	ec51 0b19 	vmov	r0, r1, d9
 8010268:	f7f0 fb00 	bl	800086c <__aeabi_ddiv>
 801026c:	4632      	mov	r2, r6
 801026e:	4604      	mov	r4, r0
 8010270:	460d      	mov	r5, r1
 8010272:	463b      	mov	r3, r7
 8010274:	4640      	mov	r0, r8
 8010276:	4649      	mov	r1, r9
 8010278:	f7f0 f9ce 	bl	8000618 <__aeabi_dmul>
 801027c:	4632      	mov	r2, r6
 801027e:	463b      	mov	r3, r7
 8010280:	f7f0 f814 	bl	80002ac <__adddf3>
 8010284:	4602      	mov	r2, r0
 8010286:	460b      	mov	r3, r1
 8010288:	4620      	mov	r0, r4
 801028a:	4629      	mov	r1, r5
 801028c:	f7f0 f80c 	bl	80002a8 <__aeabi_dsub>
 8010290:	4642      	mov	r2, r8
 8010292:	464b      	mov	r3, r9
 8010294:	f7f0 f808 	bl	80002a8 <__aeabi_dsub>
 8010298:	460b      	mov	r3, r1
 801029a:	4602      	mov	r2, r0
 801029c:	493a      	ldr	r1, [pc, #232]	; (8010388 <__ieee754_pow+0xa48>)
 801029e:	2000      	movs	r0, #0
 80102a0:	f7f0 f802 	bl	80002a8 <__aeabi_dsub>
 80102a4:	ec41 0b10 	vmov	d0, r0, r1
 80102a8:	ee10 3a90 	vmov	r3, s1
 80102ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80102b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80102b4:	da2b      	bge.n	801030e <__ieee754_pow+0x9ce>
 80102b6:	4650      	mov	r0, sl
 80102b8:	f000 f966 	bl	8010588 <scalbn>
 80102bc:	ec51 0b10 	vmov	r0, r1, d0
 80102c0:	ec53 2b18 	vmov	r2, r3, d8
 80102c4:	f7ff bbed 	b.w	800faa2 <__ieee754_pow+0x162>
 80102c8:	4b30      	ldr	r3, [pc, #192]	; (801038c <__ieee754_pow+0xa4c>)
 80102ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80102ce:	429e      	cmp	r6, r3
 80102d0:	f77f af0c 	ble.w	80100ec <__ieee754_pow+0x7ac>
 80102d4:	4b2e      	ldr	r3, [pc, #184]	; (8010390 <__ieee754_pow+0xa50>)
 80102d6:	440b      	add	r3, r1
 80102d8:	4303      	orrs	r3, r0
 80102da:	d009      	beq.n	80102f0 <__ieee754_pow+0x9b0>
 80102dc:	ec51 0b18 	vmov	r0, r1, d8
 80102e0:	2200      	movs	r2, #0
 80102e2:	2300      	movs	r3, #0
 80102e4:	f7f0 fc0a 	bl	8000afc <__aeabi_dcmplt>
 80102e8:	3800      	subs	r0, #0
 80102ea:	bf18      	it	ne
 80102ec:	2001      	movne	r0, #1
 80102ee:	e447      	b.n	800fb80 <__ieee754_pow+0x240>
 80102f0:	4622      	mov	r2, r4
 80102f2:	462b      	mov	r3, r5
 80102f4:	f7ef ffd8 	bl	80002a8 <__aeabi_dsub>
 80102f8:	4642      	mov	r2, r8
 80102fa:	464b      	mov	r3, r9
 80102fc:	f7f0 fc12 	bl	8000b24 <__aeabi_dcmpge>
 8010300:	2800      	cmp	r0, #0
 8010302:	f43f aef3 	beq.w	80100ec <__ieee754_pow+0x7ac>
 8010306:	e7e9      	b.n	80102dc <__ieee754_pow+0x99c>
 8010308:	f04f 0a00 	mov.w	sl, #0
 801030c:	e71a      	b.n	8010144 <__ieee754_pow+0x804>
 801030e:	ec51 0b10 	vmov	r0, r1, d0
 8010312:	4619      	mov	r1, r3
 8010314:	e7d4      	b.n	80102c0 <__ieee754_pow+0x980>
 8010316:	491c      	ldr	r1, [pc, #112]	; (8010388 <__ieee754_pow+0xa48>)
 8010318:	2000      	movs	r0, #0
 801031a:	f7ff bb30 	b.w	800f97e <__ieee754_pow+0x3e>
 801031e:	2000      	movs	r0, #0
 8010320:	2100      	movs	r1, #0
 8010322:	f7ff bb2c 	b.w	800f97e <__ieee754_pow+0x3e>
 8010326:	4630      	mov	r0, r6
 8010328:	4639      	mov	r1, r7
 801032a:	f7ff bb28 	b.w	800f97e <__ieee754_pow+0x3e>
 801032e:	9204      	str	r2, [sp, #16]
 8010330:	f7ff bb7a 	b.w	800fa28 <__ieee754_pow+0xe8>
 8010334:	2300      	movs	r3, #0
 8010336:	f7ff bb64 	b.w	800fa02 <__ieee754_pow+0xc2>
 801033a:	bf00      	nop
 801033c:	f3af 8000 	nop.w
 8010340:	00000000 	.word	0x00000000
 8010344:	3fe62e43 	.word	0x3fe62e43
 8010348:	fefa39ef 	.word	0xfefa39ef
 801034c:	3fe62e42 	.word	0x3fe62e42
 8010350:	0ca86c39 	.word	0x0ca86c39
 8010354:	be205c61 	.word	0xbe205c61
 8010358:	72bea4d0 	.word	0x72bea4d0
 801035c:	3e663769 	.word	0x3e663769
 8010360:	c5d26bf1 	.word	0xc5d26bf1
 8010364:	3ebbbd41 	.word	0x3ebbbd41
 8010368:	af25de2c 	.word	0xaf25de2c
 801036c:	3f11566a 	.word	0x3f11566a
 8010370:	16bebd93 	.word	0x16bebd93
 8010374:	3f66c16c 	.word	0x3f66c16c
 8010378:	5555553e 	.word	0x5555553e
 801037c:	3fc55555 	.word	0x3fc55555
 8010380:	3fe00000 	.word	0x3fe00000
 8010384:	000fffff 	.word	0x000fffff
 8010388:	3ff00000 	.word	0x3ff00000
 801038c:	4090cbff 	.word	0x4090cbff
 8010390:	3f6f3400 	.word	0x3f6f3400
 8010394:	652b82fe 	.word	0x652b82fe
 8010398:	3c971547 	.word	0x3c971547

0801039c <__ieee754_sqrt>:
 801039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a0:	ec55 4b10 	vmov	r4, r5, d0
 80103a4:	4e55      	ldr	r6, [pc, #340]	; (80104fc <__ieee754_sqrt+0x160>)
 80103a6:	43ae      	bics	r6, r5
 80103a8:	ee10 0a10 	vmov	r0, s0
 80103ac:	ee10 3a10 	vmov	r3, s0
 80103b0:	462a      	mov	r2, r5
 80103b2:	4629      	mov	r1, r5
 80103b4:	d110      	bne.n	80103d8 <__ieee754_sqrt+0x3c>
 80103b6:	ee10 2a10 	vmov	r2, s0
 80103ba:	462b      	mov	r3, r5
 80103bc:	f7f0 f92c 	bl	8000618 <__aeabi_dmul>
 80103c0:	4602      	mov	r2, r0
 80103c2:	460b      	mov	r3, r1
 80103c4:	4620      	mov	r0, r4
 80103c6:	4629      	mov	r1, r5
 80103c8:	f7ef ff70 	bl	80002ac <__adddf3>
 80103cc:	4604      	mov	r4, r0
 80103ce:	460d      	mov	r5, r1
 80103d0:	ec45 4b10 	vmov	d0, r4, r5
 80103d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d8:	2d00      	cmp	r5, #0
 80103da:	dc10      	bgt.n	80103fe <__ieee754_sqrt+0x62>
 80103dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80103e0:	4330      	orrs	r0, r6
 80103e2:	d0f5      	beq.n	80103d0 <__ieee754_sqrt+0x34>
 80103e4:	b15d      	cbz	r5, 80103fe <__ieee754_sqrt+0x62>
 80103e6:	ee10 2a10 	vmov	r2, s0
 80103ea:	462b      	mov	r3, r5
 80103ec:	ee10 0a10 	vmov	r0, s0
 80103f0:	f7ef ff5a 	bl	80002a8 <__aeabi_dsub>
 80103f4:	4602      	mov	r2, r0
 80103f6:	460b      	mov	r3, r1
 80103f8:	f7f0 fa38 	bl	800086c <__aeabi_ddiv>
 80103fc:	e7e6      	b.n	80103cc <__ieee754_sqrt+0x30>
 80103fe:	1512      	asrs	r2, r2, #20
 8010400:	d074      	beq.n	80104ec <__ieee754_sqrt+0x150>
 8010402:	07d4      	lsls	r4, r2, #31
 8010404:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010408:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801040c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010410:	bf5e      	ittt	pl
 8010412:	0fda      	lsrpl	r2, r3, #31
 8010414:	005b      	lslpl	r3, r3, #1
 8010416:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801041a:	2400      	movs	r4, #0
 801041c:	0fda      	lsrs	r2, r3, #31
 801041e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010422:	107f      	asrs	r7, r7, #1
 8010424:	005b      	lsls	r3, r3, #1
 8010426:	2516      	movs	r5, #22
 8010428:	4620      	mov	r0, r4
 801042a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801042e:	1886      	adds	r6, r0, r2
 8010430:	428e      	cmp	r6, r1
 8010432:	bfde      	ittt	le
 8010434:	1b89      	suble	r1, r1, r6
 8010436:	18b0      	addle	r0, r6, r2
 8010438:	18a4      	addle	r4, r4, r2
 801043a:	0049      	lsls	r1, r1, #1
 801043c:	3d01      	subs	r5, #1
 801043e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010442:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010446:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801044a:	d1f0      	bne.n	801042e <__ieee754_sqrt+0x92>
 801044c:	462a      	mov	r2, r5
 801044e:	f04f 0e20 	mov.w	lr, #32
 8010452:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010456:	4281      	cmp	r1, r0
 8010458:	eb06 0c05 	add.w	ip, r6, r5
 801045c:	dc02      	bgt.n	8010464 <__ieee754_sqrt+0xc8>
 801045e:	d113      	bne.n	8010488 <__ieee754_sqrt+0xec>
 8010460:	459c      	cmp	ip, r3
 8010462:	d811      	bhi.n	8010488 <__ieee754_sqrt+0xec>
 8010464:	f1bc 0f00 	cmp.w	ip, #0
 8010468:	eb0c 0506 	add.w	r5, ip, r6
 801046c:	da43      	bge.n	80104f6 <__ieee754_sqrt+0x15a>
 801046e:	2d00      	cmp	r5, #0
 8010470:	db41      	blt.n	80104f6 <__ieee754_sqrt+0x15a>
 8010472:	f100 0801 	add.w	r8, r0, #1
 8010476:	1a09      	subs	r1, r1, r0
 8010478:	459c      	cmp	ip, r3
 801047a:	bf88      	it	hi
 801047c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010480:	eba3 030c 	sub.w	r3, r3, ip
 8010484:	4432      	add	r2, r6
 8010486:	4640      	mov	r0, r8
 8010488:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801048c:	f1be 0e01 	subs.w	lr, lr, #1
 8010490:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010494:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010498:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801049c:	d1db      	bne.n	8010456 <__ieee754_sqrt+0xba>
 801049e:	430b      	orrs	r3, r1
 80104a0:	d006      	beq.n	80104b0 <__ieee754_sqrt+0x114>
 80104a2:	1c50      	adds	r0, r2, #1
 80104a4:	bf13      	iteet	ne
 80104a6:	3201      	addne	r2, #1
 80104a8:	3401      	addeq	r4, #1
 80104aa:	4672      	moveq	r2, lr
 80104ac:	f022 0201 	bicne.w	r2, r2, #1
 80104b0:	1063      	asrs	r3, r4, #1
 80104b2:	0852      	lsrs	r2, r2, #1
 80104b4:	07e1      	lsls	r1, r4, #31
 80104b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80104ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80104be:	bf48      	it	mi
 80104c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80104c4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80104c8:	4614      	mov	r4, r2
 80104ca:	e781      	b.n	80103d0 <__ieee754_sqrt+0x34>
 80104cc:	0ad9      	lsrs	r1, r3, #11
 80104ce:	3815      	subs	r0, #21
 80104d0:	055b      	lsls	r3, r3, #21
 80104d2:	2900      	cmp	r1, #0
 80104d4:	d0fa      	beq.n	80104cc <__ieee754_sqrt+0x130>
 80104d6:	02cd      	lsls	r5, r1, #11
 80104d8:	d50a      	bpl.n	80104f0 <__ieee754_sqrt+0x154>
 80104da:	f1c2 0420 	rsb	r4, r2, #32
 80104de:	fa23 f404 	lsr.w	r4, r3, r4
 80104e2:	1e55      	subs	r5, r2, #1
 80104e4:	4093      	lsls	r3, r2
 80104e6:	4321      	orrs	r1, r4
 80104e8:	1b42      	subs	r2, r0, r5
 80104ea:	e78a      	b.n	8010402 <__ieee754_sqrt+0x66>
 80104ec:	4610      	mov	r0, r2
 80104ee:	e7f0      	b.n	80104d2 <__ieee754_sqrt+0x136>
 80104f0:	0049      	lsls	r1, r1, #1
 80104f2:	3201      	adds	r2, #1
 80104f4:	e7ef      	b.n	80104d6 <__ieee754_sqrt+0x13a>
 80104f6:	4680      	mov	r8, r0
 80104f8:	e7bd      	b.n	8010476 <__ieee754_sqrt+0xda>
 80104fa:	bf00      	nop
 80104fc:	7ff00000 	.word	0x7ff00000

08010500 <with_errno>:
 8010500:	b570      	push	{r4, r5, r6, lr}
 8010502:	4604      	mov	r4, r0
 8010504:	460d      	mov	r5, r1
 8010506:	4616      	mov	r6, r2
 8010508:	f000 f8d0 	bl	80106ac <__errno>
 801050c:	4629      	mov	r1, r5
 801050e:	6006      	str	r6, [r0, #0]
 8010510:	4620      	mov	r0, r4
 8010512:	bd70      	pop	{r4, r5, r6, pc}

08010514 <xflow>:
 8010514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010516:	4614      	mov	r4, r2
 8010518:	461d      	mov	r5, r3
 801051a:	b108      	cbz	r0, 8010520 <xflow+0xc>
 801051c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010520:	e9cd 2300 	strd	r2, r3, [sp]
 8010524:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010528:	4620      	mov	r0, r4
 801052a:	4629      	mov	r1, r5
 801052c:	f7f0 f874 	bl	8000618 <__aeabi_dmul>
 8010530:	2222      	movs	r2, #34	; 0x22
 8010532:	b003      	add	sp, #12
 8010534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010538:	f7ff bfe2 	b.w	8010500 <with_errno>

0801053c <__math_uflow>:
 801053c:	b508      	push	{r3, lr}
 801053e:	2200      	movs	r2, #0
 8010540:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010544:	f7ff ffe6 	bl	8010514 <xflow>
 8010548:	ec41 0b10 	vmov	d0, r0, r1
 801054c:	bd08      	pop	{r3, pc}

0801054e <__math_oflow>:
 801054e:	b508      	push	{r3, lr}
 8010550:	2200      	movs	r2, #0
 8010552:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010556:	f7ff ffdd 	bl	8010514 <xflow>
 801055a:	ec41 0b10 	vmov	d0, r0, r1
 801055e:	bd08      	pop	{r3, pc}

08010560 <fabs>:
 8010560:	ec51 0b10 	vmov	r0, r1, d0
 8010564:	ee10 2a10 	vmov	r2, s0
 8010568:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801056c:	ec43 2b10 	vmov	d0, r2, r3
 8010570:	4770      	bx	lr

08010572 <finite>:
 8010572:	b082      	sub	sp, #8
 8010574:	ed8d 0b00 	vstr	d0, [sp]
 8010578:	9801      	ldr	r0, [sp, #4]
 801057a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801057e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010582:	0fc0      	lsrs	r0, r0, #31
 8010584:	b002      	add	sp, #8
 8010586:	4770      	bx	lr

08010588 <scalbn>:
 8010588:	b570      	push	{r4, r5, r6, lr}
 801058a:	ec55 4b10 	vmov	r4, r5, d0
 801058e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010592:	4606      	mov	r6, r0
 8010594:	462b      	mov	r3, r5
 8010596:	b99a      	cbnz	r2, 80105c0 <scalbn+0x38>
 8010598:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801059c:	4323      	orrs	r3, r4
 801059e:	d036      	beq.n	801060e <scalbn+0x86>
 80105a0:	4b39      	ldr	r3, [pc, #228]	; (8010688 <scalbn+0x100>)
 80105a2:	4629      	mov	r1, r5
 80105a4:	ee10 0a10 	vmov	r0, s0
 80105a8:	2200      	movs	r2, #0
 80105aa:	f7f0 f835 	bl	8000618 <__aeabi_dmul>
 80105ae:	4b37      	ldr	r3, [pc, #220]	; (801068c <scalbn+0x104>)
 80105b0:	429e      	cmp	r6, r3
 80105b2:	4604      	mov	r4, r0
 80105b4:	460d      	mov	r5, r1
 80105b6:	da10      	bge.n	80105da <scalbn+0x52>
 80105b8:	a32b      	add	r3, pc, #172	; (adr r3, 8010668 <scalbn+0xe0>)
 80105ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105be:	e03a      	b.n	8010636 <scalbn+0xae>
 80105c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80105c4:	428a      	cmp	r2, r1
 80105c6:	d10c      	bne.n	80105e2 <scalbn+0x5a>
 80105c8:	ee10 2a10 	vmov	r2, s0
 80105cc:	4620      	mov	r0, r4
 80105ce:	4629      	mov	r1, r5
 80105d0:	f7ef fe6c 	bl	80002ac <__adddf3>
 80105d4:	4604      	mov	r4, r0
 80105d6:	460d      	mov	r5, r1
 80105d8:	e019      	b.n	801060e <scalbn+0x86>
 80105da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80105de:	460b      	mov	r3, r1
 80105e0:	3a36      	subs	r2, #54	; 0x36
 80105e2:	4432      	add	r2, r6
 80105e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80105e8:	428a      	cmp	r2, r1
 80105ea:	dd08      	ble.n	80105fe <scalbn+0x76>
 80105ec:	2d00      	cmp	r5, #0
 80105ee:	a120      	add	r1, pc, #128	; (adr r1, 8010670 <scalbn+0xe8>)
 80105f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105f4:	da1c      	bge.n	8010630 <scalbn+0xa8>
 80105f6:	a120      	add	r1, pc, #128	; (adr r1, 8010678 <scalbn+0xf0>)
 80105f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105fc:	e018      	b.n	8010630 <scalbn+0xa8>
 80105fe:	2a00      	cmp	r2, #0
 8010600:	dd08      	ble.n	8010614 <scalbn+0x8c>
 8010602:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010606:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801060a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801060e:	ec45 4b10 	vmov	d0, r4, r5
 8010612:	bd70      	pop	{r4, r5, r6, pc}
 8010614:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010618:	da19      	bge.n	801064e <scalbn+0xc6>
 801061a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801061e:	429e      	cmp	r6, r3
 8010620:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010624:	dd0a      	ble.n	801063c <scalbn+0xb4>
 8010626:	a112      	add	r1, pc, #72	; (adr r1, 8010670 <scalbn+0xe8>)
 8010628:	e9d1 0100 	ldrd	r0, r1, [r1]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d1e2      	bne.n	80105f6 <scalbn+0x6e>
 8010630:	a30f      	add	r3, pc, #60	; (adr r3, 8010670 <scalbn+0xe8>)
 8010632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010636:	f7ef ffef 	bl	8000618 <__aeabi_dmul>
 801063a:	e7cb      	b.n	80105d4 <scalbn+0x4c>
 801063c:	a10a      	add	r1, pc, #40	; (adr r1, 8010668 <scalbn+0xe0>)
 801063e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d0b8      	beq.n	80105b8 <scalbn+0x30>
 8010646:	a10e      	add	r1, pc, #56	; (adr r1, 8010680 <scalbn+0xf8>)
 8010648:	e9d1 0100 	ldrd	r0, r1, [r1]
 801064c:	e7b4      	b.n	80105b8 <scalbn+0x30>
 801064e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010652:	3236      	adds	r2, #54	; 0x36
 8010654:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010658:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801065c:	4620      	mov	r0, r4
 801065e:	4b0c      	ldr	r3, [pc, #48]	; (8010690 <scalbn+0x108>)
 8010660:	2200      	movs	r2, #0
 8010662:	e7e8      	b.n	8010636 <scalbn+0xae>
 8010664:	f3af 8000 	nop.w
 8010668:	c2f8f359 	.word	0xc2f8f359
 801066c:	01a56e1f 	.word	0x01a56e1f
 8010670:	8800759c 	.word	0x8800759c
 8010674:	7e37e43c 	.word	0x7e37e43c
 8010678:	8800759c 	.word	0x8800759c
 801067c:	fe37e43c 	.word	0xfe37e43c
 8010680:	c2f8f359 	.word	0xc2f8f359
 8010684:	81a56e1f 	.word	0x81a56e1f
 8010688:	43500000 	.word	0x43500000
 801068c:	ffff3cb0 	.word	0xffff3cb0
 8010690:	3c900000 	.word	0x3c900000

08010694 <abort>:
 8010694:	b508      	push	{r3, lr}
 8010696:	2006      	movs	r0, #6
 8010698:	f000 fe68 	bl	801136c <raise>
 801069c:	2001      	movs	r0, #1
 801069e:	f7f3 f9b7 	bl	8003a10 <_exit>

080106a2 <atoi>:
 80106a2:	220a      	movs	r2, #10
 80106a4:	2100      	movs	r1, #0
 80106a6:	f000 bf35 	b.w	8011514 <strtol>
	...

080106ac <__errno>:
 80106ac:	4b01      	ldr	r3, [pc, #4]	; (80106b4 <__errno+0x8>)
 80106ae:	6818      	ldr	r0, [r3, #0]
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	2000004c 	.word	0x2000004c

080106b8 <__libc_init_array>:
 80106b8:	b570      	push	{r4, r5, r6, lr}
 80106ba:	4d0d      	ldr	r5, [pc, #52]	; (80106f0 <__libc_init_array+0x38>)
 80106bc:	4c0d      	ldr	r4, [pc, #52]	; (80106f4 <__libc_init_array+0x3c>)
 80106be:	1b64      	subs	r4, r4, r5
 80106c0:	10a4      	asrs	r4, r4, #2
 80106c2:	2600      	movs	r6, #0
 80106c4:	42a6      	cmp	r6, r4
 80106c6:	d109      	bne.n	80106dc <__libc_init_array+0x24>
 80106c8:	4d0b      	ldr	r5, [pc, #44]	; (80106f8 <__libc_init_array+0x40>)
 80106ca:	4c0c      	ldr	r4, [pc, #48]	; (80106fc <__libc_init_array+0x44>)
 80106cc:	f003 f834 	bl	8013738 <_init>
 80106d0:	1b64      	subs	r4, r4, r5
 80106d2:	10a4      	asrs	r4, r4, #2
 80106d4:	2600      	movs	r6, #0
 80106d6:	42a6      	cmp	r6, r4
 80106d8:	d105      	bne.n	80106e6 <__libc_init_array+0x2e>
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80106e0:	4798      	blx	r3
 80106e2:	3601      	adds	r6, #1
 80106e4:	e7ee      	b.n	80106c4 <__libc_init_array+0xc>
 80106e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80106ea:	4798      	blx	r3
 80106ec:	3601      	adds	r6, #1
 80106ee:	e7f2      	b.n	80106d6 <__libc_init_array+0x1e>
 80106f0:	08014434 	.word	0x08014434
 80106f4:	08014434 	.word	0x08014434
 80106f8:	08014434 	.word	0x08014434
 80106fc:	08014440 	.word	0x08014440

08010700 <malloc>:
 8010700:	4b02      	ldr	r3, [pc, #8]	; (801070c <malloc+0xc>)
 8010702:	4601      	mov	r1, r0
 8010704:	6818      	ldr	r0, [r3, #0]
 8010706:	f000 b88d 	b.w	8010824 <_malloc_r>
 801070a:	bf00      	nop
 801070c:	2000004c 	.word	0x2000004c

08010710 <free>:
 8010710:	4b02      	ldr	r3, [pc, #8]	; (801071c <free+0xc>)
 8010712:	4601      	mov	r1, r0
 8010714:	6818      	ldr	r0, [r3, #0]
 8010716:	f000 b819 	b.w	801074c <_free_r>
 801071a:	bf00      	nop
 801071c:	2000004c 	.word	0x2000004c

08010720 <memcpy>:
 8010720:	440a      	add	r2, r1
 8010722:	4291      	cmp	r1, r2
 8010724:	f100 33ff 	add.w	r3, r0, #4294967295
 8010728:	d100      	bne.n	801072c <memcpy+0xc>
 801072a:	4770      	bx	lr
 801072c:	b510      	push	{r4, lr}
 801072e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010736:	4291      	cmp	r1, r2
 8010738:	d1f9      	bne.n	801072e <memcpy+0xe>
 801073a:	bd10      	pop	{r4, pc}

0801073c <memset>:
 801073c:	4402      	add	r2, r0
 801073e:	4603      	mov	r3, r0
 8010740:	4293      	cmp	r3, r2
 8010742:	d100      	bne.n	8010746 <memset+0xa>
 8010744:	4770      	bx	lr
 8010746:	f803 1b01 	strb.w	r1, [r3], #1
 801074a:	e7f9      	b.n	8010740 <memset+0x4>

0801074c <_free_r>:
 801074c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801074e:	2900      	cmp	r1, #0
 8010750:	d044      	beq.n	80107dc <_free_r+0x90>
 8010752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010756:	9001      	str	r0, [sp, #4]
 8010758:	2b00      	cmp	r3, #0
 801075a:	f1a1 0404 	sub.w	r4, r1, #4
 801075e:	bfb8      	it	lt
 8010760:	18e4      	addlt	r4, r4, r3
 8010762:	f002 f83f 	bl	80127e4 <__malloc_lock>
 8010766:	4a1e      	ldr	r2, [pc, #120]	; (80107e0 <_free_r+0x94>)
 8010768:	9801      	ldr	r0, [sp, #4]
 801076a:	6813      	ldr	r3, [r2, #0]
 801076c:	b933      	cbnz	r3, 801077c <_free_r+0x30>
 801076e:	6063      	str	r3, [r4, #4]
 8010770:	6014      	str	r4, [r2, #0]
 8010772:	b003      	add	sp, #12
 8010774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010778:	f002 b83a 	b.w	80127f0 <__malloc_unlock>
 801077c:	42a3      	cmp	r3, r4
 801077e:	d908      	bls.n	8010792 <_free_r+0x46>
 8010780:	6825      	ldr	r5, [r4, #0]
 8010782:	1961      	adds	r1, r4, r5
 8010784:	428b      	cmp	r3, r1
 8010786:	bf01      	itttt	eq
 8010788:	6819      	ldreq	r1, [r3, #0]
 801078a:	685b      	ldreq	r3, [r3, #4]
 801078c:	1949      	addeq	r1, r1, r5
 801078e:	6021      	streq	r1, [r4, #0]
 8010790:	e7ed      	b.n	801076e <_free_r+0x22>
 8010792:	461a      	mov	r2, r3
 8010794:	685b      	ldr	r3, [r3, #4]
 8010796:	b10b      	cbz	r3, 801079c <_free_r+0x50>
 8010798:	42a3      	cmp	r3, r4
 801079a:	d9fa      	bls.n	8010792 <_free_r+0x46>
 801079c:	6811      	ldr	r1, [r2, #0]
 801079e:	1855      	adds	r5, r2, r1
 80107a0:	42a5      	cmp	r5, r4
 80107a2:	d10b      	bne.n	80107bc <_free_r+0x70>
 80107a4:	6824      	ldr	r4, [r4, #0]
 80107a6:	4421      	add	r1, r4
 80107a8:	1854      	adds	r4, r2, r1
 80107aa:	42a3      	cmp	r3, r4
 80107ac:	6011      	str	r1, [r2, #0]
 80107ae:	d1e0      	bne.n	8010772 <_free_r+0x26>
 80107b0:	681c      	ldr	r4, [r3, #0]
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	6053      	str	r3, [r2, #4]
 80107b6:	4421      	add	r1, r4
 80107b8:	6011      	str	r1, [r2, #0]
 80107ba:	e7da      	b.n	8010772 <_free_r+0x26>
 80107bc:	d902      	bls.n	80107c4 <_free_r+0x78>
 80107be:	230c      	movs	r3, #12
 80107c0:	6003      	str	r3, [r0, #0]
 80107c2:	e7d6      	b.n	8010772 <_free_r+0x26>
 80107c4:	6825      	ldr	r5, [r4, #0]
 80107c6:	1961      	adds	r1, r4, r5
 80107c8:	428b      	cmp	r3, r1
 80107ca:	bf04      	itt	eq
 80107cc:	6819      	ldreq	r1, [r3, #0]
 80107ce:	685b      	ldreq	r3, [r3, #4]
 80107d0:	6063      	str	r3, [r4, #4]
 80107d2:	bf04      	itt	eq
 80107d4:	1949      	addeq	r1, r1, r5
 80107d6:	6021      	streq	r1, [r4, #0]
 80107d8:	6054      	str	r4, [r2, #4]
 80107da:	e7ca      	b.n	8010772 <_free_r+0x26>
 80107dc:	b003      	add	sp, #12
 80107de:	bd30      	pop	{r4, r5, pc}
 80107e0:	20003504 	.word	0x20003504

080107e4 <sbrk_aligned>:
 80107e4:	b570      	push	{r4, r5, r6, lr}
 80107e6:	4e0e      	ldr	r6, [pc, #56]	; (8010820 <sbrk_aligned+0x3c>)
 80107e8:	460c      	mov	r4, r1
 80107ea:	6831      	ldr	r1, [r6, #0]
 80107ec:	4605      	mov	r5, r0
 80107ee:	b911      	cbnz	r1, 80107f6 <sbrk_aligned+0x12>
 80107f0:	f000 fd84 	bl	80112fc <_sbrk_r>
 80107f4:	6030      	str	r0, [r6, #0]
 80107f6:	4621      	mov	r1, r4
 80107f8:	4628      	mov	r0, r5
 80107fa:	f000 fd7f 	bl	80112fc <_sbrk_r>
 80107fe:	1c43      	adds	r3, r0, #1
 8010800:	d00a      	beq.n	8010818 <sbrk_aligned+0x34>
 8010802:	1cc4      	adds	r4, r0, #3
 8010804:	f024 0403 	bic.w	r4, r4, #3
 8010808:	42a0      	cmp	r0, r4
 801080a:	d007      	beq.n	801081c <sbrk_aligned+0x38>
 801080c:	1a21      	subs	r1, r4, r0
 801080e:	4628      	mov	r0, r5
 8010810:	f000 fd74 	bl	80112fc <_sbrk_r>
 8010814:	3001      	adds	r0, #1
 8010816:	d101      	bne.n	801081c <sbrk_aligned+0x38>
 8010818:	f04f 34ff 	mov.w	r4, #4294967295
 801081c:	4620      	mov	r0, r4
 801081e:	bd70      	pop	{r4, r5, r6, pc}
 8010820:	20003508 	.word	0x20003508

08010824 <_malloc_r>:
 8010824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010828:	1ccd      	adds	r5, r1, #3
 801082a:	f025 0503 	bic.w	r5, r5, #3
 801082e:	3508      	adds	r5, #8
 8010830:	2d0c      	cmp	r5, #12
 8010832:	bf38      	it	cc
 8010834:	250c      	movcc	r5, #12
 8010836:	2d00      	cmp	r5, #0
 8010838:	4607      	mov	r7, r0
 801083a:	db01      	blt.n	8010840 <_malloc_r+0x1c>
 801083c:	42a9      	cmp	r1, r5
 801083e:	d905      	bls.n	801084c <_malloc_r+0x28>
 8010840:	230c      	movs	r3, #12
 8010842:	603b      	str	r3, [r7, #0]
 8010844:	2600      	movs	r6, #0
 8010846:	4630      	mov	r0, r6
 8010848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801084c:	4e2e      	ldr	r6, [pc, #184]	; (8010908 <_malloc_r+0xe4>)
 801084e:	f001 ffc9 	bl	80127e4 <__malloc_lock>
 8010852:	6833      	ldr	r3, [r6, #0]
 8010854:	461c      	mov	r4, r3
 8010856:	bb34      	cbnz	r4, 80108a6 <_malloc_r+0x82>
 8010858:	4629      	mov	r1, r5
 801085a:	4638      	mov	r0, r7
 801085c:	f7ff ffc2 	bl	80107e4 <sbrk_aligned>
 8010860:	1c43      	adds	r3, r0, #1
 8010862:	4604      	mov	r4, r0
 8010864:	d14d      	bne.n	8010902 <_malloc_r+0xde>
 8010866:	6834      	ldr	r4, [r6, #0]
 8010868:	4626      	mov	r6, r4
 801086a:	2e00      	cmp	r6, #0
 801086c:	d140      	bne.n	80108f0 <_malloc_r+0xcc>
 801086e:	6823      	ldr	r3, [r4, #0]
 8010870:	4631      	mov	r1, r6
 8010872:	4638      	mov	r0, r7
 8010874:	eb04 0803 	add.w	r8, r4, r3
 8010878:	f000 fd40 	bl	80112fc <_sbrk_r>
 801087c:	4580      	cmp	r8, r0
 801087e:	d13a      	bne.n	80108f6 <_malloc_r+0xd2>
 8010880:	6821      	ldr	r1, [r4, #0]
 8010882:	3503      	adds	r5, #3
 8010884:	1a6d      	subs	r5, r5, r1
 8010886:	f025 0503 	bic.w	r5, r5, #3
 801088a:	3508      	adds	r5, #8
 801088c:	2d0c      	cmp	r5, #12
 801088e:	bf38      	it	cc
 8010890:	250c      	movcc	r5, #12
 8010892:	4629      	mov	r1, r5
 8010894:	4638      	mov	r0, r7
 8010896:	f7ff ffa5 	bl	80107e4 <sbrk_aligned>
 801089a:	3001      	adds	r0, #1
 801089c:	d02b      	beq.n	80108f6 <_malloc_r+0xd2>
 801089e:	6823      	ldr	r3, [r4, #0]
 80108a0:	442b      	add	r3, r5
 80108a2:	6023      	str	r3, [r4, #0]
 80108a4:	e00e      	b.n	80108c4 <_malloc_r+0xa0>
 80108a6:	6822      	ldr	r2, [r4, #0]
 80108a8:	1b52      	subs	r2, r2, r5
 80108aa:	d41e      	bmi.n	80108ea <_malloc_r+0xc6>
 80108ac:	2a0b      	cmp	r2, #11
 80108ae:	d916      	bls.n	80108de <_malloc_r+0xba>
 80108b0:	1961      	adds	r1, r4, r5
 80108b2:	42a3      	cmp	r3, r4
 80108b4:	6025      	str	r5, [r4, #0]
 80108b6:	bf18      	it	ne
 80108b8:	6059      	strne	r1, [r3, #4]
 80108ba:	6863      	ldr	r3, [r4, #4]
 80108bc:	bf08      	it	eq
 80108be:	6031      	streq	r1, [r6, #0]
 80108c0:	5162      	str	r2, [r4, r5]
 80108c2:	604b      	str	r3, [r1, #4]
 80108c4:	4638      	mov	r0, r7
 80108c6:	f104 060b 	add.w	r6, r4, #11
 80108ca:	f001 ff91 	bl	80127f0 <__malloc_unlock>
 80108ce:	f026 0607 	bic.w	r6, r6, #7
 80108d2:	1d23      	adds	r3, r4, #4
 80108d4:	1af2      	subs	r2, r6, r3
 80108d6:	d0b6      	beq.n	8010846 <_malloc_r+0x22>
 80108d8:	1b9b      	subs	r3, r3, r6
 80108da:	50a3      	str	r3, [r4, r2]
 80108dc:	e7b3      	b.n	8010846 <_malloc_r+0x22>
 80108de:	6862      	ldr	r2, [r4, #4]
 80108e0:	42a3      	cmp	r3, r4
 80108e2:	bf0c      	ite	eq
 80108e4:	6032      	streq	r2, [r6, #0]
 80108e6:	605a      	strne	r2, [r3, #4]
 80108e8:	e7ec      	b.n	80108c4 <_malloc_r+0xa0>
 80108ea:	4623      	mov	r3, r4
 80108ec:	6864      	ldr	r4, [r4, #4]
 80108ee:	e7b2      	b.n	8010856 <_malloc_r+0x32>
 80108f0:	4634      	mov	r4, r6
 80108f2:	6876      	ldr	r6, [r6, #4]
 80108f4:	e7b9      	b.n	801086a <_malloc_r+0x46>
 80108f6:	230c      	movs	r3, #12
 80108f8:	603b      	str	r3, [r7, #0]
 80108fa:	4638      	mov	r0, r7
 80108fc:	f001 ff78 	bl	80127f0 <__malloc_unlock>
 8010900:	e7a1      	b.n	8010846 <_malloc_r+0x22>
 8010902:	6025      	str	r5, [r4, #0]
 8010904:	e7de      	b.n	80108c4 <_malloc_r+0xa0>
 8010906:	bf00      	nop
 8010908:	20003504 	.word	0x20003504

0801090c <__cvt>:
 801090c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010910:	ec55 4b10 	vmov	r4, r5, d0
 8010914:	2d00      	cmp	r5, #0
 8010916:	460e      	mov	r6, r1
 8010918:	4619      	mov	r1, r3
 801091a:	462b      	mov	r3, r5
 801091c:	bfbb      	ittet	lt
 801091e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010922:	461d      	movlt	r5, r3
 8010924:	2300      	movge	r3, #0
 8010926:	232d      	movlt	r3, #45	; 0x2d
 8010928:	700b      	strb	r3, [r1, #0]
 801092a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801092c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010930:	4691      	mov	r9, r2
 8010932:	f023 0820 	bic.w	r8, r3, #32
 8010936:	bfbc      	itt	lt
 8010938:	4622      	movlt	r2, r4
 801093a:	4614      	movlt	r4, r2
 801093c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010940:	d005      	beq.n	801094e <__cvt+0x42>
 8010942:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010946:	d100      	bne.n	801094a <__cvt+0x3e>
 8010948:	3601      	adds	r6, #1
 801094a:	2102      	movs	r1, #2
 801094c:	e000      	b.n	8010950 <__cvt+0x44>
 801094e:	2103      	movs	r1, #3
 8010950:	ab03      	add	r3, sp, #12
 8010952:	9301      	str	r3, [sp, #4]
 8010954:	ab02      	add	r3, sp, #8
 8010956:	9300      	str	r3, [sp, #0]
 8010958:	ec45 4b10 	vmov	d0, r4, r5
 801095c:	4653      	mov	r3, sl
 801095e:	4632      	mov	r2, r6
 8010960:	f000 ff2e 	bl	80117c0 <_dtoa_r>
 8010964:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010968:	4607      	mov	r7, r0
 801096a:	d102      	bne.n	8010972 <__cvt+0x66>
 801096c:	f019 0f01 	tst.w	r9, #1
 8010970:	d022      	beq.n	80109b8 <__cvt+0xac>
 8010972:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010976:	eb07 0906 	add.w	r9, r7, r6
 801097a:	d110      	bne.n	801099e <__cvt+0x92>
 801097c:	783b      	ldrb	r3, [r7, #0]
 801097e:	2b30      	cmp	r3, #48	; 0x30
 8010980:	d10a      	bne.n	8010998 <__cvt+0x8c>
 8010982:	2200      	movs	r2, #0
 8010984:	2300      	movs	r3, #0
 8010986:	4620      	mov	r0, r4
 8010988:	4629      	mov	r1, r5
 801098a:	f7f0 f8ad 	bl	8000ae8 <__aeabi_dcmpeq>
 801098e:	b918      	cbnz	r0, 8010998 <__cvt+0x8c>
 8010990:	f1c6 0601 	rsb	r6, r6, #1
 8010994:	f8ca 6000 	str.w	r6, [sl]
 8010998:	f8da 3000 	ldr.w	r3, [sl]
 801099c:	4499      	add	r9, r3
 801099e:	2200      	movs	r2, #0
 80109a0:	2300      	movs	r3, #0
 80109a2:	4620      	mov	r0, r4
 80109a4:	4629      	mov	r1, r5
 80109a6:	f7f0 f89f 	bl	8000ae8 <__aeabi_dcmpeq>
 80109aa:	b108      	cbz	r0, 80109b0 <__cvt+0xa4>
 80109ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80109b0:	2230      	movs	r2, #48	; 0x30
 80109b2:	9b03      	ldr	r3, [sp, #12]
 80109b4:	454b      	cmp	r3, r9
 80109b6:	d307      	bcc.n	80109c8 <__cvt+0xbc>
 80109b8:	9b03      	ldr	r3, [sp, #12]
 80109ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80109bc:	1bdb      	subs	r3, r3, r7
 80109be:	4638      	mov	r0, r7
 80109c0:	6013      	str	r3, [r2, #0]
 80109c2:	b004      	add	sp, #16
 80109c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109c8:	1c59      	adds	r1, r3, #1
 80109ca:	9103      	str	r1, [sp, #12]
 80109cc:	701a      	strb	r2, [r3, #0]
 80109ce:	e7f0      	b.n	80109b2 <__cvt+0xa6>

080109d0 <__exponent>:
 80109d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109d2:	4603      	mov	r3, r0
 80109d4:	2900      	cmp	r1, #0
 80109d6:	bfb8      	it	lt
 80109d8:	4249      	neglt	r1, r1
 80109da:	f803 2b02 	strb.w	r2, [r3], #2
 80109de:	bfb4      	ite	lt
 80109e0:	222d      	movlt	r2, #45	; 0x2d
 80109e2:	222b      	movge	r2, #43	; 0x2b
 80109e4:	2909      	cmp	r1, #9
 80109e6:	7042      	strb	r2, [r0, #1]
 80109e8:	dd2a      	ble.n	8010a40 <__exponent+0x70>
 80109ea:	f10d 0407 	add.w	r4, sp, #7
 80109ee:	46a4      	mov	ip, r4
 80109f0:	270a      	movs	r7, #10
 80109f2:	46a6      	mov	lr, r4
 80109f4:	460a      	mov	r2, r1
 80109f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80109fa:	fb07 1516 	mls	r5, r7, r6, r1
 80109fe:	3530      	adds	r5, #48	; 0x30
 8010a00:	2a63      	cmp	r2, #99	; 0x63
 8010a02:	f104 34ff 	add.w	r4, r4, #4294967295
 8010a06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010a0a:	4631      	mov	r1, r6
 8010a0c:	dcf1      	bgt.n	80109f2 <__exponent+0x22>
 8010a0e:	3130      	adds	r1, #48	; 0x30
 8010a10:	f1ae 0502 	sub.w	r5, lr, #2
 8010a14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010a18:	1c44      	adds	r4, r0, #1
 8010a1a:	4629      	mov	r1, r5
 8010a1c:	4561      	cmp	r1, ip
 8010a1e:	d30a      	bcc.n	8010a36 <__exponent+0x66>
 8010a20:	f10d 0209 	add.w	r2, sp, #9
 8010a24:	eba2 020e 	sub.w	r2, r2, lr
 8010a28:	4565      	cmp	r5, ip
 8010a2a:	bf88      	it	hi
 8010a2c:	2200      	movhi	r2, #0
 8010a2e:	4413      	add	r3, r2
 8010a30:	1a18      	subs	r0, r3, r0
 8010a32:	b003      	add	sp, #12
 8010a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010a3e:	e7ed      	b.n	8010a1c <__exponent+0x4c>
 8010a40:	2330      	movs	r3, #48	; 0x30
 8010a42:	3130      	adds	r1, #48	; 0x30
 8010a44:	7083      	strb	r3, [r0, #2]
 8010a46:	70c1      	strb	r1, [r0, #3]
 8010a48:	1d03      	adds	r3, r0, #4
 8010a4a:	e7f1      	b.n	8010a30 <__exponent+0x60>

08010a4c <_printf_float>:
 8010a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a50:	ed2d 8b02 	vpush	{d8}
 8010a54:	b08d      	sub	sp, #52	; 0x34
 8010a56:	460c      	mov	r4, r1
 8010a58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010a5c:	4616      	mov	r6, r2
 8010a5e:	461f      	mov	r7, r3
 8010a60:	4605      	mov	r5, r0
 8010a62:	f001 fe53 	bl	801270c <_localeconv_r>
 8010a66:	f8d0 a000 	ldr.w	sl, [r0]
 8010a6a:	4650      	mov	r0, sl
 8010a6c:	f7ef fbba 	bl	80001e4 <strlen>
 8010a70:	2300      	movs	r3, #0
 8010a72:	930a      	str	r3, [sp, #40]	; 0x28
 8010a74:	6823      	ldr	r3, [r4, #0]
 8010a76:	9305      	str	r3, [sp, #20]
 8010a78:	f8d8 3000 	ldr.w	r3, [r8]
 8010a7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010a80:	3307      	adds	r3, #7
 8010a82:	f023 0307 	bic.w	r3, r3, #7
 8010a86:	f103 0208 	add.w	r2, r3, #8
 8010a8a:	f8c8 2000 	str.w	r2, [r8]
 8010a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010a96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010a9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010a9e:	9307      	str	r3, [sp, #28]
 8010aa0:	f8cd 8018 	str.w	r8, [sp, #24]
 8010aa4:	ee08 0a10 	vmov	s16, r0
 8010aa8:	4b9f      	ldr	r3, [pc, #636]	; (8010d28 <_printf_float+0x2dc>)
 8010aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010aae:	f04f 32ff 	mov.w	r2, #4294967295
 8010ab2:	f7f0 f84b 	bl	8000b4c <__aeabi_dcmpun>
 8010ab6:	bb88      	cbnz	r0, 8010b1c <_printf_float+0xd0>
 8010ab8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010abc:	4b9a      	ldr	r3, [pc, #616]	; (8010d28 <_printf_float+0x2dc>)
 8010abe:	f04f 32ff 	mov.w	r2, #4294967295
 8010ac2:	f7f0 f825 	bl	8000b10 <__aeabi_dcmple>
 8010ac6:	bb48      	cbnz	r0, 8010b1c <_printf_float+0xd0>
 8010ac8:	2200      	movs	r2, #0
 8010aca:	2300      	movs	r3, #0
 8010acc:	4640      	mov	r0, r8
 8010ace:	4649      	mov	r1, r9
 8010ad0:	f7f0 f814 	bl	8000afc <__aeabi_dcmplt>
 8010ad4:	b110      	cbz	r0, 8010adc <_printf_float+0x90>
 8010ad6:	232d      	movs	r3, #45	; 0x2d
 8010ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010adc:	4b93      	ldr	r3, [pc, #588]	; (8010d2c <_printf_float+0x2e0>)
 8010ade:	4894      	ldr	r0, [pc, #592]	; (8010d30 <_printf_float+0x2e4>)
 8010ae0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010ae4:	bf94      	ite	ls
 8010ae6:	4698      	movls	r8, r3
 8010ae8:	4680      	movhi	r8, r0
 8010aea:	2303      	movs	r3, #3
 8010aec:	6123      	str	r3, [r4, #16]
 8010aee:	9b05      	ldr	r3, [sp, #20]
 8010af0:	f023 0204 	bic.w	r2, r3, #4
 8010af4:	6022      	str	r2, [r4, #0]
 8010af6:	f04f 0900 	mov.w	r9, #0
 8010afa:	9700      	str	r7, [sp, #0]
 8010afc:	4633      	mov	r3, r6
 8010afe:	aa0b      	add	r2, sp, #44	; 0x2c
 8010b00:	4621      	mov	r1, r4
 8010b02:	4628      	mov	r0, r5
 8010b04:	f000 f9d8 	bl	8010eb8 <_printf_common>
 8010b08:	3001      	adds	r0, #1
 8010b0a:	f040 8090 	bne.w	8010c2e <_printf_float+0x1e2>
 8010b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010b12:	b00d      	add	sp, #52	; 0x34
 8010b14:	ecbd 8b02 	vpop	{d8}
 8010b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b1c:	4642      	mov	r2, r8
 8010b1e:	464b      	mov	r3, r9
 8010b20:	4640      	mov	r0, r8
 8010b22:	4649      	mov	r1, r9
 8010b24:	f7f0 f812 	bl	8000b4c <__aeabi_dcmpun>
 8010b28:	b140      	cbz	r0, 8010b3c <_printf_float+0xf0>
 8010b2a:	464b      	mov	r3, r9
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	bfbc      	itt	lt
 8010b30:	232d      	movlt	r3, #45	; 0x2d
 8010b32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010b36:	487f      	ldr	r0, [pc, #508]	; (8010d34 <_printf_float+0x2e8>)
 8010b38:	4b7f      	ldr	r3, [pc, #508]	; (8010d38 <_printf_float+0x2ec>)
 8010b3a:	e7d1      	b.n	8010ae0 <_printf_float+0x94>
 8010b3c:	6863      	ldr	r3, [r4, #4]
 8010b3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010b42:	9206      	str	r2, [sp, #24]
 8010b44:	1c5a      	adds	r2, r3, #1
 8010b46:	d13f      	bne.n	8010bc8 <_printf_float+0x17c>
 8010b48:	2306      	movs	r3, #6
 8010b4a:	6063      	str	r3, [r4, #4]
 8010b4c:	9b05      	ldr	r3, [sp, #20]
 8010b4e:	6861      	ldr	r1, [r4, #4]
 8010b50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010b54:	2300      	movs	r3, #0
 8010b56:	9303      	str	r3, [sp, #12]
 8010b58:	ab0a      	add	r3, sp, #40	; 0x28
 8010b5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010b5e:	ab09      	add	r3, sp, #36	; 0x24
 8010b60:	ec49 8b10 	vmov	d0, r8, r9
 8010b64:	9300      	str	r3, [sp, #0]
 8010b66:	6022      	str	r2, [r4, #0]
 8010b68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	f7ff fecd 	bl	801090c <__cvt>
 8010b72:	9b06      	ldr	r3, [sp, #24]
 8010b74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b76:	2b47      	cmp	r3, #71	; 0x47
 8010b78:	4680      	mov	r8, r0
 8010b7a:	d108      	bne.n	8010b8e <_printf_float+0x142>
 8010b7c:	1cc8      	adds	r0, r1, #3
 8010b7e:	db02      	blt.n	8010b86 <_printf_float+0x13a>
 8010b80:	6863      	ldr	r3, [r4, #4]
 8010b82:	4299      	cmp	r1, r3
 8010b84:	dd41      	ble.n	8010c0a <_printf_float+0x1be>
 8010b86:	f1ab 0b02 	sub.w	fp, fp, #2
 8010b8a:	fa5f fb8b 	uxtb.w	fp, fp
 8010b8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010b92:	d820      	bhi.n	8010bd6 <_printf_float+0x18a>
 8010b94:	3901      	subs	r1, #1
 8010b96:	465a      	mov	r2, fp
 8010b98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010b9c:	9109      	str	r1, [sp, #36]	; 0x24
 8010b9e:	f7ff ff17 	bl	80109d0 <__exponent>
 8010ba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ba4:	1813      	adds	r3, r2, r0
 8010ba6:	2a01      	cmp	r2, #1
 8010ba8:	4681      	mov	r9, r0
 8010baa:	6123      	str	r3, [r4, #16]
 8010bac:	dc02      	bgt.n	8010bb4 <_printf_float+0x168>
 8010bae:	6822      	ldr	r2, [r4, #0]
 8010bb0:	07d2      	lsls	r2, r2, #31
 8010bb2:	d501      	bpl.n	8010bb8 <_printf_float+0x16c>
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	6123      	str	r3, [r4, #16]
 8010bb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d09c      	beq.n	8010afa <_printf_float+0xae>
 8010bc0:	232d      	movs	r3, #45	; 0x2d
 8010bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bc6:	e798      	b.n	8010afa <_printf_float+0xae>
 8010bc8:	9a06      	ldr	r2, [sp, #24]
 8010bca:	2a47      	cmp	r2, #71	; 0x47
 8010bcc:	d1be      	bne.n	8010b4c <_printf_float+0x100>
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d1bc      	bne.n	8010b4c <_printf_float+0x100>
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	e7b9      	b.n	8010b4a <_printf_float+0xfe>
 8010bd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010bda:	d118      	bne.n	8010c0e <_printf_float+0x1c2>
 8010bdc:	2900      	cmp	r1, #0
 8010bde:	6863      	ldr	r3, [r4, #4]
 8010be0:	dd0b      	ble.n	8010bfa <_printf_float+0x1ae>
 8010be2:	6121      	str	r1, [r4, #16]
 8010be4:	b913      	cbnz	r3, 8010bec <_printf_float+0x1a0>
 8010be6:	6822      	ldr	r2, [r4, #0]
 8010be8:	07d0      	lsls	r0, r2, #31
 8010bea:	d502      	bpl.n	8010bf2 <_printf_float+0x1a6>
 8010bec:	3301      	adds	r3, #1
 8010bee:	440b      	add	r3, r1
 8010bf0:	6123      	str	r3, [r4, #16]
 8010bf2:	65a1      	str	r1, [r4, #88]	; 0x58
 8010bf4:	f04f 0900 	mov.w	r9, #0
 8010bf8:	e7de      	b.n	8010bb8 <_printf_float+0x16c>
 8010bfa:	b913      	cbnz	r3, 8010c02 <_printf_float+0x1b6>
 8010bfc:	6822      	ldr	r2, [r4, #0]
 8010bfe:	07d2      	lsls	r2, r2, #31
 8010c00:	d501      	bpl.n	8010c06 <_printf_float+0x1ba>
 8010c02:	3302      	adds	r3, #2
 8010c04:	e7f4      	b.n	8010bf0 <_printf_float+0x1a4>
 8010c06:	2301      	movs	r3, #1
 8010c08:	e7f2      	b.n	8010bf0 <_printf_float+0x1a4>
 8010c0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c10:	4299      	cmp	r1, r3
 8010c12:	db05      	blt.n	8010c20 <_printf_float+0x1d4>
 8010c14:	6823      	ldr	r3, [r4, #0]
 8010c16:	6121      	str	r1, [r4, #16]
 8010c18:	07d8      	lsls	r0, r3, #31
 8010c1a:	d5ea      	bpl.n	8010bf2 <_printf_float+0x1a6>
 8010c1c:	1c4b      	adds	r3, r1, #1
 8010c1e:	e7e7      	b.n	8010bf0 <_printf_float+0x1a4>
 8010c20:	2900      	cmp	r1, #0
 8010c22:	bfd4      	ite	le
 8010c24:	f1c1 0202 	rsble	r2, r1, #2
 8010c28:	2201      	movgt	r2, #1
 8010c2a:	4413      	add	r3, r2
 8010c2c:	e7e0      	b.n	8010bf0 <_printf_float+0x1a4>
 8010c2e:	6823      	ldr	r3, [r4, #0]
 8010c30:	055a      	lsls	r2, r3, #21
 8010c32:	d407      	bmi.n	8010c44 <_printf_float+0x1f8>
 8010c34:	6923      	ldr	r3, [r4, #16]
 8010c36:	4642      	mov	r2, r8
 8010c38:	4631      	mov	r1, r6
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	47b8      	blx	r7
 8010c3e:	3001      	adds	r0, #1
 8010c40:	d12c      	bne.n	8010c9c <_printf_float+0x250>
 8010c42:	e764      	b.n	8010b0e <_printf_float+0xc2>
 8010c44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010c48:	f240 80e0 	bls.w	8010e0c <_printf_float+0x3c0>
 8010c4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010c50:	2200      	movs	r2, #0
 8010c52:	2300      	movs	r3, #0
 8010c54:	f7ef ff48 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c58:	2800      	cmp	r0, #0
 8010c5a:	d034      	beq.n	8010cc6 <_printf_float+0x27a>
 8010c5c:	4a37      	ldr	r2, [pc, #220]	; (8010d3c <_printf_float+0x2f0>)
 8010c5e:	2301      	movs	r3, #1
 8010c60:	4631      	mov	r1, r6
 8010c62:	4628      	mov	r0, r5
 8010c64:	47b8      	blx	r7
 8010c66:	3001      	adds	r0, #1
 8010c68:	f43f af51 	beq.w	8010b0e <_printf_float+0xc2>
 8010c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c70:	429a      	cmp	r2, r3
 8010c72:	db02      	blt.n	8010c7a <_printf_float+0x22e>
 8010c74:	6823      	ldr	r3, [r4, #0]
 8010c76:	07d8      	lsls	r0, r3, #31
 8010c78:	d510      	bpl.n	8010c9c <_printf_float+0x250>
 8010c7a:	ee18 3a10 	vmov	r3, s16
 8010c7e:	4652      	mov	r2, sl
 8010c80:	4631      	mov	r1, r6
 8010c82:	4628      	mov	r0, r5
 8010c84:	47b8      	blx	r7
 8010c86:	3001      	adds	r0, #1
 8010c88:	f43f af41 	beq.w	8010b0e <_printf_float+0xc2>
 8010c8c:	f04f 0800 	mov.w	r8, #0
 8010c90:	f104 091a 	add.w	r9, r4, #26
 8010c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c96:	3b01      	subs	r3, #1
 8010c98:	4543      	cmp	r3, r8
 8010c9a:	dc09      	bgt.n	8010cb0 <_printf_float+0x264>
 8010c9c:	6823      	ldr	r3, [r4, #0]
 8010c9e:	079b      	lsls	r3, r3, #30
 8010ca0:	f100 8105 	bmi.w	8010eae <_printf_float+0x462>
 8010ca4:	68e0      	ldr	r0, [r4, #12]
 8010ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ca8:	4298      	cmp	r0, r3
 8010caa:	bfb8      	it	lt
 8010cac:	4618      	movlt	r0, r3
 8010cae:	e730      	b.n	8010b12 <_printf_float+0xc6>
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	464a      	mov	r2, r9
 8010cb4:	4631      	mov	r1, r6
 8010cb6:	4628      	mov	r0, r5
 8010cb8:	47b8      	blx	r7
 8010cba:	3001      	adds	r0, #1
 8010cbc:	f43f af27 	beq.w	8010b0e <_printf_float+0xc2>
 8010cc0:	f108 0801 	add.w	r8, r8, #1
 8010cc4:	e7e6      	b.n	8010c94 <_printf_float+0x248>
 8010cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	dc39      	bgt.n	8010d40 <_printf_float+0x2f4>
 8010ccc:	4a1b      	ldr	r2, [pc, #108]	; (8010d3c <_printf_float+0x2f0>)
 8010cce:	2301      	movs	r3, #1
 8010cd0:	4631      	mov	r1, r6
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	47b8      	blx	r7
 8010cd6:	3001      	adds	r0, #1
 8010cd8:	f43f af19 	beq.w	8010b0e <_printf_float+0xc2>
 8010cdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ce0:	4313      	orrs	r3, r2
 8010ce2:	d102      	bne.n	8010cea <_printf_float+0x29e>
 8010ce4:	6823      	ldr	r3, [r4, #0]
 8010ce6:	07d9      	lsls	r1, r3, #31
 8010ce8:	d5d8      	bpl.n	8010c9c <_printf_float+0x250>
 8010cea:	ee18 3a10 	vmov	r3, s16
 8010cee:	4652      	mov	r2, sl
 8010cf0:	4631      	mov	r1, r6
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	47b8      	blx	r7
 8010cf6:	3001      	adds	r0, #1
 8010cf8:	f43f af09 	beq.w	8010b0e <_printf_float+0xc2>
 8010cfc:	f04f 0900 	mov.w	r9, #0
 8010d00:	f104 0a1a 	add.w	sl, r4, #26
 8010d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d06:	425b      	negs	r3, r3
 8010d08:	454b      	cmp	r3, r9
 8010d0a:	dc01      	bgt.n	8010d10 <_printf_float+0x2c4>
 8010d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d0e:	e792      	b.n	8010c36 <_printf_float+0x1ea>
 8010d10:	2301      	movs	r3, #1
 8010d12:	4652      	mov	r2, sl
 8010d14:	4631      	mov	r1, r6
 8010d16:	4628      	mov	r0, r5
 8010d18:	47b8      	blx	r7
 8010d1a:	3001      	adds	r0, #1
 8010d1c:	f43f aef7 	beq.w	8010b0e <_printf_float+0xc2>
 8010d20:	f109 0901 	add.w	r9, r9, #1
 8010d24:	e7ee      	b.n	8010d04 <_printf_float+0x2b8>
 8010d26:	bf00      	nop
 8010d28:	7fefffff 	.word	0x7fefffff
 8010d2c:	08014054 	.word	0x08014054
 8010d30:	08014058 	.word	0x08014058
 8010d34:	08014060 	.word	0x08014060
 8010d38:	0801405c 	.word	0x0801405c
 8010d3c:	08014064 	.word	0x08014064
 8010d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d44:	429a      	cmp	r2, r3
 8010d46:	bfa8      	it	ge
 8010d48:	461a      	movge	r2, r3
 8010d4a:	2a00      	cmp	r2, #0
 8010d4c:	4691      	mov	r9, r2
 8010d4e:	dc37      	bgt.n	8010dc0 <_printf_float+0x374>
 8010d50:	f04f 0b00 	mov.w	fp, #0
 8010d54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d58:	f104 021a 	add.w	r2, r4, #26
 8010d5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d5e:	9305      	str	r3, [sp, #20]
 8010d60:	eba3 0309 	sub.w	r3, r3, r9
 8010d64:	455b      	cmp	r3, fp
 8010d66:	dc33      	bgt.n	8010dd0 <_printf_float+0x384>
 8010d68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	db3b      	blt.n	8010de8 <_printf_float+0x39c>
 8010d70:	6823      	ldr	r3, [r4, #0]
 8010d72:	07da      	lsls	r2, r3, #31
 8010d74:	d438      	bmi.n	8010de8 <_printf_float+0x39c>
 8010d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d78:	9a05      	ldr	r2, [sp, #20]
 8010d7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d7c:	1a9a      	subs	r2, r3, r2
 8010d7e:	eba3 0901 	sub.w	r9, r3, r1
 8010d82:	4591      	cmp	r9, r2
 8010d84:	bfa8      	it	ge
 8010d86:	4691      	movge	r9, r2
 8010d88:	f1b9 0f00 	cmp.w	r9, #0
 8010d8c:	dc35      	bgt.n	8010dfa <_printf_float+0x3ae>
 8010d8e:	f04f 0800 	mov.w	r8, #0
 8010d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d96:	f104 0a1a 	add.w	sl, r4, #26
 8010d9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d9e:	1a9b      	subs	r3, r3, r2
 8010da0:	eba3 0309 	sub.w	r3, r3, r9
 8010da4:	4543      	cmp	r3, r8
 8010da6:	f77f af79 	ble.w	8010c9c <_printf_float+0x250>
 8010daa:	2301      	movs	r3, #1
 8010dac:	4652      	mov	r2, sl
 8010dae:	4631      	mov	r1, r6
 8010db0:	4628      	mov	r0, r5
 8010db2:	47b8      	blx	r7
 8010db4:	3001      	adds	r0, #1
 8010db6:	f43f aeaa 	beq.w	8010b0e <_printf_float+0xc2>
 8010dba:	f108 0801 	add.w	r8, r8, #1
 8010dbe:	e7ec      	b.n	8010d9a <_printf_float+0x34e>
 8010dc0:	4613      	mov	r3, r2
 8010dc2:	4631      	mov	r1, r6
 8010dc4:	4642      	mov	r2, r8
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	47b8      	blx	r7
 8010dca:	3001      	adds	r0, #1
 8010dcc:	d1c0      	bne.n	8010d50 <_printf_float+0x304>
 8010dce:	e69e      	b.n	8010b0e <_printf_float+0xc2>
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	4631      	mov	r1, r6
 8010dd4:	4628      	mov	r0, r5
 8010dd6:	9205      	str	r2, [sp, #20]
 8010dd8:	47b8      	blx	r7
 8010dda:	3001      	adds	r0, #1
 8010ddc:	f43f ae97 	beq.w	8010b0e <_printf_float+0xc2>
 8010de0:	9a05      	ldr	r2, [sp, #20]
 8010de2:	f10b 0b01 	add.w	fp, fp, #1
 8010de6:	e7b9      	b.n	8010d5c <_printf_float+0x310>
 8010de8:	ee18 3a10 	vmov	r3, s16
 8010dec:	4652      	mov	r2, sl
 8010dee:	4631      	mov	r1, r6
 8010df0:	4628      	mov	r0, r5
 8010df2:	47b8      	blx	r7
 8010df4:	3001      	adds	r0, #1
 8010df6:	d1be      	bne.n	8010d76 <_printf_float+0x32a>
 8010df8:	e689      	b.n	8010b0e <_printf_float+0xc2>
 8010dfa:	9a05      	ldr	r2, [sp, #20]
 8010dfc:	464b      	mov	r3, r9
 8010dfe:	4442      	add	r2, r8
 8010e00:	4631      	mov	r1, r6
 8010e02:	4628      	mov	r0, r5
 8010e04:	47b8      	blx	r7
 8010e06:	3001      	adds	r0, #1
 8010e08:	d1c1      	bne.n	8010d8e <_printf_float+0x342>
 8010e0a:	e680      	b.n	8010b0e <_printf_float+0xc2>
 8010e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e0e:	2a01      	cmp	r2, #1
 8010e10:	dc01      	bgt.n	8010e16 <_printf_float+0x3ca>
 8010e12:	07db      	lsls	r3, r3, #31
 8010e14:	d538      	bpl.n	8010e88 <_printf_float+0x43c>
 8010e16:	2301      	movs	r3, #1
 8010e18:	4642      	mov	r2, r8
 8010e1a:	4631      	mov	r1, r6
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	47b8      	blx	r7
 8010e20:	3001      	adds	r0, #1
 8010e22:	f43f ae74 	beq.w	8010b0e <_printf_float+0xc2>
 8010e26:	ee18 3a10 	vmov	r3, s16
 8010e2a:	4652      	mov	r2, sl
 8010e2c:	4631      	mov	r1, r6
 8010e2e:	4628      	mov	r0, r5
 8010e30:	47b8      	blx	r7
 8010e32:	3001      	adds	r0, #1
 8010e34:	f43f ae6b 	beq.w	8010b0e <_printf_float+0xc2>
 8010e38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	2300      	movs	r3, #0
 8010e40:	f7ef fe52 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e44:	b9d8      	cbnz	r0, 8010e7e <_printf_float+0x432>
 8010e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e48:	f108 0201 	add.w	r2, r8, #1
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	4631      	mov	r1, r6
 8010e50:	4628      	mov	r0, r5
 8010e52:	47b8      	blx	r7
 8010e54:	3001      	adds	r0, #1
 8010e56:	d10e      	bne.n	8010e76 <_printf_float+0x42a>
 8010e58:	e659      	b.n	8010b0e <_printf_float+0xc2>
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	4652      	mov	r2, sl
 8010e5e:	4631      	mov	r1, r6
 8010e60:	4628      	mov	r0, r5
 8010e62:	47b8      	blx	r7
 8010e64:	3001      	adds	r0, #1
 8010e66:	f43f ae52 	beq.w	8010b0e <_printf_float+0xc2>
 8010e6a:	f108 0801 	add.w	r8, r8, #1
 8010e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e70:	3b01      	subs	r3, #1
 8010e72:	4543      	cmp	r3, r8
 8010e74:	dcf1      	bgt.n	8010e5a <_printf_float+0x40e>
 8010e76:	464b      	mov	r3, r9
 8010e78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010e7c:	e6dc      	b.n	8010c38 <_printf_float+0x1ec>
 8010e7e:	f04f 0800 	mov.w	r8, #0
 8010e82:	f104 0a1a 	add.w	sl, r4, #26
 8010e86:	e7f2      	b.n	8010e6e <_printf_float+0x422>
 8010e88:	2301      	movs	r3, #1
 8010e8a:	4642      	mov	r2, r8
 8010e8c:	e7df      	b.n	8010e4e <_printf_float+0x402>
 8010e8e:	2301      	movs	r3, #1
 8010e90:	464a      	mov	r2, r9
 8010e92:	4631      	mov	r1, r6
 8010e94:	4628      	mov	r0, r5
 8010e96:	47b8      	blx	r7
 8010e98:	3001      	adds	r0, #1
 8010e9a:	f43f ae38 	beq.w	8010b0e <_printf_float+0xc2>
 8010e9e:	f108 0801 	add.w	r8, r8, #1
 8010ea2:	68e3      	ldr	r3, [r4, #12]
 8010ea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010ea6:	1a5b      	subs	r3, r3, r1
 8010ea8:	4543      	cmp	r3, r8
 8010eaa:	dcf0      	bgt.n	8010e8e <_printf_float+0x442>
 8010eac:	e6fa      	b.n	8010ca4 <_printf_float+0x258>
 8010eae:	f04f 0800 	mov.w	r8, #0
 8010eb2:	f104 0919 	add.w	r9, r4, #25
 8010eb6:	e7f4      	b.n	8010ea2 <_printf_float+0x456>

08010eb8 <_printf_common>:
 8010eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ebc:	4616      	mov	r6, r2
 8010ebe:	4699      	mov	r9, r3
 8010ec0:	688a      	ldr	r2, [r1, #8]
 8010ec2:	690b      	ldr	r3, [r1, #16]
 8010ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	bfb8      	it	lt
 8010ecc:	4613      	movlt	r3, r2
 8010ece:	6033      	str	r3, [r6, #0]
 8010ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ed4:	4607      	mov	r7, r0
 8010ed6:	460c      	mov	r4, r1
 8010ed8:	b10a      	cbz	r2, 8010ede <_printf_common+0x26>
 8010eda:	3301      	adds	r3, #1
 8010edc:	6033      	str	r3, [r6, #0]
 8010ede:	6823      	ldr	r3, [r4, #0]
 8010ee0:	0699      	lsls	r1, r3, #26
 8010ee2:	bf42      	ittt	mi
 8010ee4:	6833      	ldrmi	r3, [r6, #0]
 8010ee6:	3302      	addmi	r3, #2
 8010ee8:	6033      	strmi	r3, [r6, #0]
 8010eea:	6825      	ldr	r5, [r4, #0]
 8010eec:	f015 0506 	ands.w	r5, r5, #6
 8010ef0:	d106      	bne.n	8010f00 <_printf_common+0x48>
 8010ef2:	f104 0a19 	add.w	sl, r4, #25
 8010ef6:	68e3      	ldr	r3, [r4, #12]
 8010ef8:	6832      	ldr	r2, [r6, #0]
 8010efa:	1a9b      	subs	r3, r3, r2
 8010efc:	42ab      	cmp	r3, r5
 8010efe:	dc26      	bgt.n	8010f4e <_printf_common+0x96>
 8010f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010f04:	1e13      	subs	r3, r2, #0
 8010f06:	6822      	ldr	r2, [r4, #0]
 8010f08:	bf18      	it	ne
 8010f0a:	2301      	movne	r3, #1
 8010f0c:	0692      	lsls	r2, r2, #26
 8010f0e:	d42b      	bmi.n	8010f68 <_printf_common+0xb0>
 8010f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f14:	4649      	mov	r1, r9
 8010f16:	4638      	mov	r0, r7
 8010f18:	47c0      	blx	r8
 8010f1a:	3001      	adds	r0, #1
 8010f1c:	d01e      	beq.n	8010f5c <_printf_common+0xa4>
 8010f1e:	6823      	ldr	r3, [r4, #0]
 8010f20:	68e5      	ldr	r5, [r4, #12]
 8010f22:	6832      	ldr	r2, [r6, #0]
 8010f24:	f003 0306 	and.w	r3, r3, #6
 8010f28:	2b04      	cmp	r3, #4
 8010f2a:	bf08      	it	eq
 8010f2c:	1aad      	subeq	r5, r5, r2
 8010f2e:	68a3      	ldr	r3, [r4, #8]
 8010f30:	6922      	ldr	r2, [r4, #16]
 8010f32:	bf0c      	ite	eq
 8010f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f38:	2500      	movne	r5, #0
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	bfc4      	itt	gt
 8010f3e:	1a9b      	subgt	r3, r3, r2
 8010f40:	18ed      	addgt	r5, r5, r3
 8010f42:	2600      	movs	r6, #0
 8010f44:	341a      	adds	r4, #26
 8010f46:	42b5      	cmp	r5, r6
 8010f48:	d11a      	bne.n	8010f80 <_printf_common+0xc8>
 8010f4a:	2000      	movs	r0, #0
 8010f4c:	e008      	b.n	8010f60 <_printf_common+0xa8>
 8010f4e:	2301      	movs	r3, #1
 8010f50:	4652      	mov	r2, sl
 8010f52:	4649      	mov	r1, r9
 8010f54:	4638      	mov	r0, r7
 8010f56:	47c0      	blx	r8
 8010f58:	3001      	adds	r0, #1
 8010f5a:	d103      	bne.n	8010f64 <_printf_common+0xac>
 8010f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f64:	3501      	adds	r5, #1
 8010f66:	e7c6      	b.n	8010ef6 <_printf_common+0x3e>
 8010f68:	18e1      	adds	r1, r4, r3
 8010f6a:	1c5a      	adds	r2, r3, #1
 8010f6c:	2030      	movs	r0, #48	; 0x30
 8010f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f72:	4422      	add	r2, r4
 8010f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f7c:	3302      	adds	r3, #2
 8010f7e:	e7c7      	b.n	8010f10 <_printf_common+0x58>
 8010f80:	2301      	movs	r3, #1
 8010f82:	4622      	mov	r2, r4
 8010f84:	4649      	mov	r1, r9
 8010f86:	4638      	mov	r0, r7
 8010f88:	47c0      	blx	r8
 8010f8a:	3001      	adds	r0, #1
 8010f8c:	d0e6      	beq.n	8010f5c <_printf_common+0xa4>
 8010f8e:	3601      	adds	r6, #1
 8010f90:	e7d9      	b.n	8010f46 <_printf_common+0x8e>
	...

08010f94 <_printf_i>:
 8010f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f98:	7e0f      	ldrb	r7, [r1, #24]
 8010f9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f9c:	2f78      	cmp	r7, #120	; 0x78
 8010f9e:	4691      	mov	r9, r2
 8010fa0:	4680      	mov	r8, r0
 8010fa2:	460c      	mov	r4, r1
 8010fa4:	469a      	mov	sl, r3
 8010fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010faa:	d807      	bhi.n	8010fbc <_printf_i+0x28>
 8010fac:	2f62      	cmp	r7, #98	; 0x62
 8010fae:	d80a      	bhi.n	8010fc6 <_printf_i+0x32>
 8010fb0:	2f00      	cmp	r7, #0
 8010fb2:	f000 80d8 	beq.w	8011166 <_printf_i+0x1d2>
 8010fb6:	2f58      	cmp	r7, #88	; 0x58
 8010fb8:	f000 80a3 	beq.w	8011102 <_printf_i+0x16e>
 8010fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010fc4:	e03a      	b.n	801103c <_printf_i+0xa8>
 8010fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010fca:	2b15      	cmp	r3, #21
 8010fcc:	d8f6      	bhi.n	8010fbc <_printf_i+0x28>
 8010fce:	a101      	add	r1, pc, #4	; (adr r1, 8010fd4 <_printf_i+0x40>)
 8010fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010fd4:	0801102d 	.word	0x0801102d
 8010fd8:	08011041 	.word	0x08011041
 8010fdc:	08010fbd 	.word	0x08010fbd
 8010fe0:	08010fbd 	.word	0x08010fbd
 8010fe4:	08010fbd 	.word	0x08010fbd
 8010fe8:	08010fbd 	.word	0x08010fbd
 8010fec:	08011041 	.word	0x08011041
 8010ff0:	08010fbd 	.word	0x08010fbd
 8010ff4:	08010fbd 	.word	0x08010fbd
 8010ff8:	08010fbd 	.word	0x08010fbd
 8010ffc:	08010fbd 	.word	0x08010fbd
 8011000:	0801114d 	.word	0x0801114d
 8011004:	08011071 	.word	0x08011071
 8011008:	0801112f 	.word	0x0801112f
 801100c:	08010fbd 	.word	0x08010fbd
 8011010:	08010fbd 	.word	0x08010fbd
 8011014:	0801116f 	.word	0x0801116f
 8011018:	08010fbd 	.word	0x08010fbd
 801101c:	08011071 	.word	0x08011071
 8011020:	08010fbd 	.word	0x08010fbd
 8011024:	08010fbd 	.word	0x08010fbd
 8011028:	08011137 	.word	0x08011137
 801102c:	682b      	ldr	r3, [r5, #0]
 801102e:	1d1a      	adds	r2, r3, #4
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	602a      	str	r2, [r5, #0]
 8011034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801103c:	2301      	movs	r3, #1
 801103e:	e0a3      	b.n	8011188 <_printf_i+0x1f4>
 8011040:	6820      	ldr	r0, [r4, #0]
 8011042:	6829      	ldr	r1, [r5, #0]
 8011044:	0606      	lsls	r6, r0, #24
 8011046:	f101 0304 	add.w	r3, r1, #4
 801104a:	d50a      	bpl.n	8011062 <_printf_i+0xce>
 801104c:	680e      	ldr	r6, [r1, #0]
 801104e:	602b      	str	r3, [r5, #0]
 8011050:	2e00      	cmp	r6, #0
 8011052:	da03      	bge.n	801105c <_printf_i+0xc8>
 8011054:	232d      	movs	r3, #45	; 0x2d
 8011056:	4276      	negs	r6, r6
 8011058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801105c:	485e      	ldr	r0, [pc, #376]	; (80111d8 <_printf_i+0x244>)
 801105e:	230a      	movs	r3, #10
 8011060:	e019      	b.n	8011096 <_printf_i+0x102>
 8011062:	680e      	ldr	r6, [r1, #0]
 8011064:	602b      	str	r3, [r5, #0]
 8011066:	f010 0f40 	tst.w	r0, #64	; 0x40
 801106a:	bf18      	it	ne
 801106c:	b236      	sxthne	r6, r6
 801106e:	e7ef      	b.n	8011050 <_printf_i+0xbc>
 8011070:	682b      	ldr	r3, [r5, #0]
 8011072:	6820      	ldr	r0, [r4, #0]
 8011074:	1d19      	adds	r1, r3, #4
 8011076:	6029      	str	r1, [r5, #0]
 8011078:	0601      	lsls	r1, r0, #24
 801107a:	d501      	bpl.n	8011080 <_printf_i+0xec>
 801107c:	681e      	ldr	r6, [r3, #0]
 801107e:	e002      	b.n	8011086 <_printf_i+0xf2>
 8011080:	0646      	lsls	r6, r0, #25
 8011082:	d5fb      	bpl.n	801107c <_printf_i+0xe8>
 8011084:	881e      	ldrh	r6, [r3, #0]
 8011086:	4854      	ldr	r0, [pc, #336]	; (80111d8 <_printf_i+0x244>)
 8011088:	2f6f      	cmp	r7, #111	; 0x6f
 801108a:	bf0c      	ite	eq
 801108c:	2308      	moveq	r3, #8
 801108e:	230a      	movne	r3, #10
 8011090:	2100      	movs	r1, #0
 8011092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011096:	6865      	ldr	r5, [r4, #4]
 8011098:	60a5      	str	r5, [r4, #8]
 801109a:	2d00      	cmp	r5, #0
 801109c:	bfa2      	ittt	ge
 801109e:	6821      	ldrge	r1, [r4, #0]
 80110a0:	f021 0104 	bicge.w	r1, r1, #4
 80110a4:	6021      	strge	r1, [r4, #0]
 80110a6:	b90e      	cbnz	r6, 80110ac <_printf_i+0x118>
 80110a8:	2d00      	cmp	r5, #0
 80110aa:	d04d      	beq.n	8011148 <_printf_i+0x1b4>
 80110ac:	4615      	mov	r5, r2
 80110ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80110b2:	fb03 6711 	mls	r7, r3, r1, r6
 80110b6:	5dc7      	ldrb	r7, [r0, r7]
 80110b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80110bc:	4637      	mov	r7, r6
 80110be:	42bb      	cmp	r3, r7
 80110c0:	460e      	mov	r6, r1
 80110c2:	d9f4      	bls.n	80110ae <_printf_i+0x11a>
 80110c4:	2b08      	cmp	r3, #8
 80110c6:	d10b      	bne.n	80110e0 <_printf_i+0x14c>
 80110c8:	6823      	ldr	r3, [r4, #0]
 80110ca:	07de      	lsls	r6, r3, #31
 80110cc:	d508      	bpl.n	80110e0 <_printf_i+0x14c>
 80110ce:	6923      	ldr	r3, [r4, #16]
 80110d0:	6861      	ldr	r1, [r4, #4]
 80110d2:	4299      	cmp	r1, r3
 80110d4:	bfde      	ittt	le
 80110d6:	2330      	movle	r3, #48	; 0x30
 80110d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80110dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80110e0:	1b52      	subs	r2, r2, r5
 80110e2:	6122      	str	r2, [r4, #16]
 80110e4:	f8cd a000 	str.w	sl, [sp]
 80110e8:	464b      	mov	r3, r9
 80110ea:	aa03      	add	r2, sp, #12
 80110ec:	4621      	mov	r1, r4
 80110ee:	4640      	mov	r0, r8
 80110f0:	f7ff fee2 	bl	8010eb8 <_printf_common>
 80110f4:	3001      	adds	r0, #1
 80110f6:	d14c      	bne.n	8011192 <_printf_i+0x1fe>
 80110f8:	f04f 30ff 	mov.w	r0, #4294967295
 80110fc:	b004      	add	sp, #16
 80110fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011102:	4835      	ldr	r0, [pc, #212]	; (80111d8 <_printf_i+0x244>)
 8011104:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011108:	6829      	ldr	r1, [r5, #0]
 801110a:	6823      	ldr	r3, [r4, #0]
 801110c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011110:	6029      	str	r1, [r5, #0]
 8011112:	061d      	lsls	r5, r3, #24
 8011114:	d514      	bpl.n	8011140 <_printf_i+0x1ac>
 8011116:	07df      	lsls	r7, r3, #31
 8011118:	bf44      	itt	mi
 801111a:	f043 0320 	orrmi.w	r3, r3, #32
 801111e:	6023      	strmi	r3, [r4, #0]
 8011120:	b91e      	cbnz	r6, 801112a <_printf_i+0x196>
 8011122:	6823      	ldr	r3, [r4, #0]
 8011124:	f023 0320 	bic.w	r3, r3, #32
 8011128:	6023      	str	r3, [r4, #0]
 801112a:	2310      	movs	r3, #16
 801112c:	e7b0      	b.n	8011090 <_printf_i+0xfc>
 801112e:	6823      	ldr	r3, [r4, #0]
 8011130:	f043 0320 	orr.w	r3, r3, #32
 8011134:	6023      	str	r3, [r4, #0]
 8011136:	2378      	movs	r3, #120	; 0x78
 8011138:	4828      	ldr	r0, [pc, #160]	; (80111dc <_printf_i+0x248>)
 801113a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801113e:	e7e3      	b.n	8011108 <_printf_i+0x174>
 8011140:	0659      	lsls	r1, r3, #25
 8011142:	bf48      	it	mi
 8011144:	b2b6      	uxthmi	r6, r6
 8011146:	e7e6      	b.n	8011116 <_printf_i+0x182>
 8011148:	4615      	mov	r5, r2
 801114a:	e7bb      	b.n	80110c4 <_printf_i+0x130>
 801114c:	682b      	ldr	r3, [r5, #0]
 801114e:	6826      	ldr	r6, [r4, #0]
 8011150:	6961      	ldr	r1, [r4, #20]
 8011152:	1d18      	adds	r0, r3, #4
 8011154:	6028      	str	r0, [r5, #0]
 8011156:	0635      	lsls	r5, r6, #24
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	d501      	bpl.n	8011160 <_printf_i+0x1cc>
 801115c:	6019      	str	r1, [r3, #0]
 801115e:	e002      	b.n	8011166 <_printf_i+0x1d2>
 8011160:	0670      	lsls	r0, r6, #25
 8011162:	d5fb      	bpl.n	801115c <_printf_i+0x1c8>
 8011164:	8019      	strh	r1, [r3, #0]
 8011166:	2300      	movs	r3, #0
 8011168:	6123      	str	r3, [r4, #16]
 801116a:	4615      	mov	r5, r2
 801116c:	e7ba      	b.n	80110e4 <_printf_i+0x150>
 801116e:	682b      	ldr	r3, [r5, #0]
 8011170:	1d1a      	adds	r2, r3, #4
 8011172:	602a      	str	r2, [r5, #0]
 8011174:	681d      	ldr	r5, [r3, #0]
 8011176:	6862      	ldr	r2, [r4, #4]
 8011178:	2100      	movs	r1, #0
 801117a:	4628      	mov	r0, r5
 801117c:	f7ef f840 	bl	8000200 <memchr>
 8011180:	b108      	cbz	r0, 8011186 <_printf_i+0x1f2>
 8011182:	1b40      	subs	r0, r0, r5
 8011184:	6060      	str	r0, [r4, #4]
 8011186:	6863      	ldr	r3, [r4, #4]
 8011188:	6123      	str	r3, [r4, #16]
 801118a:	2300      	movs	r3, #0
 801118c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011190:	e7a8      	b.n	80110e4 <_printf_i+0x150>
 8011192:	6923      	ldr	r3, [r4, #16]
 8011194:	462a      	mov	r2, r5
 8011196:	4649      	mov	r1, r9
 8011198:	4640      	mov	r0, r8
 801119a:	47d0      	blx	sl
 801119c:	3001      	adds	r0, #1
 801119e:	d0ab      	beq.n	80110f8 <_printf_i+0x164>
 80111a0:	6823      	ldr	r3, [r4, #0]
 80111a2:	079b      	lsls	r3, r3, #30
 80111a4:	d413      	bmi.n	80111ce <_printf_i+0x23a>
 80111a6:	68e0      	ldr	r0, [r4, #12]
 80111a8:	9b03      	ldr	r3, [sp, #12]
 80111aa:	4298      	cmp	r0, r3
 80111ac:	bfb8      	it	lt
 80111ae:	4618      	movlt	r0, r3
 80111b0:	e7a4      	b.n	80110fc <_printf_i+0x168>
 80111b2:	2301      	movs	r3, #1
 80111b4:	4632      	mov	r2, r6
 80111b6:	4649      	mov	r1, r9
 80111b8:	4640      	mov	r0, r8
 80111ba:	47d0      	blx	sl
 80111bc:	3001      	adds	r0, #1
 80111be:	d09b      	beq.n	80110f8 <_printf_i+0x164>
 80111c0:	3501      	adds	r5, #1
 80111c2:	68e3      	ldr	r3, [r4, #12]
 80111c4:	9903      	ldr	r1, [sp, #12]
 80111c6:	1a5b      	subs	r3, r3, r1
 80111c8:	42ab      	cmp	r3, r5
 80111ca:	dcf2      	bgt.n	80111b2 <_printf_i+0x21e>
 80111cc:	e7eb      	b.n	80111a6 <_printf_i+0x212>
 80111ce:	2500      	movs	r5, #0
 80111d0:	f104 0619 	add.w	r6, r4, #25
 80111d4:	e7f5      	b.n	80111c2 <_printf_i+0x22e>
 80111d6:	bf00      	nop
 80111d8:	08014066 	.word	0x08014066
 80111dc:	08014077 	.word	0x08014077

080111e0 <iprintf>:
 80111e0:	b40f      	push	{r0, r1, r2, r3}
 80111e2:	4b0a      	ldr	r3, [pc, #40]	; (801120c <iprintf+0x2c>)
 80111e4:	b513      	push	{r0, r1, r4, lr}
 80111e6:	681c      	ldr	r4, [r3, #0]
 80111e8:	b124      	cbz	r4, 80111f4 <iprintf+0x14>
 80111ea:	69a3      	ldr	r3, [r4, #24]
 80111ec:	b913      	cbnz	r3, 80111f4 <iprintf+0x14>
 80111ee:	4620      	mov	r0, r4
 80111f0:	f001 f9ee 	bl	80125d0 <__sinit>
 80111f4:	ab05      	add	r3, sp, #20
 80111f6:	9a04      	ldr	r2, [sp, #16]
 80111f8:	68a1      	ldr	r1, [r4, #8]
 80111fa:	9301      	str	r3, [sp, #4]
 80111fc:	4620      	mov	r0, r4
 80111fe:	f002 f81d 	bl	801323c <_vfiprintf_r>
 8011202:	b002      	add	sp, #8
 8011204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011208:	b004      	add	sp, #16
 801120a:	4770      	bx	lr
 801120c:	2000004c 	.word	0x2000004c

08011210 <_puts_r>:
 8011210:	b570      	push	{r4, r5, r6, lr}
 8011212:	460e      	mov	r6, r1
 8011214:	4605      	mov	r5, r0
 8011216:	b118      	cbz	r0, 8011220 <_puts_r+0x10>
 8011218:	6983      	ldr	r3, [r0, #24]
 801121a:	b90b      	cbnz	r3, 8011220 <_puts_r+0x10>
 801121c:	f001 f9d8 	bl	80125d0 <__sinit>
 8011220:	69ab      	ldr	r3, [r5, #24]
 8011222:	68ac      	ldr	r4, [r5, #8]
 8011224:	b913      	cbnz	r3, 801122c <_puts_r+0x1c>
 8011226:	4628      	mov	r0, r5
 8011228:	f001 f9d2 	bl	80125d0 <__sinit>
 801122c:	4b2c      	ldr	r3, [pc, #176]	; (80112e0 <_puts_r+0xd0>)
 801122e:	429c      	cmp	r4, r3
 8011230:	d120      	bne.n	8011274 <_puts_r+0x64>
 8011232:	686c      	ldr	r4, [r5, #4]
 8011234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011236:	07db      	lsls	r3, r3, #31
 8011238:	d405      	bmi.n	8011246 <_puts_r+0x36>
 801123a:	89a3      	ldrh	r3, [r4, #12]
 801123c:	0598      	lsls	r0, r3, #22
 801123e:	d402      	bmi.n	8011246 <_puts_r+0x36>
 8011240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011242:	f001 fa68 	bl	8012716 <__retarget_lock_acquire_recursive>
 8011246:	89a3      	ldrh	r3, [r4, #12]
 8011248:	0719      	lsls	r1, r3, #28
 801124a:	d51d      	bpl.n	8011288 <_puts_r+0x78>
 801124c:	6923      	ldr	r3, [r4, #16]
 801124e:	b1db      	cbz	r3, 8011288 <_puts_r+0x78>
 8011250:	3e01      	subs	r6, #1
 8011252:	68a3      	ldr	r3, [r4, #8]
 8011254:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011258:	3b01      	subs	r3, #1
 801125a:	60a3      	str	r3, [r4, #8]
 801125c:	bb39      	cbnz	r1, 80112ae <_puts_r+0x9e>
 801125e:	2b00      	cmp	r3, #0
 8011260:	da38      	bge.n	80112d4 <_puts_r+0xc4>
 8011262:	4622      	mov	r2, r4
 8011264:	210a      	movs	r1, #10
 8011266:	4628      	mov	r0, r5
 8011268:	f000 f95e 	bl	8011528 <__swbuf_r>
 801126c:	3001      	adds	r0, #1
 801126e:	d011      	beq.n	8011294 <_puts_r+0x84>
 8011270:	250a      	movs	r5, #10
 8011272:	e011      	b.n	8011298 <_puts_r+0x88>
 8011274:	4b1b      	ldr	r3, [pc, #108]	; (80112e4 <_puts_r+0xd4>)
 8011276:	429c      	cmp	r4, r3
 8011278:	d101      	bne.n	801127e <_puts_r+0x6e>
 801127a:	68ac      	ldr	r4, [r5, #8]
 801127c:	e7da      	b.n	8011234 <_puts_r+0x24>
 801127e:	4b1a      	ldr	r3, [pc, #104]	; (80112e8 <_puts_r+0xd8>)
 8011280:	429c      	cmp	r4, r3
 8011282:	bf08      	it	eq
 8011284:	68ec      	ldreq	r4, [r5, #12]
 8011286:	e7d5      	b.n	8011234 <_puts_r+0x24>
 8011288:	4621      	mov	r1, r4
 801128a:	4628      	mov	r0, r5
 801128c:	f000 f99e 	bl	80115cc <__swsetup_r>
 8011290:	2800      	cmp	r0, #0
 8011292:	d0dd      	beq.n	8011250 <_puts_r+0x40>
 8011294:	f04f 35ff 	mov.w	r5, #4294967295
 8011298:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801129a:	07da      	lsls	r2, r3, #31
 801129c:	d405      	bmi.n	80112aa <_puts_r+0x9a>
 801129e:	89a3      	ldrh	r3, [r4, #12]
 80112a0:	059b      	lsls	r3, r3, #22
 80112a2:	d402      	bmi.n	80112aa <_puts_r+0x9a>
 80112a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112a6:	f001 fa37 	bl	8012718 <__retarget_lock_release_recursive>
 80112aa:	4628      	mov	r0, r5
 80112ac:	bd70      	pop	{r4, r5, r6, pc}
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	da04      	bge.n	80112bc <_puts_r+0xac>
 80112b2:	69a2      	ldr	r2, [r4, #24]
 80112b4:	429a      	cmp	r2, r3
 80112b6:	dc06      	bgt.n	80112c6 <_puts_r+0xb6>
 80112b8:	290a      	cmp	r1, #10
 80112ba:	d004      	beq.n	80112c6 <_puts_r+0xb6>
 80112bc:	6823      	ldr	r3, [r4, #0]
 80112be:	1c5a      	adds	r2, r3, #1
 80112c0:	6022      	str	r2, [r4, #0]
 80112c2:	7019      	strb	r1, [r3, #0]
 80112c4:	e7c5      	b.n	8011252 <_puts_r+0x42>
 80112c6:	4622      	mov	r2, r4
 80112c8:	4628      	mov	r0, r5
 80112ca:	f000 f92d 	bl	8011528 <__swbuf_r>
 80112ce:	3001      	adds	r0, #1
 80112d0:	d1bf      	bne.n	8011252 <_puts_r+0x42>
 80112d2:	e7df      	b.n	8011294 <_puts_r+0x84>
 80112d4:	6823      	ldr	r3, [r4, #0]
 80112d6:	250a      	movs	r5, #10
 80112d8:	1c5a      	adds	r2, r3, #1
 80112da:	6022      	str	r2, [r4, #0]
 80112dc:	701d      	strb	r5, [r3, #0]
 80112de:	e7db      	b.n	8011298 <_puts_r+0x88>
 80112e0:	0801423c 	.word	0x0801423c
 80112e4:	0801425c 	.word	0x0801425c
 80112e8:	0801421c 	.word	0x0801421c

080112ec <puts>:
 80112ec:	4b02      	ldr	r3, [pc, #8]	; (80112f8 <puts+0xc>)
 80112ee:	4601      	mov	r1, r0
 80112f0:	6818      	ldr	r0, [r3, #0]
 80112f2:	f7ff bf8d 	b.w	8011210 <_puts_r>
 80112f6:	bf00      	nop
 80112f8:	2000004c 	.word	0x2000004c

080112fc <_sbrk_r>:
 80112fc:	b538      	push	{r3, r4, r5, lr}
 80112fe:	4d06      	ldr	r5, [pc, #24]	; (8011318 <_sbrk_r+0x1c>)
 8011300:	2300      	movs	r3, #0
 8011302:	4604      	mov	r4, r0
 8011304:	4608      	mov	r0, r1
 8011306:	602b      	str	r3, [r5, #0]
 8011308:	f7f2 fbde 	bl	8003ac8 <_sbrk>
 801130c:	1c43      	adds	r3, r0, #1
 801130e:	d102      	bne.n	8011316 <_sbrk_r+0x1a>
 8011310:	682b      	ldr	r3, [r5, #0]
 8011312:	b103      	cbz	r3, 8011316 <_sbrk_r+0x1a>
 8011314:	6023      	str	r3, [r4, #0]
 8011316:	bd38      	pop	{r3, r4, r5, pc}
 8011318:	20003510 	.word	0x20003510

0801131c <_raise_r>:
 801131c:	291f      	cmp	r1, #31
 801131e:	b538      	push	{r3, r4, r5, lr}
 8011320:	4604      	mov	r4, r0
 8011322:	460d      	mov	r5, r1
 8011324:	d904      	bls.n	8011330 <_raise_r+0x14>
 8011326:	2316      	movs	r3, #22
 8011328:	6003      	str	r3, [r0, #0]
 801132a:	f04f 30ff 	mov.w	r0, #4294967295
 801132e:	bd38      	pop	{r3, r4, r5, pc}
 8011330:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011332:	b112      	cbz	r2, 801133a <_raise_r+0x1e>
 8011334:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011338:	b94b      	cbnz	r3, 801134e <_raise_r+0x32>
 801133a:	4620      	mov	r0, r4
 801133c:	f000 f830 	bl	80113a0 <_getpid_r>
 8011340:	462a      	mov	r2, r5
 8011342:	4601      	mov	r1, r0
 8011344:	4620      	mov	r0, r4
 8011346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801134a:	f000 b817 	b.w	801137c <_kill_r>
 801134e:	2b01      	cmp	r3, #1
 8011350:	d00a      	beq.n	8011368 <_raise_r+0x4c>
 8011352:	1c59      	adds	r1, r3, #1
 8011354:	d103      	bne.n	801135e <_raise_r+0x42>
 8011356:	2316      	movs	r3, #22
 8011358:	6003      	str	r3, [r0, #0]
 801135a:	2001      	movs	r0, #1
 801135c:	e7e7      	b.n	801132e <_raise_r+0x12>
 801135e:	2400      	movs	r4, #0
 8011360:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011364:	4628      	mov	r0, r5
 8011366:	4798      	blx	r3
 8011368:	2000      	movs	r0, #0
 801136a:	e7e0      	b.n	801132e <_raise_r+0x12>

0801136c <raise>:
 801136c:	4b02      	ldr	r3, [pc, #8]	; (8011378 <raise+0xc>)
 801136e:	4601      	mov	r1, r0
 8011370:	6818      	ldr	r0, [r3, #0]
 8011372:	f7ff bfd3 	b.w	801131c <_raise_r>
 8011376:	bf00      	nop
 8011378:	2000004c 	.word	0x2000004c

0801137c <_kill_r>:
 801137c:	b538      	push	{r3, r4, r5, lr}
 801137e:	4d07      	ldr	r5, [pc, #28]	; (801139c <_kill_r+0x20>)
 8011380:	2300      	movs	r3, #0
 8011382:	4604      	mov	r4, r0
 8011384:	4608      	mov	r0, r1
 8011386:	4611      	mov	r1, r2
 8011388:	602b      	str	r3, [r5, #0]
 801138a:	f7f2 fb31 	bl	80039f0 <_kill>
 801138e:	1c43      	adds	r3, r0, #1
 8011390:	d102      	bne.n	8011398 <_kill_r+0x1c>
 8011392:	682b      	ldr	r3, [r5, #0]
 8011394:	b103      	cbz	r3, 8011398 <_kill_r+0x1c>
 8011396:	6023      	str	r3, [r4, #0]
 8011398:	bd38      	pop	{r3, r4, r5, pc}
 801139a:	bf00      	nop
 801139c:	20003510 	.word	0x20003510

080113a0 <_getpid_r>:
 80113a0:	f7f2 bb1e 	b.w	80039e0 <_getpid>

080113a4 <siprintf>:
 80113a4:	b40e      	push	{r1, r2, r3}
 80113a6:	b500      	push	{lr}
 80113a8:	b09c      	sub	sp, #112	; 0x70
 80113aa:	ab1d      	add	r3, sp, #116	; 0x74
 80113ac:	9002      	str	r0, [sp, #8]
 80113ae:	9006      	str	r0, [sp, #24]
 80113b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80113b4:	4809      	ldr	r0, [pc, #36]	; (80113dc <siprintf+0x38>)
 80113b6:	9107      	str	r1, [sp, #28]
 80113b8:	9104      	str	r1, [sp, #16]
 80113ba:	4909      	ldr	r1, [pc, #36]	; (80113e0 <siprintf+0x3c>)
 80113bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80113c0:	9105      	str	r1, [sp, #20]
 80113c2:	6800      	ldr	r0, [r0, #0]
 80113c4:	9301      	str	r3, [sp, #4]
 80113c6:	a902      	add	r1, sp, #8
 80113c8:	f001 fe0e 	bl	8012fe8 <_svfiprintf_r>
 80113cc:	9b02      	ldr	r3, [sp, #8]
 80113ce:	2200      	movs	r2, #0
 80113d0:	701a      	strb	r2, [r3, #0]
 80113d2:	b01c      	add	sp, #112	; 0x70
 80113d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80113d8:	b003      	add	sp, #12
 80113da:	4770      	bx	lr
 80113dc:	2000004c 	.word	0x2000004c
 80113e0:	ffff0208 	.word	0xffff0208

080113e4 <strchr>:
 80113e4:	b2c9      	uxtb	r1, r1
 80113e6:	4603      	mov	r3, r0
 80113e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113ec:	b11a      	cbz	r2, 80113f6 <strchr+0x12>
 80113ee:	428a      	cmp	r2, r1
 80113f0:	d1f9      	bne.n	80113e6 <strchr+0x2>
 80113f2:	4618      	mov	r0, r3
 80113f4:	4770      	bx	lr
 80113f6:	2900      	cmp	r1, #0
 80113f8:	bf18      	it	ne
 80113fa:	2300      	movne	r3, #0
 80113fc:	e7f9      	b.n	80113f2 <strchr+0xe>

080113fe <strcpy>:
 80113fe:	4603      	mov	r3, r0
 8011400:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011404:	f803 2b01 	strb.w	r2, [r3], #1
 8011408:	2a00      	cmp	r2, #0
 801140a:	d1f9      	bne.n	8011400 <strcpy+0x2>
 801140c:	4770      	bx	lr
	...

08011410 <_strtol_l.constprop.0>:
 8011410:	2b01      	cmp	r3, #1
 8011412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011416:	d001      	beq.n	801141c <_strtol_l.constprop.0+0xc>
 8011418:	2b24      	cmp	r3, #36	; 0x24
 801141a:	d906      	bls.n	801142a <_strtol_l.constprop.0+0x1a>
 801141c:	f7ff f946 	bl	80106ac <__errno>
 8011420:	2316      	movs	r3, #22
 8011422:	6003      	str	r3, [r0, #0]
 8011424:	2000      	movs	r0, #0
 8011426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801142a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011510 <_strtol_l.constprop.0+0x100>
 801142e:	460d      	mov	r5, r1
 8011430:	462e      	mov	r6, r5
 8011432:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011436:	f814 700c 	ldrb.w	r7, [r4, ip]
 801143a:	f017 0708 	ands.w	r7, r7, #8
 801143e:	d1f7      	bne.n	8011430 <_strtol_l.constprop.0+0x20>
 8011440:	2c2d      	cmp	r4, #45	; 0x2d
 8011442:	d132      	bne.n	80114aa <_strtol_l.constprop.0+0x9a>
 8011444:	782c      	ldrb	r4, [r5, #0]
 8011446:	2701      	movs	r7, #1
 8011448:	1cb5      	adds	r5, r6, #2
 801144a:	2b00      	cmp	r3, #0
 801144c:	d05b      	beq.n	8011506 <_strtol_l.constprop.0+0xf6>
 801144e:	2b10      	cmp	r3, #16
 8011450:	d109      	bne.n	8011466 <_strtol_l.constprop.0+0x56>
 8011452:	2c30      	cmp	r4, #48	; 0x30
 8011454:	d107      	bne.n	8011466 <_strtol_l.constprop.0+0x56>
 8011456:	782c      	ldrb	r4, [r5, #0]
 8011458:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801145c:	2c58      	cmp	r4, #88	; 0x58
 801145e:	d14d      	bne.n	80114fc <_strtol_l.constprop.0+0xec>
 8011460:	786c      	ldrb	r4, [r5, #1]
 8011462:	2310      	movs	r3, #16
 8011464:	3502      	adds	r5, #2
 8011466:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801146a:	f108 38ff 	add.w	r8, r8, #4294967295
 801146e:	f04f 0c00 	mov.w	ip, #0
 8011472:	fbb8 f9f3 	udiv	r9, r8, r3
 8011476:	4666      	mov	r6, ip
 8011478:	fb03 8a19 	mls	sl, r3, r9, r8
 801147c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011480:	f1be 0f09 	cmp.w	lr, #9
 8011484:	d816      	bhi.n	80114b4 <_strtol_l.constprop.0+0xa4>
 8011486:	4674      	mov	r4, lr
 8011488:	42a3      	cmp	r3, r4
 801148a:	dd24      	ble.n	80114d6 <_strtol_l.constprop.0+0xc6>
 801148c:	f1bc 0f00 	cmp.w	ip, #0
 8011490:	db1e      	blt.n	80114d0 <_strtol_l.constprop.0+0xc0>
 8011492:	45b1      	cmp	r9, r6
 8011494:	d31c      	bcc.n	80114d0 <_strtol_l.constprop.0+0xc0>
 8011496:	d101      	bne.n	801149c <_strtol_l.constprop.0+0x8c>
 8011498:	45a2      	cmp	sl, r4
 801149a:	db19      	blt.n	80114d0 <_strtol_l.constprop.0+0xc0>
 801149c:	fb06 4603 	mla	r6, r6, r3, r4
 80114a0:	f04f 0c01 	mov.w	ip, #1
 80114a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114a8:	e7e8      	b.n	801147c <_strtol_l.constprop.0+0x6c>
 80114aa:	2c2b      	cmp	r4, #43	; 0x2b
 80114ac:	bf04      	itt	eq
 80114ae:	782c      	ldrbeq	r4, [r5, #0]
 80114b0:	1cb5      	addeq	r5, r6, #2
 80114b2:	e7ca      	b.n	801144a <_strtol_l.constprop.0+0x3a>
 80114b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80114b8:	f1be 0f19 	cmp.w	lr, #25
 80114bc:	d801      	bhi.n	80114c2 <_strtol_l.constprop.0+0xb2>
 80114be:	3c37      	subs	r4, #55	; 0x37
 80114c0:	e7e2      	b.n	8011488 <_strtol_l.constprop.0+0x78>
 80114c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80114c6:	f1be 0f19 	cmp.w	lr, #25
 80114ca:	d804      	bhi.n	80114d6 <_strtol_l.constprop.0+0xc6>
 80114cc:	3c57      	subs	r4, #87	; 0x57
 80114ce:	e7db      	b.n	8011488 <_strtol_l.constprop.0+0x78>
 80114d0:	f04f 3cff 	mov.w	ip, #4294967295
 80114d4:	e7e6      	b.n	80114a4 <_strtol_l.constprop.0+0x94>
 80114d6:	f1bc 0f00 	cmp.w	ip, #0
 80114da:	da05      	bge.n	80114e8 <_strtol_l.constprop.0+0xd8>
 80114dc:	2322      	movs	r3, #34	; 0x22
 80114de:	6003      	str	r3, [r0, #0]
 80114e0:	4646      	mov	r6, r8
 80114e2:	b942      	cbnz	r2, 80114f6 <_strtol_l.constprop.0+0xe6>
 80114e4:	4630      	mov	r0, r6
 80114e6:	e79e      	b.n	8011426 <_strtol_l.constprop.0+0x16>
 80114e8:	b107      	cbz	r7, 80114ec <_strtol_l.constprop.0+0xdc>
 80114ea:	4276      	negs	r6, r6
 80114ec:	2a00      	cmp	r2, #0
 80114ee:	d0f9      	beq.n	80114e4 <_strtol_l.constprop.0+0xd4>
 80114f0:	f1bc 0f00 	cmp.w	ip, #0
 80114f4:	d000      	beq.n	80114f8 <_strtol_l.constprop.0+0xe8>
 80114f6:	1e69      	subs	r1, r5, #1
 80114f8:	6011      	str	r1, [r2, #0]
 80114fa:	e7f3      	b.n	80114e4 <_strtol_l.constprop.0+0xd4>
 80114fc:	2430      	movs	r4, #48	; 0x30
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d1b1      	bne.n	8011466 <_strtol_l.constprop.0+0x56>
 8011502:	2308      	movs	r3, #8
 8011504:	e7af      	b.n	8011466 <_strtol_l.constprop.0+0x56>
 8011506:	2c30      	cmp	r4, #48	; 0x30
 8011508:	d0a5      	beq.n	8011456 <_strtol_l.constprop.0+0x46>
 801150a:	230a      	movs	r3, #10
 801150c:	e7ab      	b.n	8011466 <_strtol_l.constprop.0+0x56>
 801150e:	bf00      	nop
 8011510:	08014089 	.word	0x08014089

08011514 <strtol>:
 8011514:	4613      	mov	r3, r2
 8011516:	460a      	mov	r2, r1
 8011518:	4601      	mov	r1, r0
 801151a:	4802      	ldr	r0, [pc, #8]	; (8011524 <strtol+0x10>)
 801151c:	6800      	ldr	r0, [r0, #0]
 801151e:	f7ff bf77 	b.w	8011410 <_strtol_l.constprop.0>
 8011522:	bf00      	nop
 8011524:	2000004c 	.word	0x2000004c

08011528 <__swbuf_r>:
 8011528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801152a:	460e      	mov	r6, r1
 801152c:	4614      	mov	r4, r2
 801152e:	4605      	mov	r5, r0
 8011530:	b118      	cbz	r0, 801153a <__swbuf_r+0x12>
 8011532:	6983      	ldr	r3, [r0, #24]
 8011534:	b90b      	cbnz	r3, 801153a <__swbuf_r+0x12>
 8011536:	f001 f84b 	bl	80125d0 <__sinit>
 801153a:	4b21      	ldr	r3, [pc, #132]	; (80115c0 <__swbuf_r+0x98>)
 801153c:	429c      	cmp	r4, r3
 801153e:	d12b      	bne.n	8011598 <__swbuf_r+0x70>
 8011540:	686c      	ldr	r4, [r5, #4]
 8011542:	69a3      	ldr	r3, [r4, #24]
 8011544:	60a3      	str	r3, [r4, #8]
 8011546:	89a3      	ldrh	r3, [r4, #12]
 8011548:	071a      	lsls	r2, r3, #28
 801154a:	d52f      	bpl.n	80115ac <__swbuf_r+0x84>
 801154c:	6923      	ldr	r3, [r4, #16]
 801154e:	b36b      	cbz	r3, 80115ac <__swbuf_r+0x84>
 8011550:	6923      	ldr	r3, [r4, #16]
 8011552:	6820      	ldr	r0, [r4, #0]
 8011554:	1ac0      	subs	r0, r0, r3
 8011556:	6963      	ldr	r3, [r4, #20]
 8011558:	b2f6      	uxtb	r6, r6
 801155a:	4283      	cmp	r3, r0
 801155c:	4637      	mov	r7, r6
 801155e:	dc04      	bgt.n	801156a <__swbuf_r+0x42>
 8011560:	4621      	mov	r1, r4
 8011562:	4628      	mov	r0, r5
 8011564:	f000 ffa0 	bl	80124a8 <_fflush_r>
 8011568:	bb30      	cbnz	r0, 80115b8 <__swbuf_r+0x90>
 801156a:	68a3      	ldr	r3, [r4, #8]
 801156c:	3b01      	subs	r3, #1
 801156e:	60a3      	str	r3, [r4, #8]
 8011570:	6823      	ldr	r3, [r4, #0]
 8011572:	1c5a      	adds	r2, r3, #1
 8011574:	6022      	str	r2, [r4, #0]
 8011576:	701e      	strb	r6, [r3, #0]
 8011578:	6963      	ldr	r3, [r4, #20]
 801157a:	3001      	adds	r0, #1
 801157c:	4283      	cmp	r3, r0
 801157e:	d004      	beq.n	801158a <__swbuf_r+0x62>
 8011580:	89a3      	ldrh	r3, [r4, #12]
 8011582:	07db      	lsls	r3, r3, #31
 8011584:	d506      	bpl.n	8011594 <__swbuf_r+0x6c>
 8011586:	2e0a      	cmp	r6, #10
 8011588:	d104      	bne.n	8011594 <__swbuf_r+0x6c>
 801158a:	4621      	mov	r1, r4
 801158c:	4628      	mov	r0, r5
 801158e:	f000 ff8b 	bl	80124a8 <_fflush_r>
 8011592:	b988      	cbnz	r0, 80115b8 <__swbuf_r+0x90>
 8011594:	4638      	mov	r0, r7
 8011596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011598:	4b0a      	ldr	r3, [pc, #40]	; (80115c4 <__swbuf_r+0x9c>)
 801159a:	429c      	cmp	r4, r3
 801159c:	d101      	bne.n	80115a2 <__swbuf_r+0x7a>
 801159e:	68ac      	ldr	r4, [r5, #8]
 80115a0:	e7cf      	b.n	8011542 <__swbuf_r+0x1a>
 80115a2:	4b09      	ldr	r3, [pc, #36]	; (80115c8 <__swbuf_r+0xa0>)
 80115a4:	429c      	cmp	r4, r3
 80115a6:	bf08      	it	eq
 80115a8:	68ec      	ldreq	r4, [r5, #12]
 80115aa:	e7ca      	b.n	8011542 <__swbuf_r+0x1a>
 80115ac:	4621      	mov	r1, r4
 80115ae:	4628      	mov	r0, r5
 80115b0:	f000 f80c 	bl	80115cc <__swsetup_r>
 80115b4:	2800      	cmp	r0, #0
 80115b6:	d0cb      	beq.n	8011550 <__swbuf_r+0x28>
 80115b8:	f04f 37ff 	mov.w	r7, #4294967295
 80115bc:	e7ea      	b.n	8011594 <__swbuf_r+0x6c>
 80115be:	bf00      	nop
 80115c0:	0801423c 	.word	0x0801423c
 80115c4:	0801425c 	.word	0x0801425c
 80115c8:	0801421c 	.word	0x0801421c

080115cc <__swsetup_r>:
 80115cc:	4b32      	ldr	r3, [pc, #200]	; (8011698 <__swsetup_r+0xcc>)
 80115ce:	b570      	push	{r4, r5, r6, lr}
 80115d0:	681d      	ldr	r5, [r3, #0]
 80115d2:	4606      	mov	r6, r0
 80115d4:	460c      	mov	r4, r1
 80115d6:	b125      	cbz	r5, 80115e2 <__swsetup_r+0x16>
 80115d8:	69ab      	ldr	r3, [r5, #24]
 80115da:	b913      	cbnz	r3, 80115e2 <__swsetup_r+0x16>
 80115dc:	4628      	mov	r0, r5
 80115de:	f000 fff7 	bl	80125d0 <__sinit>
 80115e2:	4b2e      	ldr	r3, [pc, #184]	; (801169c <__swsetup_r+0xd0>)
 80115e4:	429c      	cmp	r4, r3
 80115e6:	d10f      	bne.n	8011608 <__swsetup_r+0x3c>
 80115e8:	686c      	ldr	r4, [r5, #4]
 80115ea:	89a3      	ldrh	r3, [r4, #12]
 80115ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115f0:	0719      	lsls	r1, r3, #28
 80115f2:	d42c      	bmi.n	801164e <__swsetup_r+0x82>
 80115f4:	06dd      	lsls	r5, r3, #27
 80115f6:	d411      	bmi.n	801161c <__swsetup_r+0x50>
 80115f8:	2309      	movs	r3, #9
 80115fa:	6033      	str	r3, [r6, #0]
 80115fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011600:	81a3      	strh	r3, [r4, #12]
 8011602:	f04f 30ff 	mov.w	r0, #4294967295
 8011606:	e03e      	b.n	8011686 <__swsetup_r+0xba>
 8011608:	4b25      	ldr	r3, [pc, #148]	; (80116a0 <__swsetup_r+0xd4>)
 801160a:	429c      	cmp	r4, r3
 801160c:	d101      	bne.n	8011612 <__swsetup_r+0x46>
 801160e:	68ac      	ldr	r4, [r5, #8]
 8011610:	e7eb      	b.n	80115ea <__swsetup_r+0x1e>
 8011612:	4b24      	ldr	r3, [pc, #144]	; (80116a4 <__swsetup_r+0xd8>)
 8011614:	429c      	cmp	r4, r3
 8011616:	bf08      	it	eq
 8011618:	68ec      	ldreq	r4, [r5, #12]
 801161a:	e7e6      	b.n	80115ea <__swsetup_r+0x1e>
 801161c:	0758      	lsls	r0, r3, #29
 801161e:	d512      	bpl.n	8011646 <__swsetup_r+0x7a>
 8011620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011622:	b141      	cbz	r1, 8011636 <__swsetup_r+0x6a>
 8011624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011628:	4299      	cmp	r1, r3
 801162a:	d002      	beq.n	8011632 <__swsetup_r+0x66>
 801162c:	4630      	mov	r0, r6
 801162e:	f7ff f88d 	bl	801074c <_free_r>
 8011632:	2300      	movs	r3, #0
 8011634:	6363      	str	r3, [r4, #52]	; 0x34
 8011636:	89a3      	ldrh	r3, [r4, #12]
 8011638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801163c:	81a3      	strh	r3, [r4, #12]
 801163e:	2300      	movs	r3, #0
 8011640:	6063      	str	r3, [r4, #4]
 8011642:	6923      	ldr	r3, [r4, #16]
 8011644:	6023      	str	r3, [r4, #0]
 8011646:	89a3      	ldrh	r3, [r4, #12]
 8011648:	f043 0308 	orr.w	r3, r3, #8
 801164c:	81a3      	strh	r3, [r4, #12]
 801164e:	6923      	ldr	r3, [r4, #16]
 8011650:	b94b      	cbnz	r3, 8011666 <__swsetup_r+0x9a>
 8011652:	89a3      	ldrh	r3, [r4, #12]
 8011654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801165c:	d003      	beq.n	8011666 <__swsetup_r+0x9a>
 801165e:	4621      	mov	r1, r4
 8011660:	4630      	mov	r0, r6
 8011662:	f001 f87f 	bl	8012764 <__smakebuf_r>
 8011666:	89a0      	ldrh	r0, [r4, #12]
 8011668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801166c:	f010 0301 	ands.w	r3, r0, #1
 8011670:	d00a      	beq.n	8011688 <__swsetup_r+0xbc>
 8011672:	2300      	movs	r3, #0
 8011674:	60a3      	str	r3, [r4, #8]
 8011676:	6963      	ldr	r3, [r4, #20]
 8011678:	425b      	negs	r3, r3
 801167a:	61a3      	str	r3, [r4, #24]
 801167c:	6923      	ldr	r3, [r4, #16]
 801167e:	b943      	cbnz	r3, 8011692 <__swsetup_r+0xc6>
 8011680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011684:	d1ba      	bne.n	80115fc <__swsetup_r+0x30>
 8011686:	bd70      	pop	{r4, r5, r6, pc}
 8011688:	0781      	lsls	r1, r0, #30
 801168a:	bf58      	it	pl
 801168c:	6963      	ldrpl	r3, [r4, #20]
 801168e:	60a3      	str	r3, [r4, #8]
 8011690:	e7f4      	b.n	801167c <__swsetup_r+0xb0>
 8011692:	2000      	movs	r0, #0
 8011694:	e7f7      	b.n	8011686 <__swsetup_r+0xba>
 8011696:	bf00      	nop
 8011698:	2000004c 	.word	0x2000004c
 801169c:	0801423c 	.word	0x0801423c
 80116a0:	0801425c 	.word	0x0801425c
 80116a4:	0801421c 	.word	0x0801421c

080116a8 <quorem>:
 80116a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ac:	6903      	ldr	r3, [r0, #16]
 80116ae:	690c      	ldr	r4, [r1, #16]
 80116b0:	42a3      	cmp	r3, r4
 80116b2:	4607      	mov	r7, r0
 80116b4:	f2c0 8081 	blt.w	80117ba <quorem+0x112>
 80116b8:	3c01      	subs	r4, #1
 80116ba:	f101 0814 	add.w	r8, r1, #20
 80116be:	f100 0514 	add.w	r5, r0, #20
 80116c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80116c6:	9301      	str	r3, [sp, #4]
 80116c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80116cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80116d0:	3301      	adds	r3, #1
 80116d2:	429a      	cmp	r2, r3
 80116d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80116d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80116dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80116e0:	d331      	bcc.n	8011746 <quorem+0x9e>
 80116e2:	f04f 0e00 	mov.w	lr, #0
 80116e6:	4640      	mov	r0, r8
 80116e8:	46ac      	mov	ip, r5
 80116ea:	46f2      	mov	sl, lr
 80116ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80116f0:	b293      	uxth	r3, r2
 80116f2:	fb06 e303 	mla	r3, r6, r3, lr
 80116f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	ebaa 0303 	sub.w	r3, sl, r3
 8011700:	f8dc a000 	ldr.w	sl, [ip]
 8011704:	0c12      	lsrs	r2, r2, #16
 8011706:	fa13 f38a 	uxtah	r3, r3, sl
 801170a:	fb06 e202 	mla	r2, r6, r2, lr
 801170e:	9300      	str	r3, [sp, #0]
 8011710:	9b00      	ldr	r3, [sp, #0]
 8011712:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011716:	b292      	uxth	r2, r2
 8011718:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801171c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011720:	f8bd 3000 	ldrh.w	r3, [sp]
 8011724:	4581      	cmp	r9, r0
 8011726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801172a:	f84c 3b04 	str.w	r3, [ip], #4
 801172e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011732:	d2db      	bcs.n	80116ec <quorem+0x44>
 8011734:	f855 300b 	ldr.w	r3, [r5, fp]
 8011738:	b92b      	cbnz	r3, 8011746 <quorem+0x9e>
 801173a:	9b01      	ldr	r3, [sp, #4]
 801173c:	3b04      	subs	r3, #4
 801173e:	429d      	cmp	r5, r3
 8011740:	461a      	mov	r2, r3
 8011742:	d32e      	bcc.n	80117a2 <quorem+0xfa>
 8011744:	613c      	str	r4, [r7, #16]
 8011746:	4638      	mov	r0, r7
 8011748:	f001 fada 	bl	8012d00 <__mcmp>
 801174c:	2800      	cmp	r0, #0
 801174e:	db24      	blt.n	801179a <quorem+0xf2>
 8011750:	3601      	adds	r6, #1
 8011752:	4628      	mov	r0, r5
 8011754:	f04f 0c00 	mov.w	ip, #0
 8011758:	f858 2b04 	ldr.w	r2, [r8], #4
 801175c:	f8d0 e000 	ldr.w	lr, [r0]
 8011760:	b293      	uxth	r3, r2
 8011762:	ebac 0303 	sub.w	r3, ip, r3
 8011766:	0c12      	lsrs	r2, r2, #16
 8011768:	fa13 f38e 	uxtah	r3, r3, lr
 801176c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011770:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011774:	b29b      	uxth	r3, r3
 8011776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801177a:	45c1      	cmp	r9, r8
 801177c:	f840 3b04 	str.w	r3, [r0], #4
 8011780:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011784:	d2e8      	bcs.n	8011758 <quorem+0xb0>
 8011786:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801178a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801178e:	b922      	cbnz	r2, 801179a <quorem+0xf2>
 8011790:	3b04      	subs	r3, #4
 8011792:	429d      	cmp	r5, r3
 8011794:	461a      	mov	r2, r3
 8011796:	d30a      	bcc.n	80117ae <quorem+0x106>
 8011798:	613c      	str	r4, [r7, #16]
 801179a:	4630      	mov	r0, r6
 801179c:	b003      	add	sp, #12
 801179e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117a2:	6812      	ldr	r2, [r2, #0]
 80117a4:	3b04      	subs	r3, #4
 80117a6:	2a00      	cmp	r2, #0
 80117a8:	d1cc      	bne.n	8011744 <quorem+0x9c>
 80117aa:	3c01      	subs	r4, #1
 80117ac:	e7c7      	b.n	801173e <quorem+0x96>
 80117ae:	6812      	ldr	r2, [r2, #0]
 80117b0:	3b04      	subs	r3, #4
 80117b2:	2a00      	cmp	r2, #0
 80117b4:	d1f0      	bne.n	8011798 <quorem+0xf0>
 80117b6:	3c01      	subs	r4, #1
 80117b8:	e7eb      	b.n	8011792 <quorem+0xea>
 80117ba:	2000      	movs	r0, #0
 80117bc:	e7ee      	b.n	801179c <quorem+0xf4>
	...

080117c0 <_dtoa_r>:
 80117c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c4:	ed2d 8b04 	vpush	{d8-d9}
 80117c8:	ec57 6b10 	vmov	r6, r7, d0
 80117cc:	b093      	sub	sp, #76	; 0x4c
 80117ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80117d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80117d4:	9106      	str	r1, [sp, #24]
 80117d6:	ee10 aa10 	vmov	sl, s0
 80117da:	4604      	mov	r4, r0
 80117dc:	9209      	str	r2, [sp, #36]	; 0x24
 80117de:	930c      	str	r3, [sp, #48]	; 0x30
 80117e0:	46bb      	mov	fp, r7
 80117e2:	b975      	cbnz	r5, 8011802 <_dtoa_r+0x42>
 80117e4:	2010      	movs	r0, #16
 80117e6:	f7fe ff8b 	bl	8010700 <malloc>
 80117ea:	4602      	mov	r2, r0
 80117ec:	6260      	str	r0, [r4, #36]	; 0x24
 80117ee:	b920      	cbnz	r0, 80117fa <_dtoa_r+0x3a>
 80117f0:	4ba7      	ldr	r3, [pc, #668]	; (8011a90 <_dtoa_r+0x2d0>)
 80117f2:	21ea      	movs	r1, #234	; 0xea
 80117f4:	48a7      	ldr	r0, [pc, #668]	; (8011a94 <_dtoa_r+0x2d4>)
 80117f6:	f001 fea7 	bl	8013548 <__assert_func>
 80117fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80117fe:	6005      	str	r5, [r0, #0]
 8011800:	60c5      	str	r5, [r0, #12]
 8011802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011804:	6819      	ldr	r1, [r3, #0]
 8011806:	b151      	cbz	r1, 801181e <_dtoa_r+0x5e>
 8011808:	685a      	ldr	r2, [r3, #4]
 801180a:	604a      	str	r2, [r1, #4]
 801180c:	2301      	movs	r3, #1
 801180e:	4093      	lsls	r3, r2
 8011810:	608b      	str	r3, [r1, #8]
 8011812:	4620      	mov	r0, r4
 8011814:	f001 f832 	bl	801287c <_Bfree>
 8011818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801181a:	2200      	movs	r2, #0
 801181c:	601a      	str	r2, [r3, #0]
 801181e:	1e3b      	subs	r3, r7, #0
 8011820:	bfaa      	itet	ge
 8011822:	2300      	movge	r3, #0
 8011824:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011828:	f8c8 3000 	strge.w	r3, [r8]
 801182c:	4b9a      	ldr	r3, [pc, #616]	; (8011a98 <_dtoa_r+0x2d8>)
 801182e:	bfbc      	itt	lt
 8011830:	2201      	movlt	r2, #1
 8011832:	f8c8 2000 	strlt.w	r2, [r8]
 8011836:	ea33 030b 	bics.w	r3, r3, fp
 801183a:	d11b      	bne.n	8011874 <_dtoa_r+0xb4>
 801183c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801183e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011842:	6013      	str	r3, [r2, #0]
 8011844:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011848:	4333      	orrs	r3, r6
 801184a:	f000 8592 	beq.w	8012372 <_dtoa_r+0xbb2>
 801184e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011850:	b963      	cbnz	r3, 801186c <_dtoa_r+0xac>
 8011852:	4b92      	ldr	r3, [pc, #584]	; (8011a9c <_dtoa_r+0x2dc>)
 8011854:	e022      	b.n	801189c <_dtoa_r+0xdc>
 8011856:	4b92      	ldr	r3, [pc, #584]	; (8011aa0 <_dtoa_r+0x2e0>)
 8011858:	9301      	str	r3, [sp, #4]
 801185a:	3308      	adds	r3, #8
 801185c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801185e:	6013      	str	r3, [r2, #0]
 8011860:	9801      	ldr	r0, [sp, #4]
 8011862:	b013      	add	sp, #76	; 0x4c
 8011864:	ecbd 8b04 	vpop	{d8-d9}
 8011868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801186c:	4b8b      	ldr	r3, [pc, #556]	; (8011a9c <_dtoa_r+0x2dc>)
 801186e:	9301      	str	r3, [sp, #4]
 8011870:	3303      	adds	r3, #3
 8011872:	e7f3      	b.n	801185c <_dtoa_r+0x9c>
 8011874:	2200      	movs	r2, #0
 8011876:	2300      	movs	r3, #0
 8011878:	4650      	mov	r0, sl
 801187a:	4659      	mov	r1, fp
 801187c:	f7ef f934 	bl	8000ae8 <__aeabi_dcmpeq>
 8011880:	ec4b ab19 	vmov	d9, sl, fp
 8011884:	4680      	mov	r8, r0
 8011886:	b158      	cbz	r0, 80118a0 <_dtoa_r+0xe0>
 8011888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801188a:	2301      	movs	r3, #1
 801188c:	6013      	str	r3, [r2, #0]
 801188e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011890:	2b00      	cmp	r3, #0
 8011892:	f000 856b 	beq.w	801236c <_dtoa_r+0xbac>
 8011896:	4883      	ldr	r0, [pc, #524]	; (8011aa4 <_dtoa_r+0x2e4>)
 8011898:	6018      	str	r0, [r3, #0]
 801189a:	1e43      	subs	r3, r0, #1
 801189c:	9301      	str	r3, [sp, #4]
 801189e:	e7df      	b.n	8011860 <_dtoa_r+0xa0>
 80118a0:	ec4b ab10 	vmov	d0, sl, fp
 80118a4:	aa10      	add	r2, sp, #64	; 0x40
 80118a6:	a911      	add	r1, sp, #68	; 0x44
 80118a8:	4620      	mov	r0, r4
 80118aa:	f001 facf 	bl	8012e4c <__d2b>
 80118ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80118b2:	ee08 0a10 	vmov	s16, r0
 80118b6:	2d00      	cmp	r5, #0
 80118b8:	f000 8084 	beq.w	80119c4 <_dtoa_r+0x204>
 80118bc:	ee19 3a90 	vmov	r3, s19
 80118c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80118c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80118c8:	4656      	mov	r6, sl
 80118ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80118ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80118d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80118d6:	4b74      	ldr	r3, [pc, #464]	; (8011aa8 <_dtoa_r+0x2e8>)
 80118d8:	2200      	movs	r2, #0
 80118da:	4630      	mov	r0, r6
 80118dc:	4639      	mov	r1, r7
 80118de:	f7ee fce3 	bl	80002a8 <__aeabi_dsub>
 80118e2:	a365      	add	r3, pc, #404	; (adr r3, 8011a78 <_dtoa_r+0x2b8>)
 80118e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e8:	f7ee fe96 	bl	8000618 <__aeabi_dmul>
 80118ec:	a364      	add	r3, pc, #400	; (adr r3, 8011a80 <_dtoa_r+0x2c0>)
 80118ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f2:	f7ee fcdb 	bl	80002ac <__adddf3>
 80118f6:	4606      	mov	r6, r0
 80118f8:	4628      	mov	r0, r5
 80118fa:	460f      	mov	r7, r1
 80118fc:	f7ee fe22 	bl	8000544 <__aeabi_i2d>
 8011900:	a361      	add	r3, pc, #388	; (adr r3, 8011a88 <_dtoa_r+0x2c8>)
 8011902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011906:	f7ee fe87 	bl	8000618 <__aeabi_dmul>
 801190a:	4602      	mov	r2, r0
 801190c:	460b      	mov	r3, r1
 801190e:	4630      	mov	r0, r6
 8011910:	4639      	mov	r1, r7
 8011912:	f7ee fccb 	bl	80002ac <__adddf3>
 8011916:	4606      	mov	r6, r0
 8011918:	460f      	mov	r7, r1
 801191a:	f7ef f92d 	bl	8000b78 <__aeabi_d2iz>
 801191e:	2200      	movs	r2, #0
 8011920:	9000      	str	r0, [sp, #0]
 8011922:	2300      	movs	r3, #0
 8011924:	4630      	mov	r0, r6
 8011926:	4639      	mov	r1, r7
 8011928:	f7ef f8e8 	bl	8000afc <__aeabi_dcmplt>
 801192c:	b150      	cbz	r0, 8011944 <_dtoa_r+0x184>
 801192e:	9800      	ldr	r0, [sp, #0]
 8011930:	f7ee fe08 	bl	8000544 <__aeabi_i2d>
 8011934:	4632      	mov	r2, r6
 8011936:	463b      	mov	r3, r7
 8011938:	f7ef f8d6 	bl	8000ae8 <__aeabi_dcmpeq>
 801193c:	b910      	cbnz	r0, 8011944 <_dtoa_r+0x184>
 801193e:	9b00      	ldr	r3, [sp, #0]
 8011940:	3b01      	subs	r3, #1
 8011942:	9300      	str	r3, [sp, #0]
 8011944:	9b00      	ldr	r3, [sp, #0]
 8011946:	2b16      	cmp	r3, #22
 8011948:	d85a      	bhi.n	8011a00 <_dtoa_r+0x240>
 801194a:	9a00      	ldr	r2, [sp, #0]
 801194c:	4b57      	ldr	r3, [pc, #348]	; (8011aac <_dtoa_r+0x2ec>)
 801194e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011956:	ec51 0b19 	vmov	r0, r1, d9
 801195a:	f7ef f8cf 	bl	8000afc <__aeabi_dcmplt>
 801195e:	2800      	cmp	r0, #0
 8011960:	d050      	beq.n	8011a04 <_dtoa_r+0x244>
 8011962:	9b00      	ldr	r3, [sp, #0]
 8011964:	3b01      	subs	r3, #1
 8011966:	9300      	str	r3, [sp, #0]
 8011968:	2300      	movs	r3, #0
 801196a:	930b      	str	r3, [sp, #44]	; 0x2c
 801196c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801196e:	1b5d      	subs	r5, r3, r5
 8011970:	1e6b      	subs	r3, r5, #1
 8011972:	9305      	str	r3, [sp, #20]
 8011974:	bf45      	ittet	mi
 8011976:	f1c5 0301 	rsbmi	r3, r5, #1
 801197a:	9304      	strmi	r3, [sp, #16]
 801197c:	2300      	movpl	r3, #0
 801197e:	2300      	movmi	r3, #0
 8011980:	bf4c      	ite	mi
 8011982:	9305      	strmi	r3, [sp, #20]
 8011984:	9304      	strpl	r3, [sp, #16]
 8011986:	9b00      	ldr	r3, [sp, #0]
 8011988:	2b00      	cmp	r3, #0
 801198a:	db3d      	blt.n	8011a08 <_dtoa_r+0x248>
 801198c:	9b05      	ldr	r3, [sp, #20]
 801198e:	9a00      	ldr	r2, [sp, #0]
 8011990:	920a      	str	r2, [sp, #40]	; 0x28
 8011992:	4413      	add	r3, r2
 8011994:	9305      	str	r3, [sp, #20]
 8011996:	2300      	movs	r3, #0
 8011998:	9307      	str	r3, [sp, #28]
 801199a:	9b06      	ldr	r3, [sp, #24]
 801199c:	2b09      	cmp	r3, #9
 801199e:	f200 8089 	bhi.w	8011ab4 <_dtoa_r+0x2f4>
 80119a2:	2b05      	cmp	r3, #5
 80119a4:	bfc4      	itt	gt
 80119a6:	3b04      	subgt	r3, #4
 80119a8:	9306      	strgt	r3, [sp, #24]
 80119aa:	9b06      	ldr	r3, [sp, #24]
 80119ac:	f1a3 0302 	sub.w	r3, r3, #2
 80119b0:	bfcc      	ite	gt
 80119b2:	2500      	movgt	r5, #0
 80119b4:	2501      	movle	r5, #1
 80119b6:	2b03      	cmp	r3, #3
 80119b8:	f200 8087 	bhi.w	8011aca <_dtoa_r+0x30a>
 80119bc:	e8df f003 	tbb	[pc, r3]
 80119c0:	59383a2d 	.word	0x59383a2d
 80119c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80119c8:	441d      	add	r5, r3
 80119ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80119ce:	2b20      	cmp	r3, #32
 80119d0:	bfc1      	itttt	gt
 80119d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80119d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80119da:	fa0b f303 	lslgt.w	r3, fp, r3
 80119de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80119e2:	bfda      	itte	le
 80119e4:	f1c3 0320 	rsble	r3, r3, #32
 80119e8:	fa06 f003 	lslle.w	r0, r6, r3
 80119ec:	4318      	orrgt	r0, r3
 80119ee:	f7ee fd99 	bl	8000524 <__aeabi_ui2d>
 80119f2:	2301      	movs	r3, #1
 80119f4:	4606      	mov	r6, r0
 80119f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80119fa:	3d01      	subs	r5, #1
 80119fc:	930e      	str	r3, [sp, #56]	; 0x38
 80119fe:	e76a      	b.n	80118d6 <_dtoa_r+0x116>
 8011a00:	2301      	movs	r3, #1
 8011a02:	e7b2      	b.n	801196a <_dtoa_r+0x1aa>
 8011a04:	900b      	str	r0, [sp, #44]	; 0x2c
 8011a06:	e7b1      	b.n	801196c <_dtoa_r+0x1ac>
 8011a08:	9b04      	ldr	r3, [sp, #16]
 8011a0a:	9a00      	ldr	r2, [sp, #0]
 8011a0c:	1a9b      	subs	r3, r3, r2
 8011a0e:	9304      	str	r3, [sp, #16]
 8011a10:	4253      	negs	r3, r2
 8011a12:	9307      	str	r3, [sp, #28]
 8011a14:	2300      	movs	r3, #0
 8011a16:	930a      	str	r3, [sp, #40]	; 0x28
 8011a18:	e7bf      	b.n	801199a <_dtoa_r+0x1da>
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	9308      	str	r3, [sp, #32]
 8011a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	dc55      	bgt.n	8011ad0 <_dtoa_r+0x310>
 8011a24:	2301      	movs	r3, #1
 8011a26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011a2a:	461a      	mov	r2, r3
 8011a2c:	9209      	str	r2, [sp, #36]	; 0x24
 8011a2e:	e00c      	b.n	8011a4a <_dtoa_r+0x28a>
 8011a30:	2301      	movs	r3, #1
 8011a32:	e7f3      	b.n	8011a1c <_dtoa_r+0x25c>
 8011a34:	2300      	movs	r3, #0
 8011a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a38:	9308      	str	r3, [sp, #32]
 8011a3a:	9b00      	ldr	r3, [sp, #0]
 8011a3c:	4413      	add	r3, r2
 8011a3e:	9302      	str	r3, [sp, #8]
 8011a40:	3301      	adds	r3, #1
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	9303      	str	r3, [sp, #12]
 8011a46:	bfb8      	it	lt
 8011a48:	2301      	movlt	r3, #1
 8011a4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	6042      	str	r2, [r0, #4]
 8011a50:	2204      	movs	r2, #4
 8011a52:	f102 0614 	add.w	r6, r2, #20
 8011a56:	429e      	cmp	r6, r3
 8011a58:	6841      	ldr	r1, [r0, #4]
 8011a5a:	d93d      	bls.n	8011ad8 <_dtoa_r+0x318>
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f000 fecd 	bl	80127fc <_Balloc>
 8011a62:	9001      	str	r0, [sp, #4]
 8011a64:	2800      	cmp	r0, #0
 8011a66:	d13b      	bne.n	8011ae0 <_dtoa_r+0x320>
 8011a68:	4b11      	ldr	r3, [pc, #68]	; (8011ab0 <_dtoa_r+0x2f0>)
 8011a6a:	4602      	mov	r2, r0
 8011a6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011a70:	e6c0      	b.n	80117f4 <_dtoa_r+0x34>
 8011a72:	2301      	movs	r3, #1
 8011a74:	e7df      	b.n	8011a36 <_dtoa_r+0x276>
 8011a76:	bf00      	nop
 8011a78:	636f4361 	.word	0x636f4361
 8011a7c:	3fd287a7 	.word	0x3fd287a7
 8011a80:	8b60c8b3 	.word	0x8b60c8b3
 8011a84:	3fc68a28 	.word	0x3fc68a28
 8011a88:	509f79fb 	.word	0x509f79fb
 8011a8c:	3fd34413 	.word	0x3fd34413
 8011a90:	08014196 	.word	0x08014196
 8011a94:	080141ad 	.word	0x080141ad
 8011a98:	7ff00000 	.word	0x7ff00000
 8011a9c:	08014192 	.word	0x08014192
 8011aa0:	08014189 	.word	0x08014189
 8011aa4:	08014065 	.word	0x08014065
 8011aa8:	3ff80000 	.word	0x3ff80000
 8011aac:	08014300 	.word	0x08014300
 8011ab0:	08014208 	.word	0x08014208
 8011ab4:	2501      	movs	r5, #1
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	9306      	str	r3, [sp, #24]
 8011aba:	9508      	str	r5, [sp, #32]
 8011abc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ac0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	2312      	movs	r3, #18
 8011ac8:	e7b0      	b.n	8011a2c <_dtoa_r+0x26c>
 8011aca:	2301      	movs	r3, #1
 8011acc:	9308      	str	r3, [sp, #32]
 8011ace:	e7f5      	b.n	8011abc <_dtoa_r+0x2fc>
 8011ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ad2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011ad6:	e7b8      	b.n	8011a4a <_dtoa_r+0x28a>
 8011ad8:	3101      	adds	r1, #1
 8011ada:	6041      	str	r1, [r0, #4]
 8011adc:	0052      	lsls	r2, r2, #1
 8011ade:	e7b8      	b.n	8011a52 <_dtoa_r+0x292>
 8011ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ae2:	9a01      	ldr	r2, [sp, #4]
 8011ae4:	601a      	str	r2, [r3, #0]
 8011ae6:	9b03      	ldr	r3, [sp, #12]
 8011ae8:	2b0e      	cmp	r3, #14
 8011aea:	f200 809d 	bhi.w	8011c28 <_dtoa_r+0x468>
 8011aee:	2d00      	cmp	r5, #0
 8011af0:	f000 809a 	beq.w	8011c28 <_dtoa_r+0x468>
 8011af4:	9b00      	ldr	r3, [sp, #0]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	dd32      	ble.n	8011b60 <_dtoa_r+0x3a0>
 8011afa:	4ab7      	ldr	r2, [pc, #732]	; (8011dd8 <_dtoa_r+0x618>)
 8011afc:	f003 030f 	and.w	r3, r3, #15
 8011b00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011b04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011b08:	9b00      	ldr	r3, [sp, #0]
 8011b0a:	05d8      	lsls	r0, r3, #23
 8011b0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011b10:	d516      	bpl.n	8011b40 <_dtoa_r+0x380>
 8011b12:	4bb2      	ldr	r3, [pc, #712]	; (8011ddc <_dtoa_r+0x61c>)
 8011b14:	ec51 0b19 	vmov	r0, r1, d9
 8011b18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011b1c:	f7ee fea6 	bl	800086c <__aeabi_ddiv>
 8011b20:	f007 070f 	and.w	r7, r7, #15
 8011b24:	4682      	mov	sl, r0
 8011b26:	468b      	mov	fp, r1
 8011b28:	2503      	movs	r5, #3
 8011b2a:	4eac      	ldr	r6, [pc, #688]	; (8011ddc <_dtoa_r+0x61c>)
 8011b2c:	b957      	cbnz	r7, 8011b44 <_dtoa_r+0x384>
 8011b2e:	4642      	mov	r2, r8
 8011b30:	464b      	mov	r3, r9
 8011b32:	4650      	mov	r0, sl
 8011b34:	4659      	mov	r1, fp
 8011b36:	f7ee fe99 	bl	800086c <__aeabi_ddiv>
 8011b3a:	4682      	mov	sl, r0
 8011b3c:	468b      	mov	fp, r1
 8011b3e:	e028      	b.n	8011b92 <_dtoa_r+0x3d2>
 8011b40:	2502      	movs	r5, #2
 8011b42:	e7f2      	b.n	8011b2a <_dtoa_r+0x36a>
 8011b44:	07f9      	lsls	r1, r7, #31
 8011b46:	d508      	bpl.n	8011b5a <_dtoa_r+0x39a>
 8011b48:	4640      	mov	r0, r8
 8011b4a:	4649      	mov	r1, r9
 8011b4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011b50:	f7ee fd62 	bl	8000618 <__aeabi_dmul>
 8011b54:	3501      	adds	r5, #1
 8011b56:	4680      	mov	r8, r0
 8011b58:	4689      	mov	r9, r1
 8011b5a:	107f      	asrs	r7, r7, #1
 8011b5c:	3608      	adds	r6, #8
 8011b5e:	e7e5      	b.n	8011b2c <_dtoa_r+0x36c>
 8011b60:	f000 809b 	beq.w	8011c9a <_dtoa_r+0x4da>
 8011b64:	9b00      	ldr	r3, [sp, #0]
 8011b66:	4f9d      	ldr	r7, [pc, #628]	; (8011ddc <_dtoa_r+0x61c>)
 8011b68:	425e      	negs	r6, r3
 8011b6a:	4b9b      	ldr	r3, [pc, #620]	; (8011dd8 <_dtoa_r+0x618>)
 8011b6c:	f006 020f 	and.w	r2, r6, #15
 8011b70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b78:	ec51 0b19 	vmov	r0, r1, d9
 8011b7c:	f7ee fd4c 	bl	8000618 <__aeabi_dmul>
 8011b80:	1136      	asrs	r6, r6, #4
 8011b82:	4682      	mov	sl, r0
 8011b84:	468b      	mov	fp, r1
 8011b86:	2300      	movs	r3, #0
 8011b88:	2502      	movs	r5, #2
 8011b8a:	2e00      	cmp	r6, #0
 8011b8c:	d17a      	bne.n	8011c84 <_dtoa_r+0x4c4>
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d1d3      	bne.n	8011b3a <_dtoa_r+0x37a>
 8011b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	f000 8082 	beq.w	8011c9e <_dtoa_r+0x4de>
 8011b9a:	4b91      	ldr	r3, [pc, #580]	; (8011de0 <_dtoa_r+0x620>)
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	4650      	mov	r0, sl
 8011ba0:	4659      	mov	r1, fp
 8011ba2:	f7ee ffab 	bl	8000afc <__aeabi_dcmplt>
 8011ba6:	2800      	cmp	r0, #0
 8011ba8:	d079      	beq.n	8011c9e <_dtoa_r+0x4de>
 8011baa:	9b03      	ldr	r3, [sp, #12]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d076      	beq.n	8011c9e <_dtoa_r+0x4de>
 8011bb0:	9b02      	ldr	r3, [sp, #8]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	dd36      	ble.n	8011c24 <_dtoa_r+0x464>
 8011bb6:	9b00      	ldr	r3, [sp, #0]
 8011bb8:	4650      	mov	r0, sl
 8011bba:	4659      	mov	r1, fp
 8011bbc:	1e5f      	subs	r7, r3, #1
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	4b88      	ldr	r3, [pc, #544]	; (8011de4 <_dtoa_r+0x624>)
 8011bc2:	f7ee fd29 	bl	8000618 <__aeabi_dmul>
 8011bc6:	9e02      	ldr	r6, [sp, #8]
 8011bc8:	4682      	mov	sl, r0
 8011bca:	468b      	mov	fp, r1
 8011bcc:	3501      	adds	r5, #1
 8011bce:	4628      	mov	r0, r5
 8011bd0:	f7ee fcb8 	bl	8000544 <__aeabi_i2d>
 8011bd4:	4652      	mov	r2, sl
 8011bd6:	465b      	mov	r3, fp
 8011bd8:	f7ee fd1e 	bl	8000618 <__aeabi_dmul>
 8011bdc:	4b82      	ldr	r3, [pc, #520]	; (8011de8 <_dtoa_r+0x628>)
 8011bde:	2200      	movs	r2, #0
 8011be0:	f7ee fb64 	bl	80002ac <__adddf3>
 8011be4:	46d0      	mov	r8, sl
 8011be6:	46d9      	mov	r9, fp
 8011be8:	4682      	mov	sl, r0
 8011bea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011bee:	2e00      	cmp	r6, #0
 8011bf0:	d158      	bne.n	8011ca4 <_dtoa_r+0x4e4>
 8011bf2:	4b7e      	ldr	r3, [pc, #504]	; (8011dec <_dtoa_r+0x62c>)
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	4640      	mov	r0, r8
 8011bf8:	4649      	mov	r1, r9
 8011bfa:	f7ee fb55 	bl	80002a8 <__aeabi_dsub>
 8011bfe:	4652      	mov	r2, sl
 8011c00:	465b      	mov	r3, fp
 8011c02:	4680      	mov	r8, r0
 8011c04:	4689      	mov	r9, r1
 8011c06:	f7ee ff97 	bl	8000b38 <__aeabi_dcmpgt>
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	f040 8295 	bne.w	801213a <_dtoa_r+0x97a>
 8011c10:	4652      	mov	r2, sl
 8011c12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011c16:	4640      	mov	r0, r8
 8011c18:	4649      	mov	r1, r9
 8011c1a:	f7ee ff6f 	bl	8000afc <__aeabi_dcmplt>
 8011c1e:	2800      	cmp	r0, #0
 8011c20:	f040 8289 	bne.w	8012136 <_dtoa_r+0x976>
 8011c24:	ec5b ab19 	vmov	sl, fp, d9
 8011c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	f2c0 8148 	blt.w	8011ec0 <_dtoa_r+0x700>
 8011c30:	9a00      	ldr	r2, [sp, #0]
 8011c32:	2a0e      	cmp	r2, #14
 8011c34:	f300 8144 	bgt.w	8011ec0 <_dtoa_r+0x700>
 8011c38:	4b67      	ldr	r3, [pc, #412]	; (8011dd8 <_dtoa_r+0x618>)
 8011c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	f280 80d5 	bge.w	8011df4 <_dtoa_r+0x634>
 8011c4a:	9b03      	ldr	r3, [sp, #12]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	f300 80d1 	bgt.w	8011df4 <_dtoa_r+0x634>
 8011c52:	f040 826f 	bne.w	8012134 <_dtoa_r+0x974>
 8011c56:	4b65      	ldr	r3, [pc, #404]	; (8011dec <_dtoa_r+0x62c>)
 8011c58:	2200      	movs	r2, #0
 8011c5a:	4640      	mov	r0, r8
 8011c5c:	4649      	mov	r1, r9
 8011c5e:	f7ee fcdb 	bl	8000618 <__aeabi_dmul>
 8011c62:	4652      	mov	r2, sl
 8011c64:	465b      	mov	r3, fp
 8011c66:	f7ee ff5d 	bl	8000b24 <__aeabi_dcmpge>
 8011c6a:	9e03      	ldr	r6, [sp, #12]
 8011c6c:	4637      	mov	r7, r6
 8011c6e:	2800      	cmp	r0, #0
 8011c70:	f040 8245 	bne.w	80120fe <_dtoa_r+0x93e>
 8011c74:	9d01      	ldr	r5, [sp, #4]
 8011c76:	2331      	movs	r3, #49	; 0x31
 8011c78:	f805 3b01 	strb.w	r3, [r5], #1
 8011c7c:	9b00      	ldr	r3, [sp, #0]
 8011c7e:	3301      	adds	r3, #1
 8011c80:	9300      	str	r3, [sp, #0]
 8011c82:	e240      	b.n	8012106 <_dtoa_r+0x946>
 8011c84:	07f2      	lsls	r2, r6, #31
 8011c86:	d505      	bpl.n	8011c94 <_dtoa_r+0x4d4>
 8011c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c8c:	f7ee fcc4 	bl	8000618 <__aeabi_dmul>
 8011c90:	3501      	adds	r5, #1
 8011c92:	2301      	movs	r3, #1
 8011c94:	1076      	asrs	r6, r6, #1
 8011c96:	3708      	adds	r7, #8
 8011c98:	e777      	b.n	8011b8a <_dtoa_r+0x3ca>
 8011c9a:	2502      	movs	r5, #2
 8011c9c:	e779      	b.n	8011b92 <_dtoa_r+0x3d2>
 8011c9e:	9f00      	ldr	r7, [sp, #0]
 8011ca0:	9e03      	ldr	r6, [sp, #12]
 8011ca2:	e794      	b.n	8011bce <_dtoa_r+0x40e>
 8011ca4:	9901      	ldr	r1, [sp, #4]
 8011ca6:	4b4c      	ldr	r3, [pc, #304]	; (8011dd8 <_dtoa_r+0x618>)
 8011ca8:	4431      	add	r1, r6
 8011caa:	910d      	str	r1, [sp, #52]	; 0x34
 8011cac:	9908      	ldr	r1, [sp, #32]
 8011cae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011cb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011cb6:	2900      	cmp	r1, #0
 8011cb8:	d043      	beq.n	8011d42 <_dtoa_r+0x582>
 8011cba:	494d      	ldr	r1, [pc, #308]	; (8011df0 <_dtoa_r+0x630>)
 8011cbc:	2000      	movs	r0, #0
 8011cbe:	f7ee fdd5 	bl	800086c <__aeabi_ddiv>
 8011cc2:	4652      	mov	r2, sl
 8011cc4:	465b      	mov	r3, fp
 8011cc6:	f7ee faef 	bl	80002a8 <__aeabi_dsub>
 8011cca:	9d01      	ldr	r5, [sp, #4]
 8011ccc:	4682      	mov	sl, r0
 8011cce:	468b      	mov	fp, r1
 8011cd0:	4649      	mov	r1, r9
 8011cd2:	4640      	mov	r0, r8
 8011cd4:	f7ee ff50 	bl	8000b78 <__aeabi_d2iz>
 8011cd8:	4606      	mov	r6, r0
 8011cda:	f7ee fc33 	bl	8000544 <__aeabi_i2d>
 8011cde:	4602      	mov	r2, r0
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	4640      	mov	r0, r8
 8011ce4:	4649      	mov	r1, r9
 8011ce6:	f7ee fadf 	bl	80002a8 <__aeabi_dsub>
 8011cea:	3630      	adds	r6, #48	; 0x30
 8011cec:	f805 6b01 	strb.w	r6, [r5], #1
 8011cf0:	4652      	mov	r2, sl
 8011cf2:	465b      	mov	r3, fp
 8011cf4:	4680      	mov	r8, r0
 8011cf6:	4689      	mov	r9, r1
 8011cf8:	f7ee ff00 	bl	8000afc <__aeabi_dcmplt>
 8011cfc:	2800      	cmp	r0, #0
 8011cfe:	d163      	bne.n	8011dc8 <_dtoa_r+0x608>
 8011d00:	4642      	mov	r2, r8
 8011d02:	464b      	mov	r3, r9
 8011d04:	4936      	ldr	r1, [pc, #216]	; (8011de0 <_dtoa_r+0x620>)
 8011d06:	2000      	movs	r0, #0
 8011d08:	f7ee face 	bl	80002a8 <__aeabi_dsub>
 8011d0c:	4652      	mov	r2, sl
 8011d0e:	465b      	mov	r3, fp
 8011d10:	f7ee fef4 	bl	8000afc <__aeabi_dcmplt>
 8011d14:	2800      	cmp	r0, #0
 8011d16:	f040 80b5 	bne.w	8011e84 <_dtoa_r+0x6c4>
 8011d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d1c:	429d      	cmp	r5, r3
 8011d1e:	d081      	beq.n	8011c24 <_dtoa_r+0x464>
 8011d20:	4b30      	ldr	r3, [pc, #192]	; (8011de4 <_dtoa_r+0x624>)
 8011d22:	2200      	movs	r2, #0
 8011d24:	4650      	mov	r0, sl
 8011d26:	4659      	mov	r1, fp
 8011d28:	f7ee fc76 	bl	8000618 <__aeabi_dmul>
 8011d2c:	4b2d      	ldr	r3, [pc, #180]	; (8011de4 <_dtoa_r+0x624>)
 8011d2e:	4682      	mov	sl, r0
 8011d30:	468b      	mov	fp, r1
 8011d32:	4640      	mov	r0, r8
 8011d34:	4649      	mov	r1, r9
 8011d36:	2200      	movs	r2, #0
 8011d38:	f7ee fc6e 	bl	8000618 <__aeabi_dmul>
 8011d3c:	4680      	mov	r8, r0
 8011d3e:	4689      	mov	r9, r1
 8011d40:	e7c6      	b.n	8011cd0 <_dtoa_r+0x510>
 8011d42:	4650      	mov	r0, sl
 8011d44:	4659      	mov	r1, fp
 8011d46:	f7ee fc67 	bl	8000618 <__aeabi_dmul>
 8011d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d4c:	9d01      	ldr	r5, [sp, #4]
 8011d4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d50:	4682      	mov	sl, r0
 8011d52:	468b      	mov	fp, r1
 8011d54:	4649      	mov	r1, r9
 8011d56:	4640      	mov	r0, r8
 8011d58:	f7ee ff0e 	bl	8000b78 <__aeabi_d2iz>
 8011d5c:	4606      	mov	r6, r0
 8011d5e:	f7ee fbf1 	bl	8000544 <__aeabi_i2d>
 8011d62:	3630      	adds	r6, #48	; 0x30
 8011d64:	4602      	mov	r2, r0
 8011d66:	460b      	mov	r3, r1
 8011d68:	4640      	mov	r0, r8
 8011d6a:	4649      	mov	r1, r9
 8011d6c:	f7ee fa9c 	bl	80002a8 <__aeabi_dsub>
 8011d70:	f805 6b01 	strb.w	r6, [r5], #1
 8011d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d76:	429d      	cmp	r5, r3
 8011d78:	4680      	mov	r8, r0
 8011d7a:	4689      	mov	r9, r1
 8011d7c:	f04f 0200 	mov.w	r2, #0
 8011d80:	d124      	bne.n	8011dcc <_dtoa_r+0x60c>
 8011d82:	4b1b      	ldr	r3, [pc, #108]	; (8011df0 <_dtoa_r+0x630>)
 8011d84:	4650      	mov	r0, sl
 8011d86:	4659      	mov	r1, fp
 8011d88:	f7ee fa90 	bl	80002ac <__adddf3>
 8011d8c:	4602      	mov	r2, r0
 8011d8e:	460b      	mov	r3, r1
 8011d90:	4640      	mov	r0, r8
 8011d92:	4649      	mov	r1, r9
 8011d94:	f7ee fed0 	bl	8000b38 <__aeabi_dcmpgt>
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	d173      	bne.n	8011e84 <_dtoa_r+0x6c4>
 8011d9c:	4652      	mov	r2, sl
 8011d9e:	465b      	mov	r3, fp
 8011da0:	4913      	ldr	r1, [pc, #76]	; (8011df0 <_dtoa_r+0x630>)
 8011da2:	2000      	movs	r0, #0
 8011da4:	f7ee fa80 	bl	80002a8 <__aeabi_dsub>
 8011da8:	4602      	mov	r2, r0
 8011daa:	460b      	mov	r3, r1
 8011dac:	4640      	mov	r0, r8
 8011dae:	4649      	mov	r1, r9
 8011db0:	f7ee fea4 	bl	8000afc <__aeabi_dcmplt>
 8011db4:	2800      	cmp	r0, #0
 8011db6:	f43f af35 	beq.w	8011c24 <_dtoa_r+0x464>
 8011dba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011dbc:	1e6b      	subs	r3, r5, #1
 8011dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011dc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011dc4:	2b30      	cmp	r3, #48	; 0x30
 8011dc6:	d0f8      	beq.n	8011dba <_dtoa_r+0x5fa>
 8011dc8:	9700      	str	r7, [sp, #0]
 8011dca:	e049      	b.n	8011e60 <_dtoa_r+0x6a0>
 8011dcc:	4b05      	ldr	r3, [pc, #20]	; (8011de4 <_dtoa_r+0x624>)
 8011dce:	f7ee fc23 	bl	8000618 <__aeabi_dmul>
 8011dd2:	4680      	mov	r8, r0
 8011dd4:	4689      	mov	r9, r1
 8011dd6:	e7bd      	b.n	8011d54 <_dtoa_r+0x594>
 8011dd8:	08014300 	.word	0x08014300
 8011ddc:	080142d8 	.word	0x080142d8
 8011de0:	3ff00000 	.word	0x3ff00000
 8011de4:	40240000 	.word	0x40240000
 8011de8:	401c0000 	.word	0x401c0000
 8011dec:	40140000 	.word	0x40140000
 8011df0:	3fe00000 	.word	0x3fe00000
 8011df4:	9d01      	ldr	r5, [sp, #4]
 8011df6:	4656      	mov	r6, sl
 8011df8:	465f      	mov	r7, fp
 8011dfa:	4642      	mov	r2, r8
 8011dfc:	464b      	mov	r3, r9
 8011dfe:	4630      	mov	r0, r6
 8011e00:	4639      	mov	r1, r7
 8011e02:	f7ee fd33 	bl	800086c <__aeabi_ddiv>
 8011e06:	f7ee feb7 	bl	8000b78 <__aeabi_d2iz>
 8011e0a:	4682      	mov	sl, r0
 8011e0c:	f7ee fb9a 	bl	8000544 <__aeabi_i2d>
 8011e10:	4642      	mov	r2, r8
 8011e12:	464b      	mov	r3, r9
 8011e14:	f7ee fc00 	bl	8000618 <__aeabi_dmul>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	4630      	mov	r0, r6
 8011e1e:	4639      	mov	r1, r7
 8011e20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011e24:	f7ee fa40 	bl	80002a8 <__aeabi_dsub>
 8011e28:	f805 6b01 	strb.w	r6, [r5], #1
 8011e2c:	9e01      	ldr	r6, [sp, #4]
 8011e2e:	9f03      	ldr	r7, [sp, #12]
 8011e30:	1bae      	subs	r6, r5, r6
 8011e32:	42b7      	cmp	r7, r6
 8011e34:	4602      	mov	r2, r0
 8011e36:	460b      	mov	r3, r1
 8011e38:	d135      	bne.n	8011ea6 <_dtoa_r+0x6e6>
 8011e3a:	f7ee fa37 	bl	80002ac <__adddf3>
 8011e3e:	4642      	mov	r2, r8
 8011e40:	464b      	mov	r3, r9
 8011e42:	4606      	mov	r6, r0
 8011e44:	460f      	mov	r7, r1
 8011e46:	f7ee fe77 	bl	8000b38 <__aeabi_dcmpgt>
 8011e4a:	b9d0      	cbnz	r0, 8011e82 <_dtoa_r+0x6c2>
 8011e4c:	4642      	mov	r2, r8
 8011e4e:	464b      	mov	r3, r9
 8011e50:	4630      	mov	r0, r6
 8011e52:	4639      	mov	r1, r7
 8011e54:	f7ee fe48 	bl	8000ae8 <__aeabi_dcmpeq>
 8011e58:	b110      	cbz	r0, 8011e60 <_dtoa_r+0x6a0>
 8011e5a:	f01a 0f01 	tst.w	sl, #1
 8011e5e:	d110      	bne.n	8011e82 <_dtoa_r+0x6c2>
 8011e60:	4620      	mov	r0, r4
 8011e62:	ee18 1a10 	vmov	r1, s16
 8011e66:	f000 fd09 	bl	801287c <_Bfree>
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	9800      	ldr	r0, [sp, #0]
 8011e6e:	702b      	strb	r3, [r5, #0]
 8011e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e72:	3001      	adds	r0, #1
 8011e74:	6018      	str	r0, [r3, #0]
 8011e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f43f acf1 	beq.w	8011860 <_dtoa_r+0xa0>
 8011e7e:	601d      	str	r5, [r3, #0]
 8011e80:	e4ee      	b.n	8011860 <_dtoa_r+0xa0>
 8011e82:	9f00      	ldr	r7, [sp, #0]
 8011e84:	462b      	mov	r3, r5
 8011e86:	461d      	mov	r5, r3
 8011e88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e8c:	2a39      	cmp	r2, #57	; 0x39
 8011e8e:	d106      	bne.n	8011e9e <_dtoa_r+0x6de>
 8011e90:	9a01      	ldr	r2, [sp, #4]
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d1f7      	bne.n	8011e86 <_dtoa_r+0x6c6>
 8011e96:	9901      	ldr	r1, [sp, #4]
 8011e98:	2230      	movs	r2, #48	; 0x30
 8011e9a:	3701      	adds	r7, #1
 8011e9c:	700a      	strb	r2, [r1, #0]
 8011e9e:	781a      	ldrb	r2, [r3, #0]
 8011ea0:	3201      	adds	r2, #1
 8011ea2:	701a      	strb	r2, [r3, #0]
 8011ea4:	e790      	b.n	8011dc8 <_dtoa_r+0x608>
 8011ea6:	4ba6      	ldr	r3, [pc, #664]	; (8012140 <_dtoa_r+0x980>)
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	f7ee fbb5 	bl	8000618 <__aeabi_dmul>
 8011eae:	2200      	movs	r2, #0
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	4606      	mov	r6, r0
 8011eb4:	460f      	mov	r7, r1
 8011eb6:	f7ee fe17 	bl	8000ae8 <__aeabi_dcmpeq>
 8011eba:	2800      	cmp	r0, #0
 8011ebc:	d09d      	beq.n	8011dfa <_dtoa_r+0x63a>
 8011ebe:	e7cf      	b.n	8011e60 <_dtoa_r+0x6a0>
 8011ec0:	9a08      	ldr	r2, [sp, #32]
 8011ec2:	2a00      	cmp	r2, #0
 8011ec4:	f000 80d7 	beq.w	8012076 <_dtoa_r+0x8b6>
 8011ec8:	9a06      	ldr	r2, [sp, #24]
 8011eca:	2a01      	cmp	r2, #1
 8011ecc:	f300 80ba 	bgt.w	8012044 <_dtoa_r+0x884>
 8011ed0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ed2:	2a00      	cmp	r2, #0
 8011ed4:	f000 80b2 	beq.w	801203c <_dtoa_r+0x87c>
 8011ed8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011edc:	9e07      	ldr	r6, [sp, #28]
 8011ede:	9d04      	ldr	r5, [sp, #16]
 8011ee0:	9a04      	ldr	r2, [sp, #16]
 8011ee2:	441a      	add	r2, r3
 8011ee4:	9204      	str	r2, [sp, #16]
 8011ee6:	9a05      	ldr	r2, [sp, #20]
 8011ee8:	2101      	movs	r1, #1
 8011eea:	441a      	add	r2, r3
 8011eec:	4620      	mov	r0, r4
 8011eee:	9205      	str	r2, [sp, #20]
 8011ef0:	f000 fd7c 	bl	80129ec <__i2b>
 8011ef4:	4607      	mov	r7, r0
 8011ef6:	2d00      	cmp	r5, #0
 8011ef8:	dd0c      	ble.n	8011f14 <_dtoa_r+0x754>
 8011efa:	9b05      	ldr	r3, [sp, #20]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	dd09      	ble.n	8011f14 <_dtoa_r+0x754>
 8011f00:	42ab      	cmp	r3, r5
 8011f02:	9a04      	ldr	r2, [sp, #16]
 8011f04:	bfa8      	it	ge
 8011f06:	462b      	movge	r3, r5
 8011f08:	1ad2      	subs	r2, r2, r3
 8011f0a:	9204      	str	r2, [sp, #16]
 8011f0c:	9a05      	ldr	r2, [sp, #20]
 8011f0e:	1aed      	subs	r5, r5, r3
 8011f10:	1ad3      	subs	r3, r2, r3
 8011f12:	9305      	str	r3, [sp, #20]
 8011f14:	9b07      	ldr	r3, [sp, #28]
 8011f16:	b31b      	cbz	r3, 8011f60 <_dtoa_r+0x7a0>
 8011f18:	9b08      	ldr	r3, [sp, #32]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	f000 80af 	beq.w	801207e <_dtoa_r+0x8be>
 8011f20:	2e00      	cmp	r6, #0
 8011f22:	dd13      	ble.n	8011f4c <_dtoa_r+0x78c>
 8011f24:	4639      	mov	r1, r7
 8011f26:	4632      	mov	r2, r6
 8011f28:	4620      	mov	r0, r4
 8011f2a:	f000 fe1f 	bl	8012b6c <__pow5mult>
 8011f2e:	ee18 2a10 	vmov	r2, s16
 8011f32:	4601      	mov	r1, r0
 8011f34:	4607      	mov	r7, r0
 8011f36:	4620      	mov	r0, r4
 8011f38:	f000 fd6e 	bl	8012a18 <__multiply>
 8011f3c:	ee18 1a10 	vmov	r1, s16
 8011f40:	4680      	mov	r8, r0
 8011f42:	4620      	mov	r0, r4
 8011f44:	f000 fc9a 	bl	801287c <_Bfree>
 8011f48:	ee08 8a10 	vmov	s16, r8
 8011f4c:	9b07      	ldr	r3, [sp, #28]
 8011f4e:	1b9a      	subs	r2, r3, r6
 8011f50:	d006      	beq.n	8011f60 <_dtoa_r+0x7a0>
 8011f52:	ee18 1a10 	vmov	r1, s16
 8011f56:	4620      	mov	r0, r4
 8011f58:	f000 fe08 	bl	8012b6c <__pow5mult>
 8011f5c:	ee08 0a10 	vmov	s16, r0
 8011f60:	2101      	movs	r1, #1
 8011f62:	4620      	mov	r0, r4
 8011f64:	f000 fd42 	bl	80129ec <__i2b>
 8011f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	4606      	mov	r6, r0
 8011f6e:	f340 8088 	ble.w	8012082 <_dtoa_r+0x8c2>
 8011f72:	461a      	mov	r2, r3
 8011f74:	4601      	mov	r1, r0
 8011f76:	4620      	mov	r0, r4
 8011f78:	f000 fdf8 	bl	8012b6c <__pow5mult>
 8011f7c:	9b06      	ldr	r3, [sp, #24]
 8011f7e:	2b01      	cmp	r3, #1
 8011f80:	4606      	mov	r6, r0
 8011f82:	f340 8081 	ble.w	8012088 <_dtoa_r+0x8c8>
 8011f86:	f04f 0800 	mov.w	r8, #0
 8011f8a:	6933      	ldr	r3, [r6, #16]
 8011f8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011f90:	6918      	ldr	r0, [r3, #16]
 8011f92:	f000 fcdb 	bl	801294c <__hi0bits>
 8011f96:	f1c0 0020 	rsb	r0, r0, #32
 8011f9a:	9b05      	ldr	r3, [sp, #20]
 8011f9c:	4418      	add	r0, r3
 8011f9e:	f010 001f 	ands.w	r0, r0, #31
 8011fa2:	f000 8092 	beq.w	80120ca <_dtoa_r+0x90a>
 8011fa6:	f1c0 0320 	rsb	r3, r0, #32
 8011faa:	2b04      	cmp	r3, #4
 8011fac:	f340 808a 	ble.w	80120c4 <_dtoa_r+0x904>
 8011fb0:	f1c0 001c 	rsb	r0, r0, #28
 8011fb4:	9b04      	ldr	r3, [sp, #16]
 8011fb6:	4403      	add	r3, r0
 8011fb8:	9304      	str	r3, [sp, #16]
 8011fba:	9b05      	ldr	r3, [sp, #20]
 8011fbc:	4403      	add	r3, r0
 8011fbe:	4405      	add	r5, r0
 8011fc0:	9305      	str	r3, [sp, #20]
 8011fc2:	9b04      	ldr	r3, [sp, #16]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	dd07      	ble.n	8011fd8 <_dtoa_r+0x818>
 8011fc8:	ee18 1a10 	vmov	r1, s16
 8011fcc:	461a      	mov	r2, r3
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f000 fe26 	bl	8012c20 <__lshift>
 8011fd4:	ee08 0a10 	vmov	s16, r0
 8011fd8:	9b05      	ldr	r3, [sp, #20]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	dd05      	ble.n	8011fea <_dtoa_r+0x82a>
 8011fde:	4631      	mov	r1, r6
 8011fe0:	461a      	mov	r2, r3
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	f000 fe1c 	bl	8012c20 <__lshift>
 8011fe8:	4606      	mov	r6, r0
 8011fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d06e      	beq.n	80120ce <_dtoa_r+0x90e>
 8011ff0:	ee18 0a10 	vmov	r0, s16
 8011ff4:	4631      	mov	r1, r6
 8011ff6:	f000 fe83 	bl	8012d00 <__mcmp>
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	da67      	bge.n	80120ce <_dtoa_r+0x90e>
 8011ffe:	9b00      	ldr	r3, [sp, #0]
 8012000:	3b01      	subs	r3, #1
 8012002:	ee18 1a10 	vmov	r1, s16
 8012006:	9300      	str	r3, [sp, #0]
 8012008:	220a      	movs	r2, #10
 801200a:	2300      	movs	r3, #0
 801200c:	4620      	mov	r0, r4
 801200e:	f000 fc57 	bl	80128c0 <__multadd>
 8012012:	9b08      	ldr	r3, [sp, #32]
 8012014:	ee08 0a10 	vmov	s16, r0
 8012018:	2b00      	cmp	r3, #0
 801201a:	f000 81b1 	beq.w	8012380 <_dtoa_r+0xbc0>
 801201e:	2300      	movs	r3, #0
 8012020:	4639      	mov	r1, r7
 8012022:	220a      	movs	r2, #10
 8012024:	4620      	mov	r0, r4
 8012026:	f000 fc4b 	bl	80128c0 <__multadd>
 801202a:	9b02      	ldr	r3, [sp, #8]
 801202c:	2b00      	cmp	r3, #0
 801202e:	4607      	mov	r7, r0
 8012030:	f300 808e 	bgt.w	8012150 <_dtoa_r+0x990>
 8012034:	9b06      	ldr	r3, [sp, #24]
 8012036:	2b02      	cmp	r3, #2
 8012038:	dc51      	bgt.n	80120de <_dtoa_r+0x91e>
 801203a:	e089      	b.n	8012150 <_dtoa_r+0x990>
 801203c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801203e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012042:	e74b      	b.n	8011edc <_dtoa_r+0x71c>
 8012044:	9b03      	ldr	r3, [sp, #12]
 8012046:	1e5e      	subs	r6, r3, #1
 8012048:	9b07      	ldr	r3, [sp, #28]
 801204a:	42b3      	cmp	r3, r6
 801204c:	bfbf      	itttt	lt
 801204e:	9b07      	ldrlt	r3, [sp, #28]
 8012050:	9607      	strlt	r6, [sp, #28]
 8012052:	1af2      	sublt	r2, r6, r3
 8012054:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012056:	bfb6      	itet	lt
 8012058:	189b      	addlt	r3, r3, r2
 801205a:	1b9e      	subge	r6, r3, r6
 801205c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801205e:	9b03      	ldr	r3, [sp, #12]
 8012060:	bfb8      	it	lt
 8012062:	2600      	movlt	r6, #0
 8012064:	2b00      	cmp	r3, #0
 8012066:	bfb7      	itett	lt
 8012068:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801206c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012070:	1a9d      	sublt	r5, r3, r2
 8012072:	2300      	movlt	r3, #0
 8012074:	e734      	b.n	8011ee0 <_dtoa_r+0x720>
 8012076:	9e07      	ldr	r6, [sp, #28]
 8012078:	9d04      	ldr	r5, [sp, #16]
 801207a:	9f08      	ldr	r7, [sp, #32]
 801207c:	e73b      	b.n	8011ef6 <_dtoa_r+0x736>
 801207e:	9a07      	ldr	r2, [sp, #28]
 8012080:	e767      	b.n	8011f52 <_dtoa_r+0x792>
 8012082:	9b06      	ldr	r3, [sp, #24]
 8012084:	2b01      	cmp	r3, #1
 8012086:	dc18      	bgt.n	80120ba <_dtoa_r+0x8fa>
 8012088:	f1ba 0f00 	cmp.w	sl, #0
 801208c:	d115      	bne.n	80120ba <_dtoa_r+0x8fa>
 801208e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012092:	b993      	cbnz	r3, 80120ba <_dtoa_r+0x8fa>
 8012094:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012098:	0d1b      	lsrs	r3, r3, #20
 801209a:	051b      	lsls	r3, r3, #20
 801209c:	b183      	cbz	r3, 80120c0 <_dtoa_r+0x900>
 801209e:	9b04      	ldr	r3, [sp, #16]
 80120a0:	3301      	adds	r3, #1
 80120a2:	9304      	str	r3, [sp, #16]
 80120a4:	9b05      	ldr	r3, [sp, #20]
 80120a6:	3301      	adds	r3, #1
 80120a8:	9305      	str	r3, [sp, #20]
 80120aa:	f04f 0801 	mov.w	r8, #1
 80120ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	f47f af6a 	bne.w	8011f8a <_dtoa_r+0x7ca>
 80120b6:	2001      	movs	r0, #1
 80120b8:	e76f      	b.n	8011f9a <_dtoa_r+0x7da>
 80120ba:	f04f 0800 	mov.w	r8, #0
 80120be:	e7f6      	b.n	80120ae <_dtoa_r+0x8ee>
 80120c0:	4698      	mov	r8, r3
 80120c2:	e7f4      	b.n	80120ae <_dtoa_r+0x8ee>
 80120c4:	f43f af7d 	beq.w	8011fc2 <_dtoa_r+0x802>
 80120c8:	4618      	mov	r0, r3
 80120ca:	301c      	adds	r0, #28
 80120cc:	e772      	b.n	8011fb4 <_dtoa_r+0x7f4>
 80120ce:	9b03      	ldr	r3, [sp, #12]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	dc37      	bgt.n	8012144 <_dtoa_r+0x984>
 80120d4:	9b06      	ldr	r3, [sp, #24]
 80120d6:	2b02      	cmp	r3, #2
 80120d8:	dd34      	ble.n	8012144 <_dtoa_r+0x984>
 80120da:	9b03      	ldr	r3, [sp, #12]
 80120dc:	9302      	str	r3, [sp, #8]
 80120de:	9b02      	ldr	r3, [sp, #8]
 80120e0:	b96b      	cbnz	r3, 80120fe <_dtoa_r+0x93e>
 80120e2:	4631      	mov	r1, r6
 80120e4:	2205      	movs	r2, #5
 80120e6:	4620      	mov	r0, r4
 80120e8:	f000 fbea 	bl	80128c0 <__multadd>
 80120ec:	4601      	mov	r1, r0
 80120ee:	4606      	mov	r6, r0
 80120f0:	ee18 0a10 	vmov	r0, s16
 80120f4:	f000 fe04 	bl	8012d00 <__mcmp>
 80120f8:	2800      	cmp	r0, #0
 80120fa:	f73f adbb 	bgt.w	8011c74 <_dtoa_r+0x4b4>
 80120fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012100:	9d01      	ldr	r5, [sp, #4]
 8012102:	43db      	mvns	r3, r3
 8012104:	9300      	str	r3, [sp, #0]
 8012106:	f04f 0800 	mov.w	r8, #0
 801210a:	4631      	mov	r1, r6
 801210c:	4620      	mov	r0, r4
 801210e:	f000 fbb5 	bl	801287c <_Bfree>
 8012112:	2f00      	cmp	r7, #0
 8012114:	f43f aea4 	beq.w	8011e60 <_dtoa_r+0x6a0>
 8012118:	f1b8 0f00 	cmp.w	r8, #0
 801211c:	d005      	beq.n	801212a <_dtoa_r+0x96a>
 801211e:	45b8      	cmp	r8, r7
 8012120:	d003      	beq.n	801212a <_dtoa_r+0x96a>
 8012122:	4641      	mov	r1, r8
 8012124:	4620      	mov	r0, r4
 8012126:	f000 fba9 	bl	801287c <_Bfree>
 801212a:	4639      	mov	r1, r7
 801212c:	4620      	mov	r0, r4
 801212e:	f000 fba5 	bl	801287c <_Bfree>
 8012132:	e695      	b.n	8011e60 <_dtoa_r+0x6a0>
 8012134:	2600      	movs	r6, #0
 8012136:	4637      	mov	r7, r6
 8012138:	e7e1      	b.n	80120fe <_dtoa_r+0x93e>
 801213a:	9700      	str	r7, [sp, #0]
 801213c:	4637      	mov	r7, r6
 801213e:	e599      	b.n	8011c74 <_dtoa_r+0x4b4>
 8012140:	40240000 	.word	0x40240000
 8012144:	9b08      	ldr	r3, [sp, #32]
 8012146:	2b00      	cmp	r3, #0
 8012148:	f000 80ca 	beq.w	80122e0 <_dtoa_r+0xb20>
 801214c:	9b03      	ldr	r3, [sp, #12]
 801214e:	9302      	str	r3, [sp, #8]
 8012150:	2d00      	cmp	r5, #0
 8012152:	dd05      	ble.n	8012160 <_dtoa_r+0x9a0>
 8012154:	4639      	mov	r1, r7
 8012156:	462a      	mov	r2, r5
 8012158:	4620      	mov	r0, r4
 801215a:	f000 fd61 	bl	8012c20 <__lshift>
 801215e:	4607      	mov	r7, r0
 8012160:	f1b8 0f00 	cmp.w	r8, #0
 8012164:	d05b      	beq.n	801221e <_dtoa_r+0xa5e>
 8012166:	6879      	ldr	r1, [r7, #4]
 8012168:	4620      	mov	r0, r4
 801216a:	f000 fb47 	bl	80127fc <_Balloc>
 801216e:	4605      	mov	r5, r0
 8012170:	b928      	cbnz	r0, 801217e <_dtoa_r+0x9be>
 8012172:	4b87      	ldr	r3, [pc, #540]	; (8012390 <_dtoa_r+0xbd0>)
 8012174:	4602      	mov	r2, r0
 8012176:	f240 21ea 	movw	r1, #746	; 0x2ea
 801217a:	f7ff bb3b 	b.w	80117f4 <_dtoa_r+0x34>
 801217e:	693a      	ldr	r2, [r7, #16]
 8012180:	3202      	adds	r2, #2
 8012182:	0092      	lsls	r2, r2, #2
 8012184:	f107 010c 	add.w	r1, r7, #12
 8012188:	300c      	adds	r0, #12
 801218a:	f7fe fac9 	bl	8010720 <memcpy>
 801218e:	2201      	movs	r2, #1
 8012190:	4629      	mov	r1, r5
 8012192:	4620      	mov	r0, r4
 8012194:	f000 fd44 	bl	8012c20 <__lshift>
 8012198:	9b01      	ldr	r3, [sp, #4]
 801219a:	f103 0901 	add.w	r9, r3, #1
 801219e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80121a2:	4413      	add	r3, r2
 80121a4:	9305      	str	r3, [sp, #20]
 80121a6:	f00a 0301 	and.w	r3, sl, #1
 80121aa:	46b8      	mov	r8, r7
 80121ac:	9304      	str	r3, [sp, #16]
 80121ae:	4607      	mov	r7, r0
 80121b0:	4631      	mov	r1, r6
 80121b2:	ee18 0a10 	vmov	r0, s16
 80121b6:	f7ff fa77 	bl	80116a8 <quorem>
 80121ba:	4641      	mov	r1, r8
 80121bc:	9002      	str	r0, [sp, #8]
 80121be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80121c2:	ee18 0a10 	vmov	r0, s16
 80121c6:	f000 fd9b 	bl	8012d00 <__mcmp>
 80121ca:	463a      	mov	r2, r7
 80121cc:	9003      	str	r0, [sp, #12]
 80121ce:	4631      	mov	r1, r6
 80121d0:	4620      	mov	r0, r4
 80121d2:	f000 fdb1 	bl	8012d38 <__mdiff>
 80121d6:	68c2      	ldr	r2, [r0, #12]
 80121d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80121dc:	4605      	mov	r5, r0
 80121de:	bb02      	cbnz	r2, 8012222 <_dtoa_r+0xa62>
 80121e0:	4601      	mov	r1, r0
 80121e2:	ee18 0a10 	vmov	r0, s16
 80121e6:	f000 fd8b 	bl	8012d00 <__mcmp>
 80121ea:	4602      	mov	r2, r0
 80121ec:	4629      	mov	r1, r5
 80121ee:	4620      	mov	r0, r4
 80121f0:	9207      	str	r2, [sp, #28]
 80121f2:	f000 fb43 	bl	801287c <_Bfree>
 80121f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80121fa:	ea43 0102 	orr.w	r1, r3, r2
 80121fe:	9b04      	ldr	r3, [sp, #16]
 8012200:	430b      	orrs	r3, r1
 8012202:	464d      	mov	r5, r9
 8012204:	d10f      	bne.n	8012226 <_dtoa_r+0xa66>
 8012206:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801220a:	d02a      	beq.n	8012262 <_dtoa_r+0xaa2>
 801220c:	9b03      	ldr	r3, [sp, #12]
 801220e:	2b00      	cmp	r3, #0
 8012210:	dd02      	ble.n	8012218 <_dtoa_r+0xa58>
 8012212:	9b02      	ldr	r3, [sp, #8]
 8012214:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012218:	f88b a000 	strb.w	sl, [fp]
 801221c:	e775      	b.n	801210a <_dtoa_r+0x94a>
 801221e:	4638      	mov	r0, r7
 8012220:	e7ba      	b.n	8012198 <_dtoa_r+0x9d8>
 8012222:	2201      	movs	r2, #1
 8012224:	e7e2      	b.n	80121ec <_dtoa_r+0xa2c>
 8012226:	9b03      	ldr	r3, [sp, #12]
 8012228:	2b00      	cmp	r3, #0
 801222a:	db04      	blt.n	8012236 <_dtoa_r+0xa76>
 801222c:	9906      	ldr	r1, [sp, #24]
 801222e:	430b      	orrs	r3, r1
 8012230:	9904      	ldr	r1, [sp, #16]
 8012232:	430b      	orrs	r3, r1
 8012234:	d122      	bne.n	801227c <_dtoa_r+0xabc>
 8012236:	2a00      	cmp	r2, #0
 8012238:	ddee      	ble.n	8012218 <_dtoa_r+0xa58>
 801223a:	ee18 1a10 	vmov	r1, s16
 801223e:	2201      	movs	r2, #1
 8012240:	4620      	mov	r0, r4
 8012242:	f000 fced 	bl	8012c20 <__lshift>
 8012246:	4631      	mov	r1, r6
 8012248:	ee08 0a10 	vmov	s16, r0
 801224c:	f000 fd58 	bl	8012d00 <__mcmp>
 8012250:	2800      	cmp	r0, #0
 8012252:	dc03      	bgt.n	801225c <_dtoa_r+0xa9c>
 8012254:	d1e0      	bne.n	8012218 <_dtoa_r+0xa58>
 8012256:	f01a 0f01 	tst.w	sl, #1
 801225a:	d0dd      	beq.n	8012218 <_dtoa_r+0xa58>
 801225c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012260:	d1d7      	bne.n	8012212 <_dtoa_r+0xa52>
 8012262:	2339      	movs	r3, #57	; 0x39
 8012264:	f88b 3000 	strb.w	r3, [fp]
 8012268:	462b      	mov	r3, r5
 801226a:	461d      	mov	r5, r3
 801226c:	3b01      	subs	r3, #1
 801226e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012272:	2a39      	cmp	r2, #57	; 0x39
 8012274:	d071      	beq.n	801235a <_dtoa_r+0xb9a>
 8012276:	3201      	adds	r2, #1
 8012278:	701a      	strb	r2, [r3, #0]
 801227a:	e746      	b.n	801210a <_dtoa_r+0x94a>
 801227c:	2a00      	cmp	r2, #0
 801227e:	dd07      	ble.n	8012290 <_dtoa_r+0xad0>
 8012280:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012284:	d0ed      	beq.n	8012262 <_dtoa_r+0xaa2>
 8012286:	f10a 0301 	add.w	r3, sl, #1
 801228a:	f88b 3000 	strb.w	r3, [fp]
 801228e:	e73c      	b.n	801210a <_dtoa_r+0x94a>
 8012290:	9b05      	ldr	r3, [sp, #20]
 8012292:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012296:	4599      	cmp	r9, r3
 8012298:	d047      	beq.n	801232a <_dtoa_r+0xb6a>
 801229a:	ee18 1a10 	vmov	r1, s16
 801229e:	2300      	movs	r3, #0
 80122a0:	220a      	movs	r2, #10
 80122a2:	4620      	mov	r0, r4
 80122a4:	f000 fb0c 	bl	80128c0 <__multadd>
 80122a8:	45b8      	cmp	r8, r7
 80122aa:	ee08 0a10 	vmov	s16, r0
 80122ae:	f04f 0300 	mov.w	r3, #0
 80122b2:	f04f 020a 	mov.w	r2, #10
 80122b6:	4641      	mov	r1, r8
 80122b8:	4620      	mov	r0, r4
 80122ba:	d106      	bne.n	80122ca <_dtoa_r+0xb0a>
 80122bc:	f000 fb00 	bl	80128c0 <__multadd>
 80122c0:	4680      	mov	r8, r0
 80122c2:	4607      	mov	r7, r0
 80122c4:	f109 0901 	add.w	r9, r9, #1
 80122c8:	e772      	b.n	80121b0 <_dtoa_r+0x9f0>
 80122ca:	f000 faf9 	bl	80128c0 <__multadd>
 80122ce:	4639      	mov	r1, r7
 80122d0:	4680      	mov	r8, r0
 80122d2:	2300      	movs	r3, #0
 80122d4:	220a      	movs	r2, #10
 80122d6:	4620      	mov	r0, r4
 80122d8:	f000 faf2 	bl	80128c0 <__multadd>
 80122dc:	4607      	mov	r7, r0
 80122de:	e7f1      	b.n	80122c4 <_dtoa_r+0xb04>
 80122e0:	9b03      	ldr	r3, [sp, #12]
 80122e2:	9302      	str	r3, [sp, #8]
 80122e4:	9d01      	ldr	r5, [sp, #4]
 80122e6:	ee18 0a10 	vmov	r0, s16
 80122ea:	4631      	mov	r1, r6
 80122ec:	f7ff f9dc 	bl	80116a8 <quorem>
 80122f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80122f4:	9b01      	ldr	r3, [sp, #4]
 80122f6:	f805 ab01 	strb.w	sl, [r5], #1
 80122fa:	1aea      	subs	r2, r5, r3
 80122fc:	9b02      	ldr	r3, [sp, #8]
 80122fe:	4293      	cmp	r3, r2
 8012300:	dd09      	ble.n	8012316 <_dtoa_r+0xb56>
 8012302:	ee18 1a10 	vmov	r1, s16
 8012306:	2300      	movs	r3, #0
 8012308:	220a      	movs	r2, #10
 801230a:	4620      	mov	r0, r4
 801230c:	f000 fad8 	bl	80128c0 <__multadd>
 8012310:	ee08 0a10 	vmov	s16, r0
 8012314:	e7e7      	b.n	80122e6 <_dtoa_r+0xb26>
 8012316:	9b02      	ldr	r3, [sp, #8]
 8012318:	2b00      	cmp	r3, #0
 801231a:	bfc8      	it	gt
 801231c:	461d      	movgt	r5, r3
 801231e:	9b01      	ldr	r3, [sp, #4]
 8012320:	bfd8      	it	le
 8012322:	2501      	movle	r5, #1
 8012324:	441d      	add	r5, r3
 8012326:	f04f 0800 	mov.w	r8, #0
 801232a:	ee18 1a10 	vmov	r1, s16
 801232e:	2201      	movs	r2, #1
 8012330:	4620      	mov	r0, r4
 8012332:	f000 fc75 	bl	8012c20 <__lshift>
 8012336:	4631      	mov	r1, r6
 8012338:	ee08 0a10 	vmov	s16, r0
 801233c:	f000 fce0 	bl	8012d00 <__mcmp>
 8012340:	2800      	cmp	r0, #0
 8012342:	dc91      	bgt.n	8012268 <_dtoa_r+0xaa8>
 8012344:	d102      	bne.n	801234c <_dtoa_r+0xb8c>
 8012346:	f01a 0f01 	tst.w	sl, #1
 801234a:	d18d      	bne.n	8012268 <_dtoa_r+0xaa8>
 801234c:	462b      	mov	r3, r5
 801234e:	461d      	mov	r5, r3
 8012350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012354:	2a30      	cmp	r2, #48	; 0x30
 8012356:	d0fa      	beq.n	801234e <_dtoa_r+0xb8e>
 8012358:	e6d7      	b.n	801210a <_dtoa_r+0x94a>
 801235a:	9a01      	ldr	r2, [sp, #4]
 801235c:	429a      	cmp	r2, r3
 801235e:	d184      	bne.n	801226a <_dtoa_r+0xaaa>
 8012360:	9b00      	ldr	r3, [sp, #0]
 8012362:	3301      	adds	r3, #1
 8012364:	9300      	str	r3, [sp, #0]
 8012366:	2331      	movs	r3, #49	; 0x31
 8012368:	7013      	strb	r3, [r2, #0]
 801236a:	e6ce      	b.n	801210a <_dtoa_r+0x94a>
 801236c:	4b09      	ldr	r3, [pc, #36]	; (8012394 <_dtoa_r+0xbd4>)
 801236e:	f7ff ba95 	b.w	801189c <_dtoa_r+0xdc>
 8012372:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012374:	2b00      	cmp	r3, #0
 8012376:	f47f aa6e 	bne.w	8011856 <_dtoa_r+0x96>
 801237a:	4b07      	ldr	r3, [pc, #28]	; (8012398 <_dtoa_r+0xbd8>)
 801237c:	f7ff ba8e 	b.w	801189c <_dtoa_r+0xdc>
 8012380:	9b02      	ldr	r3, [sp, #8]
 8012382:	2b00      	cmp	r3, #0
 8012384:	dcae      	bgt.n	80122e4 <_dtoa_r+0xb24>
 8012386:	9b06      	ldr	r3, [sp, #24]
 8012388:	2b02      	cmp	r3, #2
 801238a:	f73f aea8 	bgt.w	80120de <_dtoa_r+0x91e>
 801238e:	e7a9      	b.n	80122e4 <_dtoa_r+0xb24>
 8012390:	08014208 	.word	0x08014208
 8012394:	08014064 	.word	0x08014064
 8012398:	08014189 	.word	0x08014189

0801239c <__sflush_r>:
 801239c:	898a      	ldrh	r2, [r1, #12]
 801239e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a2:	4605      	mov	r5, r0
 80123a4:	0710      	lsls	r0, r2, #28
 80123a6:	460c      	mov	r4, r1
 80123a8:	d458      	bmi.n	801245c <__sflush_r+0xc0>
 80123aa:	684b      	ldr	r3, [r1, #4]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	dc05      	bgt.n	80123bc <__sflush_r+0x20>
 80123b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	dc02      	bgt.n	80123bc <__sflush_r+0x20>
 80123b6:	2000      	movs	r0, #0
 80123b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123be:	2e00      	cmp	r6, #0
 80123c0:	d0f9      	beq.n	80123b6 <__sflush_r+0x1a>
 80123c2:	2300      	movs	r3, #0
 80123c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80123c8:	682f      	ldr	r7, [r5, #0]
 80123ca:	602b      	str	r3, [r5, #0]
 80123cc:	d032      	beq.n	8012434 <__sflush_r+0x98>
 80123ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80123d0:	89a3      	ldrh	r3, [r4, #12]
 80123d2:	075a      	lsls	r2, r3, #29
 80123d4:	d505      	bpl.n	80123e2 <__sflush_r+0x46>
 80123d6:	6863      	ldr	r3, [r4, #4]
 80123d8:	1ac0      	subs	r0, r0, r3
 80123da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123dc:	b10b      	cbz	r3, 80123e2 <__sflush_r+0x46>
 80123de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123e0:	1ac0      	subs	r0, r0, r3
 80123e2:	2300      	movs	r3, #0
 80123e4:	4602      	mov	r2, r0
 80123e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123e8:	6a21      	ldr	r1, [r4, #32]
 80123ea:	4628      	mov	r0, r5
 80123ec:	47b0      	blx	r6
 80123ee:	1c43      	adds	r3, r0, #1
 80123f0:	89a3      	ldrh	r3, [r4, #12]
 80123f2:	d106      	bne.n	8012402 <__sflush_r+0x66>
 80123f4:	6829      	ldr	r1, [r5, #0]
 80123f6:	291d      	cmp	r1, #29
 80123f8:	d82c      	bhi.n	8012454 <__sflush_r+0xb8>
 80123fa:	4a2a      	ldr	r2, [pc, #168]	; (80124a4 <__sflush_r+0x108>)
 80123fc:	40ca      	lsrs	r2, r1
 80123fe:	07d6      	lsls	r6, r2, #31
 8012400:	d528      	bpl.n	8012454 <__sflush_r+0xb8>
 8012402:	2200      	movs	r2, #0
 8012404:	6062      	str	r2, [r4, #4]
 8012406:	04d9      	lsls	r1, r3, #19
 8012408:	6922      	ldr	r2, [r4, #16]
 801240a:	6022      	str	r2, [r4, #0]
 801240c:	d504      	bpl.n	8012418 <__sflush_r+0x7c>
 801240e:	1c42      	adds	r2, r0, #1
 8012410:	d101      	bne.n	8012416 <__sflush_r+0x7a>
 8012412:	682b      	ldr	r3, [r5, #0]
 8012414:	b903      	cbnz	r3, 8012418 <__sflush_r+0x7c>
 8012416:	6560      	str	r0, [r4, #84]	; 0x54
 8012418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801241a:	602f      	str	r7, [r5, #0]
 801241c:	2900      	cmp	r1, #0
 801241e:	d0ca      	beq.n	80123b6 <__sflush_r+0x1a>
 8012420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012424:	4299      	cmp	r1, r3
 8012426:	d002      	beq.n	801242e <__sflush_r+0x92>
 8012428:	4628      	mov	r0, r5
 801242a:	f7fe f98f 	bl	801074c <_free_r>
 801242e:	2000      	movs	r0, #0
 8012430:	6360      	str	r0, [r4, #52]	; 0x34
 8012432:	e7c1      	b.n	80123b8 <__sflush_r+0x1c>
 8012434:	6a21      	ldr	r1, [r4, #32]
 8012436:	2301      	movs	r3, #1
 8012438:	4628      	mov	r0, r5
 801243a:	47b0      	blx	r6
 801243c:	1c41      	adds	r1, r0, #1
 801243e:	d1c7      	bne.n	80123d0 <__sflush_r+0x34>
 8012440:	682b      	ldr	r3, [r5, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d0c4      	beq.n	80123d0 <__sflush_r+0x34>
 8012446:	2b1d      	cmp	r3, #29
 8012448:	d001      	beq.n	801244e <__sflush_r+0xb2>
 801244a:	2b16      	cmp	r3, #22
 801244c:	d101      	bne.n	8012452 <__sflush_r+0xb6>
 801244e:	602f      	str	r7, [r5, #0]
 8012450:	e7b1      	b.n	80123b6 <__sflush_r+0x1a>
 8012452:	89a3      	ldrh	r3, [r4, #12]
 8012454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012458:	81a3      	strh	r3, [r4, #12]
 801245a:	e7ad      	b.n	80123b8 <__sflush_r+0x1c>
 801245c:	690f      	ldr	r7, [r1, #16]
 801245e:	2f00      	cmp	r7, #0
 8012460:	d0a9      	beq.n	80123b6 <__sflush_r+0x1a>
 8012462:	0793      	lsls	r3, r2, #30
 8012464:	680e      	ldr	r6, [r1, #0]
 8012466:	bf08      	it	eq
 8012468:	694b      	ldreq	r3, [r1, #20]
 801246a:	600f      	str	r7, [r1, #0]
 801246c:	bf18      	it	ne
 801246e:	2300      	movne	r3, #0
 8012470:	eba6 0807 	sub.w	r8, r6, r7
 8012474:	608b      	str	r3, [r1, #8]
 8012476:	f1b8 0f00 	cmp.w	r8, #0
 801247a:	dd9c      	ble.n	80123b6 <__sflush_r+0x1a>
 801247c:	6a21      	ldr	r1, [r4, #32]
 801247e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012480:	4643      	mov	r3, r8
 8012482:	463a      	mov	r2, r7
 8012484:	4628      	mov	r0, r5
 8012486:	47b0      	blx	r6
 8012488:	2800      	cmp	r0, #0
 801248a:	dc06      	bgt.n	801249a <__sflush_r+0xfe>
 801248c:	89a3      	ldrh	r3, [r4, #12]
 801248e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012492:	81a3      	strh	r3, [r4, #12]
 8012494:	f04f 30ff 	mov.w	r0, #4294967295
 8012498:	e78e      	b.n	80123b8 <__sflush_r+0x1c>
 801249a:	4407      	add	r7, r0
 801249c:	eba8 0800 	sub.w	r8, r8, r0
 80124a0:	e7e9      	b.n	8012476 <__sflush_r+0xda>
 80124a2:	bf00      	nop
 80124a4:	20400001 	.word	0x20400001

080124a8 <_fflush_r>:
 80124a8:	b538      	push	{r3, r4, r5, lr}
 80124aa:	690b      	ldr	r3, [r1, #16]
 80124ac:	4605      	mov	r5, r0
 80124ae:	460c      	mov	r4, r1
 80124b0:	b913      	cbnz	r3, 80124b8 <_fflush_r+0x10>
 80124b2:	2500      	movs	r5, #0
 80124b4:	4628      	mov	r0, r5
 80124b6:	bd38      	pop	{r3, r4, r5, pc}
 80124b8:	b118      	cbz	r0, 80124c2 <_fflush_r+0x1a>
 80124ba:	6983      	ldr	r3, [r0, #24]
 80124bc:	b90b      	cbnz	r3, 80124c2 <_fflush_r+0x1a>
 80124be:	f000 f887 	bl	80125d0 <__sinit>
 80124c2:	4b14      	ldr	r3, [pc, #80]	; (8012514 <_fflush_r+0x6c>)
 80124c4:	429c      	cmp	r4, r3
 80124c6:	d11b      	bne.n	8012500 <_fflush_r+0x58>
 80124c8:	686c      	ldr	r4, [r5, #4]
 80124ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d0ef      	beq.n	80124b2 <_fflush_r+0xa>
 80124d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80124d4:	07d0      	lsls	r0, r2, #31
 80124d6:	d404      	bmi.n	80124e2 <_fflush_r+0x3a>
 80124d8:	0599      	lsls	r1, r3, #22
 80124da:	d402      	bmi.n	80124e2 <_fflush_r+0x3a>
 80124dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124de:	f000 f91a 	bl	8012716 <__retarget_lock_acquire_recursive>
 80124e2:	4628      	mov	r0, r5
 80124e4:	4621      	mov	r1, r4
 80124e6:	f7ff ff59 	bl	801239c <__sflush_r>
 80124ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124ec:	07da      	lsls	r2, r3, #31
 80124ee:	4605      	mov	r5, r0
 80124f0:	d4e0      	bmi.n	80124b4 <_fflush_r+0xc>
 80124f2:	89a3      	ldrh	r3, [r4, #12]
 80124f4:	059b      	lsls	r3, r3, #22
 80124f6:	d4dd      	bmi.n	80124b4 <_fflush_r+0xc>
 80124f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124fa:	f000 f90d 	bl	8012718 <__retarget_lock_release_recursive>
 80124fe:	e7d9      	b.n	80124b4 <_fflush_r+0xc>
 8012500:	4b05      	ldr	r3, [pc, #20]	; (8012518 <_fflush_r+0x70>)
 8012502:	429c      	cmp	r4, r3
 8012504:	d101      	bne.n	801250a <_fflush_r+0x62>
 8012506:	68ac      	ldr	r4, [r5, #8]
 8012508:	e7df      	b.n	80124ca <_fflush_r+0x22>
 801250a:	4b04      	ldr	r3, [pc, #16]	; (801251c <_fflush_r+0x74>)
 801250c:	429c      	cmp	r4, r3
 801250e:	bf08      	it	eq
 8012510:	68ec      	ldreq	r4, [r5, #12]
 8012512:	e7da      	b.n	80124ca <_fflush_r+0x22>
 8012514:	0801423c 	.word	0x0801423c
 8012518:	0801425c 	.word	0x0801425c
 801251c:	0801421c 	.word	0x0801421c

08012520 <std>:
 8012520:	2300      	movs	r3, #0
 8012522:	b510      	push	{r4, lr}
 8012524:	4604      	mov	r4, r0
 8012526:	e9c0 3300 	strd	r3, r3, [r0]
 801252a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801252e:	6083      	str	r3, [r0, #8]
 8012530:	8181      	strh	r1, [r0, #12]
 8012532:	6643      	str	r3, [r0, #100]	; 0x64
 8012534:	81c2      	strh	r2, [r0, #14]
 8012536:	6183      	str	r3, [r0, #24]
 8012538:	4619      	mov	r1, r3
 801253a:	2208      	movs	r2, #8
 801253c:	305c      	adds	r0, #92	; 0x5c
 801253e:	f7fe f8fd 	bl	801073c <memset>
 8012542:	4b05      	ldr	r3, [pc, #20]	; (8012558 <std+0x38>)
 8012544:	6263      	str	r3, [r4, #36]	; 0x24
 8012546:	4b05      	ldr	r3, [pc, #20]	; (801255c <std+0x3c>)
 8012548:	62a3      	str	r3, [r4, #40]	; 0x28
 801254a:	4b05      	ldr	r3, [pc, #20]	; (8012560 <std+0x40>)
 801254c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801254e:	4b05      	ldr	r3, [pc, #20]	; (8012564 <std+0x44>)
 8012550:	6224      	str	r4, [r4, #32]
 8012552:	6323      	str	r3, [r4, #48]	; 0x30
 8012554:	bd10      	pop	{r4, pc}
 8012556:	bf00      	nop
 8012558:	0801349d 	.word	0x0801349d
 801255c:	080134bf 	.word	0x080134bf
 8012560:	080134f7 	.word	0x080134f7
 8012564:	0801351b 	.word	0x0801351b

08012568 <_cleanup_r>:
 8012568:	4901      	ldr	r1, [pc, #4]	; (8012570 <_cleanup_r+0x8>)
 801256a:	f000 b8af 	b.w	80126cc <_fwalk_reent>
 801256e:	bf00      	nop
 8012570:	080124a9 	.word	0x080124a9

08012574 <__sfmoreglue>:
 8012574:	b570      	push	{r4, r5, r6, lr}
 8012576:	2268      	movs	r2, #104	; 0x68
 8012578:	1e4d      	subs	r5, r1, #1
 801257a:	4355      	muls	r5, r2
 801257c:	460e      	mov	r6, r1
 801257e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012582:	f7fe f94f 	bl	8010824 <_malloc_r>
 8012586:	4604      	mov	r4, r0
 8012588:	b140      	cbz	r0, 801259c <__sfmoreglue+0x28>
 801258a:	2100      	movs	r1, #0
 801258c:	e9c0 1600 	strd	r1, r6, [r0]
 8012590:	300c      	adds	r0, #12
 8012592:	60a0      	str	r0, [r4, #8]
 8012594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012598:	f7fe f8d0 	bl	801073c <memset>
 801259c:	4620      	mov	r0, r4
 801259e:	bd70      	pop	{r4, r5, r6, pc}

080125a0 <__sfp_lock_acquire>:
 80125a0:	4801      	ldr	r0, [pc, #4]	; (80125a8 <__sfp_lock_acquire+0x8>)
 80125a2:	f000 b8b8 	b.w	8012716 <__retarget_lock_acquire_recursive>
 80125a6:	bf00      	nop
 80125a8:	2000350d 	.word	0x2000350d

080125ac <__sfp_lock_release>:
 80125ac:	4801      	ldr	r0, [pc, #4]	; (80125b4 <__sfp_lock_release+0x8>)
 80125ae:	f000 b8b3 	b.w	8012718 <__retarget_lock_release_recursive>
 80125b2:	bf00      	nop
 80125b4:	2000350d 	.word	0x2000350d

080125b8 <__sinit_lock_acquire>:
 80125b8:	4801      	ldr	r0, [pc, #4]	; (80125c0 <__sinit_lock_acquire+0x8>)
 80125ba:	f000 b8ac 	b.w	8012716 <__retarget_lock_acquire_recursive>
 80125be:	bf00      	nop
 80125c0:	2000350e 	.word	0x2000350e

080125c4 <__sinit_lock_release>:
 80125c4:	4801      	ldr	r0, [pc, #4]	; (80125cc <__sinit_lock_release+0x8>)
 80125c6:	f000 b8a7 	b.w	8012718 <__retarget_lock_release_recursive>
 80125ca:	bf00      	nop
 80125cc:	2000350e 	.word	0x2000350e

080125d0 <__sinit>:
 80125d0:	b510      	push	{r4, lr}
 80125d2:	4604      	mov	r4, r0
 80125d4:	f7ff fff0 	bl	80125b8 <__sinit_lock_acquire>
 80125d8:	69a3      	ldr	r3, [r4, #24]
 80125da:	b11b      	cbz	r3, 80125e4 <__sinit+0x14>
 80125dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125e0:	f7ff bff0 	b.w	80125c4 <__sinit_lock_release>
 80125e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80125e8:	6523      	str	r3, [r4, #80]	; 0x50
 80125ea:	4b13      	ldr	r3, [pc, #76]	; (8012638 <__sinit+0x68>)
 80125ec:	4a13      	ldr	r2, [pc, #76]	; (801263c <__sinit+0x6c>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80125f2:	42a3      	cmp	r3, r4
 80125f4:	bf04      	itt	eq
 80125f6:	2301      	moveq	r3, #1
 80125f8:	61a3      	streq	r3, [r4, #24]
 80125fa:	4620      	mov	r0, r4
 80125fc:	f000 f820 	bl	8012640 <__sfp>
 8012600:	6060      	str	r0, [r4, #4]
 8012602:	4620      	mov	r0, r4
 8012604:	f000 f81c 	bl	8012640 <__sfp>
 8012608:	60a0      	str	r0, [r4, #8]
 801260a:	4620      	mov	r0, r4
 801260c:	f000 f818 	bl	8012640 <__sfp>
 8012610:	2200      	movs	r2, #0
 8012612:	60e0      	str	r0, [r4, #12]
 8012614:	2104      	movs	r1, #4
 8012616:	6860      	ldr	r0, [r4, #4]
 8012618:	f7ff ff82 	bl	8012520 <std>
 801261c:	68a0      	ldr	r0, [r4, #8]
 801261e:	2201      	movs	r2, #1
 8012620:	2109      	movs	r1, #9
 8012622:	f7ff ff7d 	bl	8012520 <std>
 8012626:	68e0      	ldr	r0, [r4, #12]
 8012628:	2202      	movs	r2, #2
 801262a:	2112      	movs	r1, #18
 801262c:	f7ff ff78 	bl	8012520 <std>
 8012630:	2301      	movs	r3, #1
 8012632:	61a3      	str	r3, [r4, #24]
 8012634:	e7d2      	b.n	80125dc <__sinit+0xc>
 8012636:	bf00      	nop
 8012638:	08014050 	.word	0x08014050
 801263c:	08012569 	.word	0x08012569

08012640 <__sfp>:
 8012640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012642:	4607      	mov	r7, r0
 8012644:	f7ff ffac 	bl	80125a0 <__sfp_lock_acquire>
 8012648:	4b1e      	ldr	r3, [pc, #120]	; (80126c4 <__sfp+0x84>)
 801264a:	681e      	ldr	r6, [r3, #0]
 801264c:	69b3      	ldr	r3, [r6, #24]
 801264e:	b913      	cbnz	r3, 8012656 <__sfp+0x16>
 8012650:	4630      	mov	r0, r6
 8012652:	f7ff ffbd 	bl	80125d0 <__sinit>
 8012656:	3648      	adds	r6, #72	; 0x48
 8012658:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801265c:	3b01      	subs	r3, #1
 801265e:	d503      	bpl.n	8012668 <__sfp+0x28>
 8012660:	6833      	ldr	r3, [r6, #0]
 8012662:	b30b      	cbz	r3, 80126a8 <__sfp+0x68>
 8012664:	6836      	ldr	r6, [r6, #0]
 8012666:	e7f7      	b.n	8012658 <__sfp+0x18>
 8012668:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801266c:	b9d5      	cbnz	r5, 80126a4 <__sfp+0x64>
 801266e:	4b16      	ldr	r3, [pc, #88]	; (80126c8 <__sfp+0x88>)
 8012670:	60e3      	str	r3, [r4, #12]
 8012672:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012676:	6665      	str	r5, [r4, #100]	; 0x64
 8012678:	f000 f84c 	bl	8012714 <__retarget_lock_init_recursive>
 801267c:	f7ff ff96 	bl	80125ac <__sfp_lock_release>
 8012680:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012684:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012688:	6025      	str	r5, [r4, #0]
 801268a:	61a5      	str	r5, [r4, #24]
 801268c:	2208      	movs	r2, #8
 801268e:	4629      	mov	r1, r5
 8012690:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012694:	f7fe f852 	bl	801073c <memset>
 8012698:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801269c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80126a0:	4620      	mov	r0, r4
 80126a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126a4:	3468      	adds	r4, #104	; 0x68
 80126a6:	e7d9      	b.n	801265c <__sfp+0x1c>
 80126a8:	2104      	movs	r1, #4
 80126aa:	4638      	mov	r0, r7
 80126ac:	f7ff ff62 	bl	8012574 <__sfmoreglue>
 80126b0:	4604      	mov	r4, r0
 80126b2:	6030      	str	r0, [r6, #0]
 80126b4:	2800      	cmp	r0, #0
 80126b6:	d1d5      	bne.n	8012664 <__sfp+0x24>
 80126b8:	f7ff ff78 	bl	80125ac <__sfp_lock_release>
 80126bc:	230c      	movs	r3, #12
 80126be:	603b      	str	r3, [r7, #0]
 80126c0:	e7ee      	b.n	80126a0 <__sfp+0x60>
 80126c2:	bf00      	nop
 80126c4:	08014050 	.word	0x08014050
 80126c8:	ffff0001 	.word	0xffff0001

080126cc <_fwalk_reent>:
 80126cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126d0:	4606      	mov	r6, r0
 80126d2:	4688      	mov	r8, r1
 80126d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80126d8:	2700      	movs	r7, #0
 80126da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80126de:	f1b9 0901 	subs.w	r9, r9, #1
 80126e2:	d505      	bpl.n	80126f0 <_fwalk_reent+0x24>
 80126e4:	6824      	ldr	r4, [r4, #0]
 80126e6:	2c00      	cmp	r4, #0
 80126e8:	d1f7      	bne.n	80126da <_fwalk_reent+0xe>
 80126ea:	4638      	mov	r0, r7
 80126ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126f0:	89ab      	ldrh	r3, [r5, #12]
 80126f2:	2b01      	cmp	r3, #1
 80126f4:	d907      	bls.n	8012706 <_fwalk_reent+0x3a>
 80126f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80126fa:	3301      	adds	r3, #1
 80126fc:	d003      	beq.n	8012706 <_fwalk_reent+0x3a>
 80126fe:	4629      	mov	r1, r5
 8012700:	4630      	mov	r0, r6
 8012702:	47c0      	blx	r8
 8012704:	4307      	orrs	r7, r0
 8012706:	3568      	adds	r5, #104	; 0x68
 8012708:	e7e9      	b.n	80126de <_fwalk_reent+0x12>
	...

0801270c <_localeconv_r>:
 801270c:	4800      	ldr	r0, [pc, #0]	; (8012710 <_localeconv_r+0x4>)
 801270e:	4770      	bx	lr
 8012710:	200001a0 	.word	0x200001a0

08012714 <__retarget_lock_init_recursive>:
 8012714:	4770      	bx	lr

08012716 <__retarget_lock_acquire_recursive>:
 8012716:	4770      	bx	lr

08012718 <__retarget_lock_release_recursive>:
 8012718:	4770      	bx	lr

0801271a <__swhatbuf_r>:
 801271a:	b570      	push	{r4, r5, r6, lr}
 801271c:	460e      	mov	r6, r1
 801271e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012722:	2900      	cmp	r1, #0
 8012724:	b096      	sub	sp, #88	; 0x58
 8012726:	4614      	mov	r4, r2
 8012728:	461d      	mov	r5, r3
 801272a:	da08      	bge.n	801273e <__swhatbuf_r+0x24>
 801272c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012730:	2200      	movs	r2, #0
 8012732:	602a      	str	r2, [r5, #0]
 8012734:	061a      	lsls	r2, r3, #24
 8012736:	d410      	bmi.n	801275a <__swhatbuf_r+0x40>
 8012738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801273c:	e00e      	b.n	801275c <__swhatbuf_r+0x42>
 801273e:	466a      	mov	r2, sp
 8012740:	f000 ff42 	bl	80135c8 <_fstat_r>
 8012744:	2800      	cmp	r0, #0
 8012746:	dbf1      	blt.n	801272c <__swhatbuf_r+0x12>
 8012748:	9a01      	ldr	r2, [sp, #4]
 801274a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801274e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012752:	425a      	negs	r2, r3
 8012754:	415a      	adcs	r2, r3
 8012756:	602a      	str	r2, [r5, #0]
 8012758:	e7ee      	b.n	8012738 <__swhatbuf_r+0x1e>
 801275a:	2340      	movs	r3, #64	; 0x40
 801275c:	2000      	movs	r0, #0
 801275e:	6023      	str	r3, [r4, #0]
 8012760:	b016      	add	sp, #88	; 0x58
 8012762:	bd70      	pop	{r4, r5, r6, pc}

08012764 <__smakebuf_r>:
 8012764:	898b      	ldrh	r3, [r1, #12]
 8012766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012768:	079d      	lsls	r5, r3, #30
 801276a:	4606      	mov	r6, r0
 801276c:	460c      	mov	r4, r1
 801276e:	d507      	bpl.n	8012780 <__smakebuf_r+0x1c>
 8012770:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012774:	6023      	str	r3, [r4, #0]
 8012776:	6123      	str	r3, [r4, #16]
 8012778:	2301      	movs	r3, #1
 801277a:	6163      	str	r3, [r4, #20]
 801277c:	b002      	add	sp, #8
 801277e:	bd70      	pop	{r4, r5, r6, pc}
 8012780:	ab01      	add	r3, sp, #4
 8012782:	466a      	mov	r2, sp
 8012784:	f7ff ffc9 	bl	801271a <__swhatbuf_r>
 8012788:	9900      	ldr	r1, [sp, #0]
 801278a:	4605      	mov	r5, r0
 801278c:	4630      	mov	r0, r6
 801278e:	f7fe f849 	bl	8010824 <_malloc_r>
 8012792:	b948      	cbnz	r0, 80127a8 <__smakebuf_r+0x44>
 8012794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012798:	059a      	lsls	r2, r3, #22
 801279a:	d4ef      	bmi.n	801277c <__smakebuf_r+0x18>
 801279c:	f023 0303 	bic.w	r3, r3, #3
 80127a0:	f043 0302 	orr.w	r3, r3, #2
 80127a4:	81a3      	strh	r3, [r4, #12]
 80127a6:	e7e3      	b.n	8012770 <__smakebuf_r+0xc>
 80127a8:	4b0d      	ldr	r3, [pc, #52]	; (80127e0 <__smakebuf_r+0x7c>)
 80127aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80127ac:	89a3      	ldrh	r3, [r4, #12]
 80127ae:	6020      	str	r0, [r4, #0]
 80127b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127b4:	81a3      	strh	r3, [r4, #12]
 80127b6:	9b00      	ldr	r3, [sp, #0]
 80127b8:	6163      	str	r3, [r4, #20]
 80127ba:	9b01      	ldr	r3, [sp, #4]
 80127bc:	6120      	str	r0, [r4, #16]
 80127be:	b15b      	cbz	r3, 80127d8 <__smakebuf_r+0x74>
 80127c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127c4:	4630      	mov	r0, r6
 80127c6:	f000 ff11 	bl	80135ec <_isatty_r>
 80127ca:	b128      	cbz	r0, 80127d8 <__smakebuf_r+0x74>
 80127cc:	89a3      	ldrh	r3, [r4, #12]
 80127ce:	f023 0303 	bic.w	r3, r3, #3
 80127d2:	f043 0301 	orr.w	r3, r3, #1
 80127d6:	81a3      	strh	r3, [r4, #12]
 80127d8:	89a0      	ldrh	r0, [r4, #12]
 80127da:	4305      	orrs	r5, r0
 80127dc:	81a5      	strh	r5, [r4, #12]
 80127de:	e7cd      	b.n	801277c <__smakebuf_r+0x18>
 80127e0:	08012569 	.word	0x08012569

080127e4 <__malloc_lock>:
 80127e4:	4801      	ldr	r0, [pc, #4]	; (80127ec <__malloc_lock+0x8>)
 80127e6:	f7ff bf96 	b.w	8012716 <__retarget_lock_acquire_recursive>
 80127ea:	bf00      	nop
 80127ec:	2000350c 	.word	0x2000350c

080127f0 <__malloc_unlock>:
 80127f0:	4801      	ldr	r0, [pc, #4]	; (80127f8 <__malloc_unlock+0x8>)
 80127f2:	f7ff bf91 	b.w	8012718 <__retarget_lock_release_recursive>
 80127f6:	bf00      	nop
 80127f8:	2000350c 	.word	0x2000350c

080127fc <_Balloc>:
 80127fc:	b570      	push	{r4, r5, r6, lr}
 80127fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012800:	4604      	mov	r4, r0
 8012802:	460d      	mov	r5, r1
 8012804:	b976      	cbnz	r6, 8012824 <_Balloc+0x28>
 8012806:	2010      	movs	r0, #16
 8012808:	f7fd ff7a 	bl	8010700 <malloc>
 801280c:	4602      	mov	r2, r0
 801280e:	6260      	str	r0, [r4, #36]	; 0x24
 8012810:	b920      	cbnz	r0, 801281c <_Balloc+0x20>
 8012812:	4b18      	ldr	r3, [pc, #96]	; (8012874 <_Balloc+0x78>)
 8012814:	4818      	ldr	r0, [pc, #96]	; (8012878 <_Balloc+0x7c>)
 8012816:	2166      	movs	r1, #102	; 0x66
 8012818:	f000 fe96 	bl	8013548 <__assert_func>
 801281c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012820:	6006      	str	r6, [r0, #0]
 8012822:	60c6      	str	r6, [r0, #12]
 8012824:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012826:	68f3      	ldr	r3, [r6, #12]
 8012828:	b183      	cbz	r3, 801284c <_Balloc+0x50>
 801282a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801282c:	68db      	ldr	r3, [r3, #12]
 801282e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012832:	b9b8      	cbnz	r0, 8012864 <_Balloc+0x68>
 8012834:	2101      	movs	r1, #1
 8012836:	fa01 f605 	lsl.w	r6, r1, r5
 801283a:	1d72      	adds	r2, r6, #5
 801283c:	0092      	lsls	r2, r2, #2
 801283e:	4620      	mov	r0, r4
 8012840:	f000 fb60 	bl	8012f04 <_calloc_r>
 8012844:	b160      	cbz	r0, 8012860 <_Balloc+0x64>
 8012846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801284a:	e00e      	b.n	801286a <_Balloc+0x6e>
 801284c:	2221      	movs	r2, #33	; 0x21
 801284e:	2104      	movs	r1, #4
 8012850:	4620      	mov	r0, r4
 8012852:	f000 fb57 	bl	8012f04 <_calloc_r>
 8012856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012858:	60f0      	str	r0, [r6, #12]
 801285a:	68db      	ldr	r3, [r3, #12]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d1e4      	bne.n	801282a <_Balloc+0x2e>
 8012860:	2000      	movs	r0, #0
 8012862:	bd70      	pop	{r4, r5, r6, pc}
 8012864:	6802      	ldr	r2, [r0, #0]
 8012866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801286a:	2300      	movs	r3, #0
 801286c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012870:	e7f7      	b.n	8012862 <_Balloc+0x66>
 8012872:	bf00      	nop
 8012874:	08014196 	.word	0x08014196
 8012878:	0801427c 	.word	0x0801427c

0801287c <_Bfree>:
 801287c:	b570      	push	{r4, r5, r6, lr}
 801287e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012880:	4605      	mov	r5, r0
 8012882:	460c      	mov	r4, r1
 8012884:	b976      	cbnz	r6, 80128a4 <_Bfree+0x28>
 8012886:	2010      	movs	r0, #16
 8012888:	f7fd ff3a 	bl	8010700 <malloc>
 801288c:	4602      	mov	r2, r0
 801288e:	6268      	str	r0, [r5, #36]	; 0x24
 8012890:	b920      	cbnz	r0, 801289c <_Bfree+0x20>
 8012892:	4b09      	ldr	r3, [pc, #36]	; (80128b8 <_Bfree+0x3c>)
 8012894:	4809      	ldr	r0, [pc, #36]	; (80128bc <_Bfree+0x40>)
 8012896:	218a      	movs	r1, #138	; 0x8a
 8012898:	f000 fe56 	bl	8013548 <__assert_func>
 801289c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80128a0:	6006      	str	r6, [r0, #0]
 80128a2:	60c6      	str	r6, [r0, #12]
 80128a4:	b13c      	cbz	r4, 80128b6 <_Bfree+0x3a>
 80128a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80128a8:	6862      	ldr	r2, [r4, #4]
 80128aa:	68db      	ldr	r3, [r3, #12]
 80128ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80128b0:	6021      	str	r1, [r4, #0]
 80128b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80128b6:	bd70      	pop	{r4, r5, r6, pc}
 80128b8:	08014196 	.word	0x08014196
 80128bc:	0801427c 	.word	0x0801427c

080128c0 <__multadd>:
 80128c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128c4:	690d      	ldr	r5, [r1, #16]
 80128c6:	4607      	mov	r7, r0
 80128c8:	460c      	mov	r4, r1
 80128ca:	461e      	mov	r6, r3
 80128cc:	f101 0c14 	add.w	ip, r1, #20
 80128d0:	2000      	movs	r0, #0
 80128d2:	f8dc 3000 	ldr.w	r3, [ip]
 80128d6:	b299      	uxth	r1, r3
 80128d8:	fb02 6101 	mla	r1, r2, r1, r6
 80128dc:	0c1e      	lsrs	r6, r3, #16
 80128de:	0c0b      	lsrs	r3, r1, #16
 80128e0:	fb02 3306 	mla	r3, r2, r6, r3
 80128e4:	b289      	uxth	r1, r1
 80128e6:	3001      	adds	r0, #1
 80128e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80128ec:	4285      	cmp	r5, r0
 80128ee:	f84c 1b04 	str.w	r1, [ip], #4
 80128f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80128f6:	dcec      	bgt.n	80128d2 <__multadd+0x12>
 80128f8:	b30e      	cbz	r6, 801293e <__multadd+0x7e>
 80128fa:	68a3      	ldr	r3, [r4, #8]
 80128fc:	42ab      	cmp	r3, r5
 80128fe:	dc19      	bgt.n	8012934 <__multadd+0x74>
 8012900:	6861      	ldr	r1, [r4, #4]
 8012902:	4638      	mov	r0, r7
 8012904:	3101      	adds	r1, #1
 8012906:	f7ff ff79 	bl	80127fc <_Balloc>
 801290a:	4680      	mov	r8, r0
 801290c:	b928      	cbnz	r0, 801291a <__multadd+0x5a>
 801290e:	4602      	mov	r2, r0
 8012910:	4b0c      	ldr	r3, [pc, #48]	; (8012944 <__multadd+0x84>)
 8012912:	480d      	ldr	r0, [pc, #52]	; (8012948 <__multadd+0x88>)
 8012914:	21b5      	movs	r1, #181	; 0xb5
 8012916:	f000 fe17 	bl	8013548 <__assert_func>
 801291a:	6922      	ldr	r2, [r4, #16]
 801291c:	3202      	adds	r2, #2
 801291e:	f104 010c 	add.w	r1, r4, #12
 8012922:	0092      	lsls	r2, r2, #2
 8012924:	300c      	adds	r0, #12
 8012926:	f7fd fefb 	bl	8010720 <memcpy>
 801292a:	4621      	mov	r1, r4
 801292c:	4638      	mov	r0, r7
 801292e:	f7ff ffa5 	bl	801287c <_Bfree>
 8012932:	4644      	mov	r4, r8
 8012934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012938:	3501      	adds	r5, #1
 801293a:	615e      	str	r6, [r3, #20]
 801293c:	6125      	str	r5, [r4, #16]
 801293e:	4620      	mov	r0, r4
 8012940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012944:	08014208 	.word	0x08014208
 8012948:	0801427c 	.word	0x0801427c

0801294c <__hi0bits>:
 801294c:	0c03      	lsrs	r3, r0, #16
 801294e:	041b      	lsls	r3, r3, #16
 8012950:	b9d3      	cbnz	r3, 8012988 <__hi0bits+0x3c>
 8012952:	0400      	lsls	r0, r0, #16
 8012954:	2310      	movs	r3, #16
 8012956:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801295a:	bf04      	itt	eq
 801295c:	0200      	lsleq	r0, r0, #8
 801295e:	3308      	addeq	r3, #8
 8012960:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012964:	bf04      	itt	eq
 8012966:	0100      	lsleq	r0, r0, #4
 8012968:	3304      	addeq	r3, #4
 801296a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801296e:	bf04      	itt	eq
 8012970:	0080      	lsleq	r0, r0, #2
 8012972:	3302      	addeq	r3, #2
 8012974:	2800      	cmp	r0, #0
 8012976:	db05      	blt.n	8012984 <__hi0bits+0x38>
 8012978:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801297c:	f103 0301 	add.w	r3, r3, #1
 8012980:	bf08      	it	eq
 8012982:	2320      	moveq	r3, #32
 8012984:	4618      	mov	r0, r3
 8012986:	4770      	bx	lr
 8012988:	2300      	movs	r3, #0
 801298a:	e7e4      	b.n	8012956 <__hi0bits+0xa>

0801298c <__lo0bits>:
 801298c:	6803      	ldr	r3, [r0, #0]
 801298e:	f013 0207 	ands.w	r2, r3, #7
 8012992:	4601      	mov	r1, r0
 8012994:	d00b      	beq.n	80129ae <__lo0bits+0x22>
 8012996:	07da      	lsls	r2, r3, #31
 8012998:	d423      	bmi.n	80129e2 <__lo0bits+0x56>
 801299a:	0798      	lsls	r0, r3, #30
 801299c:	bf49      	itett	mi
 801299e:	085b      	lsrmi	r3, r3, #1
 80129a0:	089b      	lsrpl	r3, r3, #2
 80129a2:	2001      	movmi	r0, #1
 80129a4:	600b      	strmi	r3, [r1, #0]
 80129a6:	bf5c      	itt	pl
 80129a8:	600b      	strpl	r3, [r1, #0]
 80129aa:	2002      	movpl	r0, #2
 80129ac:	4770      	bx	lr
 80129ae:	b298      	uxth	r0, r3
 80129b0:	b9a8      	cbnz	r0, 80129de <__lo0bits+0x52>
 80129b2:	0c1b      	lsrs	r3, r3, #16
 80129b4:	2010      	movs	r0, #16
 80129b6:	b2da      	uxtb	r2, r3
 80129b8:	b90a      	cbnz	r2, 80129be <__lo0bits+0x32>
 80129ba:	3008      	adds	r0, #8
 80129bc:	0a1b      	lsrs	r3, r3, #8
 80129be:	071a      	lsls	r2, r3, #28
 80129c0:	bf04      	itt	eq
 80129c2:	091b      	lsreq	r3, r3, #4
 80129c4:	3004      	addeq	r0, #4
 80129c6:	079a      	lsls	r2, r3, #30
 80129c8:	bf04      	itt	eq
 80129ca:	089b      	lsreq	r3, r3, #2
 80129cc:	3002      	addeq	r0, #2
 80129ce:	07da      	lsls	r2, r3, #31
 80129d0:	d403      	bmi.n	80129da <__lo0bits+0x4e>
 80129d2:	085b      	lsrs	r3, r3, #1
 80129d4:	f100 0001 	add.w	r0, r0, #1
 80129d8:	d005      	beq.n	80129e6 <__lo0bits+0x5a>
 80129da:	600b      	str	r3, [r1, #0]
 80129dc:	4770      	bx	lr
 80129de:	4610      	mov	r0, r2
 80129e0:	e7e9      	b.n	80129b6 <__lo0bits+0x2a>
 80129e2:	2000      	movs	r0, #0
 80129e4:	4770      	bx	lr
 80129e6:	2020      	movs	r0, #32
 80129e8:	4770      	bx	lr
	...

080129ec <__i2b>:
 80129ec:	b510      	push	{r4, lr}
 80129ee:	460c      	mov	r4, r1
 80129f0:	2101      	movs	r1, #1
 80129f2:	f7ff ff03 	bl	80127fc <_Balloc>
 80129f6:	4602      	mov	r2, r0
 80129f8:	b928      	cbnz	r0, 8012a06 <__i2b+0x1a>
 80129fa:	4b05      	ldr	r3, [pc, #20]	; (8012a10 <__i2b+0x24>)
 80129fc:	4805      	ldr	r0, [pc, #20]	; (8012a14 <__i2b+0x28>)
 80129fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012a02:	f000 fda1 	bl	8013548 <__assert_func>
 8012a06:	2301      	movs	r3, #1
 8012a08:	6144      	str	r4, [r0, #20]
 8012a0a:	6103      	str	r3, [r0, #16]
 8012a0c:	bd10      	pop	{r4, pc}
 8012a0e:	bf00      	nop
 8012a10:	08014208 	.word	0x08014208
 8012a14:	0801427c 	.word	0x0801427c

08012a18 <__multiply>:
 8012a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1c:	4691      	mov	r9, r2
 8012a1e:	690a      	ldr	r2, [r1, #16]
 8012a20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	bfb8      	it	lt
 8012a28:	460b      	movlt	r3, r1
 8012a2a:	460c      	mov	r4, r1
 8012a2c:	bfbc      	itt	lt
 8012a2e:	464c      	movlt	r4, r9
 8012a30:	4699      	movlt	r9, r3
 8012a32:	6927      	ldr	r7, [r4, #16]
 8012a34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012a38:	68a3      	ldr	r3, [r4, #8]
 8012a3a:	6861      	ldr	r1, [r4, #4]
 8012a3c:	eb07 060a 	add.w	r6, r7, sl
 8012a40:	42b3      	cmp	r3, r6
 8012a42:	b085      	sub	sp, #20
 8012a44:	bfb8      	it	lt
 8012a46:	3101      	addlt	r1, #1
 8012a48:	f7ff fed8 	bl	80127fc <_Balloc>
 8012a4c:	b930      	cbnz	r0, 8012a5c <__multiply+0x44>
 8012a4e:	4602      	mov	r2, r0
 8012a50:	4b44      	ldr	r3, [pc, #272]	; (8012b64 <__multiply+0x14c>)
 8012a52:	4845      	ldr	r0, [pc, #276]	; (8012b68 <__multiply+0x150>)
 8012a54:	f240 115d 	movw	r1, #349	; 0x15d
 8012a58:	f000 fd76 	bl	8013548 <__assert_func>
 8012a5c:	f100 0514 	add.w	r5, r0, #20
 8012a60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012a64:	462b      	mov	r3, r5
 8012a66:	2200      	movs	r2, #0
 8012a68:	4543      	cmp	r3, r8
 8012a6a:	d321      	bcc.n	8012ab0 <__multiply+0x98>
 8012a6c:	f104 0314 	add.w	r3, r4, #20
 8012a70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012a74:	f109 0314 	add.w	r3, r9, #20
 8012a78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012a7c:	9202      	str	r2, [sp, #8]
 8012a7e:	1b3a      	subs	r2, r7, r4
 8012a80:	3a15      	subs	r2, #21
 8012a82:	f022 0203 	bic.w	r2, r2, #3
 8012a86:	3204      	adds	r2, #4
 8012a88:	f104 0115 	add.w	r1, r4, #21
 8012a8c:	428f      	cmp	r7, r1
 8012a8e:	bf38      	it	cc
 8012a90:	2204      	movcc	r2, #4
 8012a92:	9201      	str	r2, [sp, #4]
 8012a94:	9a02      	ldr	r2, [sp, #8]
 8012a96:	9303      	str	r3, [sp, #12]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d80c      	bhi.n	8012ab6 <__multiply+0x9e>
 8012a9c:	2e00      	cmp	r6, #0
 8012a9e:	dd03      	ble.n	8012aa8 <__multiply+0x90>
 8012aa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d05a      	beq.n	8012b5e <__multiply+0x146>
 8012aa8:	6106      	str	r6, [r0, #16]
 8012aaa:	b005      	add	sp, #20
 8012aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ab0:	f843 2b04 	str.w	r2, [r3], #4
 8012ab4:	e7d8      	b.n	8012a68 <__multiply+0x50>
 8012ab6:	f8b3 a000 	ldrh.w	sl, [r3]
 8012aba:	f1ba 0f00 	cmp.w	sl, #0
 8012abe:	d024      	beq.n	8012b0a <__multiply+0xf2>
 8012ac0:	f104 0e14 	add.w	lr, r4, #20
 8012ac4:	46a9      	mov	r9, r5
 8012ac6:	f04f 0c00 	mov.w	ip, #0
 8012aca:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012ace:	f8d9 1000 	ldr.w	r1, [r9]
 8012ad2:	fa1f fb82 	uxth.w	fp, r2
 8012ad6:	b289      	uxth	r1, r1
 8012ad8:	fb0a 110b 	mla	r1, sl, fp, r1
 8012adc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012ae0:	f8d9 2000 	ldr.w	r2, [r9]
 8012ae4:	4461      	add	r1, ip
 8012ae6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012aea:	fb0a c20b 	mla	r2, sl, fp, ip
 8012aee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012af2:	b289      	uxth	r1, r1
 8012af4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012af8:	4577      	cmp	r7, lr
 8012afa:	f849 1b04 	str.w	r1, [r9], #4
 8012afe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012b02:	d8e2      	bhi.n	8012aca <__multiply+0xb2>
 8012b04:	9a01      	ldr	r2, [sp, #4]
 8012b06:	f845 c002 	str.w	ip, [r5, r2]
 8012b0a:	9a03      	ldr	r2, [sp, #12]
 8012b0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012b10:	3304      	adds	r3, #4
 8012b12:	f1b9 0f00 	cmp.w	r9, #0
 8012b16:	d020      	beq.n	8012b5a <__multiply+0x142>
 8012b18:	6829      	ldr	r1, [r5, #0]
 8012b1a:	f104 0c14 	add.w	ip, r4, #20
 8012b1e:	46ae      	mov	lr, r5
 8012b20:	f04f 0a00 	mov.w	sl, #0
 8012b24:	f8bc b000 	ldrh.w	fp, [ip]
 8012b28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012b2c:	fb09 220b 	mla	r2, r9, fp, r2
 8012b30:	4492      	add	sl, r2
 8012b32:	b289      	uxth	r1, r1
 8012b34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012b38:	f84e 1b04 	str.w	r1, [lr], #4
 8012b3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012b40:	f8be 1000 	ldrh.w	r1, [lr]
 8012b44:	0c12      	lsrs	r2, r2, #16
 8012b46:	fb09 1102 	mla	r1, r9, r2, r1
 8012b4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012b4e:	4567      	cmp	r7, ip
 8012b50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012b54:	d8e6      	bhi.n	8012b24 <__multiply+0x10c>
 8012b56:	9a01      	ldr	r2, [sp, #4]
 8012b58:	50a9      	str	r1, [r5, r2]
 8012b5a:	3504      	adds	r5, #4
 8012b5c:	e79a      	b.n	8012a94 <__multiply+0x7c>
 8012b5e:	3e01      	subs	r6, #1
 8012b60:	e79c      	b.n	8012a9c <__multiply+0x84>
 8012b62:	bf00      	nop
 8012b64:	08014208 	.word	0x08014208
 8012b68:	0801427c 	.word	0x0801427c

08012b6c <__pow5mult>:
 8012b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b70:	4615      	mov	r5, r2
 8012b72:	f012 0203 	ands.w	r2, r2, #3
 8012b76:	4606      	mov	r6, r0
 8012b78:	460f      	mov	r7, r1
 8012b7a:	d007      	beq.n	8012b8c <__pow5mult+0x20>
 8012b7c:	4c25      	ldr	r4, [pc, #148]	; (8012c14 <__pow5mult+0xa8>)
 8012b7e:	3a01      	subs	r2, #1
 8012b80:	2300      	movs	r3, #0
 8012b82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b86:	f7ff fe9b 	bl	80128c0 <__multadd>
 8012b8a:	4607      	mov	r7, r0
 8012b8c:	10ad      	asrs	r5, r5, #2
 8012b8e:	d03d      	beq.n	8012c0c <__pow5mult+0xa0>
 8012b90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012b92:	b97c      	cbnz	r4, 8012bb4 <__pow5mult+0x48>
 8012b94:	2010      	movs	r0, #16
 8012b96:	f7fd fdb3 	bl	8010700 <malloc>
 8012b9a:	4602      	mov	r2, r0
 8012b9c:	6270      	str	r0, [r6, #36]	; 0x24
 8012b9e:	b928      	cbnz	r0, 8012bac <__pow5mult+0x40>
 8012ba0:	4b1d      	ldr	r3, [pc, #116]	; (8012c18 <__pow5mult+0xac>)
 8012ba2:	481e      	ldr	r0, [pc, #120]	; (8012c1c <__pow5mult+0xb0>)
 8012ba4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012ba8:	f000 fcce 	bl	8013548 <__assert_func>
 8012bac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012bb0:	6004      	str	r4, [r0, #0]
 8012bb2:	60c4      	str	r4, [r0, #12]
 8012bb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012bb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012bbc:	b94c      	cbnz	r4, 8012bd2 <__pow5mult+0x66>
 8012bbe:	f240 2171 	movw	r1, #625	; 0x271
 8012bc2:	4630      	mov	r0, r6
 8012bc4:	f7ff ff12 	bl	80129ec <__i2b>
 8012bc8:	2300      	movs	r3, #0
 8012bca:	f8c8 0008 	str.w	r0, [r8, #8]
 8012bce:	4604      	mov	r4, r0
 8012bd0:	6003      	str	r3, [r0, #0]
 8012bd2:	f04f 0900 	mov.w	r9, #0
 8012bd6:	07eb      	lsls	r3, r5, #31
 8012bd8:	d50a      	bpl.n	8012bf0 <__pow5mult+0x84>
 8012bda:	4639      	mov	r1, r7
 8012bdc:	4622      	mov	r2, r4
 8012bde:	4630      	mov	r0, r6
 8012be0:	f7ff ff1a 	bl	8012a18 <__multiply>
 8012be4:	4639      	mov	r1, r7
 8012be6:	4680      	mov	r8, r0
 8012be8:	4630      	mov	r0, r6
 8012bea:	f7ff fe47 	bl	801287c <_Bfree>
 8012bee:	4647      	mov	r7, r8
 8012bf0:	106d      	asrs	r5, r5, #1
 8012bf2:	d00b      	beq.n	8012c0c <__pow5mult+0xa0>
 8012bf4:	6820      	ldr	r0, [r4, #0]
 8012bf6:	b938      	cbnz	r0, 8012c08 <__pow5mult+0x9c>
 8012bf8:	4622      	mov	r2, r4
 8012bfa:	4621      	mov	r1, r4
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	f7ff ff0b 	bl	8012a18 <__multiply>
 8012c02:	6020      	str	r0, [r4, #0]
 8012c04:	f8c0 9000 	str.w	r9, [r0]
 8012c08:	4604      	mov	r4, r0
 8012c0a:	e7e4      	b.n	8012bd6 <__pow5mult+0x6a>
 8012c0c:	4638      	mov	r0, r7
 8012c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c12:	bf00      	nop
 8012c14:	080143c8 	.word	0x080143c8
 8012c18:	08014196 	.word	0x08014196
 8012c1c:	0801427c 	.word	0x0801427c

08012c20 <__lshift>:
 8012c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c24:	460c      	mov	r4, r1
 8012c26:	6849      	ldr	r1, [r1, #4]
 8012c28:	6923      	ldr	r3, [r4, #16]
 8012c2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012c2e:	68a3      	ldr	r3, [r4, #8]
 8012c30:	4607      	mov	r7, r0
 8012c32:	4691      	mov	r9, r2
 8012c34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c38:	f108 0601 	add.w	r6, r8, #1
 8012c3c:	42b3      	cmp	r3, r6
 8012c3e:	db0b      	blt.n	8012c58 <__lshift+0x38>
 8012c40:	4638      	mov	r0, r7
 8012c42:	f7ff fddb 	bl	80127fc <_Balloc>
 8012c46:	4605      	mov	r5, r0
 8012c48:	b948      	cbnz	r0, 8012c5e <__lshift+0x3e>
 8012c4a:	4602      	mov	r2, r0
 8012c4c:	4b2a      	ldr	r3, [pc, #168]	; (8012cf8 <__lshift+0xd8>)
 8012c4e:	482b      	ldr	r0, [pc, #172]	; (8012cfc <__lshift+0xdc>)
 8012c50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012c54:	f000 fc78 	bl	8013548 <__assert_func>
 8012c58:	3101      	adds	r1, #1
 8012c5a:	005b      	lsls	r3, r3, #1
 8012c5c:	e7ee      	b.n	8012c3c <__lshift+0x1c>
 8012c5e:	2300      	movs	r3, #0
 8012c60:	f100 0114 	add.w	r1, r0, #20
 8012c64:	f100 0210 	add.w	r2, r0, #16
 8012c68:	4618      	mov	r0, r3
 8012c6a:	4553      	cmp	r3, sl
 8012c6c:	db37      	blt.n	8012cde <__lshift+0xbe>
 8012c6e:	6920      	ldr	r0, [r4, #16]
 8012c70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c74:	f104 0314 	add.w	r3, r4, #20
 8012c78:	f019 091f 	ands.w	r9, r9, #31
 8012c7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012c84:	d02f      	beq.n	8012ce6 <__lshift+0xc6>
 8012c86:	f1c9 0e20 	rsb	lr, r9, #32
 8012c8a:	468a      	mov	sl, r1
 8012c8c:	f04f 0c00 	mov.w	ip, #0
 8012c90:	681a      	ldr	r2, [r3, #0]
 8012c92:	fa02 f209 	lsl.w	r2, r2, r9
 8012c96:	ea42 020c 	orr.w	r2, r2, ip
 8012c9a:	f84a 2b04 	str.w	r2, [sl], #4
 8012c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ca2:	4298      	cmp	r0, r3
 8012ca4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012ca8:	d8f2      	bhi.n	8012c90 <__lshift+0x70>
 8012caa:	1b03      	subs	r3, r0, r4
 8012cac:	3b15      	subs	r3, #21
 8012cae:	f023 0303 	bic.w	r3, r3, #3
 8012cb2:	3304      	adds	r3, #4
 8012cb4:	f104 0215 	add.w	r2, r4, #21
 8012cb8:	4290      	cmp	r0, r2
 8012cba:	bf38      	it	cc
 8012cbc:	2304      	movcc	r3, #4
 8012cbe:	f841 c003 	str.w	ip, [r1, r3]
 8012cc2:	f1bc 0f00 	cmp.w	ip, #0
 8012cc6:	d001      	beq.n	8012ccc <__lshift+0xac>
 8012cc8:	f108 0602 	add.w	r6, r8, #2
 8012ccc:	3e01      	subs	r6, #1
 8012cce:	4638      	mov	r0, r7
 8012cd0:	612e      	str	r6, [r5, #16]
 8012cd2:	4621      	mov	r1, r4
 8012cd4:	f7ff fdd2 	bl	801287c <_Bfree>
 8012cd8:	4628      	mov	r0, r5
 8012cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cde:	f842 0f04 	str.w	r0, [r2, #4]!
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	e7c1      	b.n	8012c6a <__lshift+0x4a>
 8012ce6:	3904      	subs	r1, #4
 8012ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cec:	f841 2f04 	str.w	r2, [r1, #4]!
 8012cf0:	4298      	cmp	r0, r3
 8012cf2:	d8f9      	bhi.n	8012ce8 <__lshift+0xc8>
 8012cf4:	e7ea      	b.n	8012ccc <__lshift+0xac>
 8012cf6:	bf00      	nop
 8012cf8:	08014208 	.word	0x08014208
 8012cfc:	0801427c 	.word	0x0801427c

08012d00 <__mcmp>:
 8012d00:	b530      	push	{r4, r5, lr}
 8012d02:	6902      	ldr	r2, [r0, #16]
 8012d04:	690c      	ldr	r4, [r1, #16]
 8012d06:	1b12      	subs	r2, r2, r4
 8012d08:	d10e      	bne.n	8012d28 <__mcmp+0x28>
 8012d0a:	f100 0314 	add.w	r3, r0, #20
 8012d0e:	3114      	adds	r1, #20
 8012d10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012d14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012d18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012d1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012d20:	42a5      	cmp	r5, r4
 8012d22:	d003      	beq.n	8012d2c <__mcmp+0x2c>
 8012d24:	d305      	bcc.n	8012d32 <__mcmp+0x32>
 8012d26:	2201      	movs	r2, #1
 8012d28:	4610      	mov	r0, r2
 8012d2a:	bd30      	pop	{r4, r5, pc}
 8012d2c:	4283      	cmp	r3, r0
 8012d2e:	d3f3      	bcc.n	8012d18 <__mcmp+0x18>
 8012d30:	e7fa      	b.n	8012d28 <__mcmp+0x28>
 8012d32:	f04f 32ff 	mov.w	r2, #4294967295
 8012d36:	e7f7      	b.n	8012d28 <__mcmp+0x28>

08012d38 <__mdiff>:
 8012d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d3c:	460c      	mov	r4, r1
 8012d3e:	4606      	mov	r6, r0
 8012d40:	4611      	mov	r1, r2
 8012d42:	4620      	mov	r0, r4
 8012d44:	4690      	mov	r8, r2
 8012d46:	f7ff ffdb 	bl	8012d00 <__mcmp>
 8012d4a:	1e05      	subs	r5, r0, #0
 8012d4c:	d110      	bne.n	8012d70 <__mdiff+0x38>
 8012d4e:	4629      	mov	r1, r5
 8012d50:	4630      	mov	r0, r6
 8012d52:	f7ff fd53 	bl	80127fc <_Balloc>
 8012d56:	b930      	cbnz	r0, 8012d66 <__mdiff+0x2e>
 8012d58:	4b3a      	ldr	r3, [pc, #232]	; (8012e44 <__mdiff+0x10c>)
 8012d5a:	4602      	mov	r2, r0
 8012d5c:	f240 2132 	movw	r1, #562	; 0x232
 8012d60:	4839      	ldr	r0, [pc, #228]	; (8012e48 <__mdiff+0x110>)
 8012d62:	f000 fbf1 	bl	8013548 <__assert_func>
 8012d66:	2301      	movs	r3, #1
 8012d68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012d6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d70:	bfa4      	itt	ge
 8012d72:	4643      	movge	r3, r8
 8012d74:	46a0      	movge	r8, r4
 8012d76:	4630      	mov	r0, r6
 8012d78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012d7c:	bfa6      	itte	ge
 8012d7e:	461c      	movge	r4, r3
 8012d80:	2500      	movge	r5, #0
 8012d82:	2501      	movlt	r5, #1
 8012d84:	f7ff fd3a 	bl	80127fc <_Balloc>
 8012d88:	b920      	cbnz	r0, 8012d94 <__mdiff+0x5c>
 8012d8a:	4b2e      	ldr	r3, [pc, #184]	; (8012e44 <__mdiff+0x10c>)
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012d92:	e7e5      	b.n	8012d60 <__mdiff+0x28>
 8012d94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012d98:	6926      	ldr	r6, [r4, #16]
 8012d9a:	60c5      	str	r5, [r0, #12]
 8012d9c:	f104 0914 	add.w	r9, r4, #20
 8012da0:	f108 0514 	add.w	r5, r8, #20
 8012da4:	f100 0e14 	add.w	lr, r0, #20
 8012da8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012dac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012db0:	f108 0210 	add.w	r2, r8, #16
 8012db4:	46f2      	mov	sl, lr
 8012db6:	2100      	movs	r1, #0
 8012db8:	f859 3b04 	ldr.w	r3, [r9], #4
 8012dbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012dc0:	fa1f f883 	uxth.w	r8, r3
 8012dc4:	fa11 f18b 	uxtah	r1, r1, fp
 8012dc8:	0c1b      	lsrs	r3, r3, #16
 8012dca:	eba1 0808 	sub.w	r8, r1, r8
 8012dce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012dd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012dd6:	fa1f f888 	uxth.w	r8, r8
 8012dda:	1419      	asrs	r1, r3, #16
 8012ddc:	454e      	cmp	r6, r9
 8012dde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012de2:	f84a 3b04 	str.w	r3, [sl], #4
 8012de6:	d8e7      	bhi.n	8012db8 <__mdiff+0x80>
 8012de8:	1b33      	subs	r3, r6, r4
 8012dea:	3b15      	subs	r3, #21
 8012dec:	f023 0303 	bic.w	r3, r3, #3
 8012df0:	3304      	adds	r3, #4
 8012df2:	3415      	adds	r4, #21
 8012df4:	42a6      	cmp	r6, r4
 8012df6:	bf38      	it	cc
 8012df8:	2304      	movcc	r3, #4
 8012dfa:	441d      	add	r5, r3
 8012dfc:	4473      	add	r3, lr
 8012dfe:	469e      	mov	lr, r3
 8012e00:	462e      	mov	r6, r5
 8012e02:	4566      	cmp	r6, ip
 8012e04:	d30e      	bcc.n	8012e24 <__mdiff+0xec>
 8012e06:	f10c 0203 	add.w	r2, ip, #3
 8012e0a:	1b52      	subs	r2, r2, r5
 8012e0c:	f022 0203 	bic.w	r2, r2, #3
 8012e10:	3d03      	subs	r5, #3
 8012e12:	45ac      	cmp	ip, r5
 8012e14:	bf38      	it	cc
 8012e16:	2200      	movcc	r2, #0
 8012e18:	441a      	add	r2, r3
 8012e1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012e1e:	b17b      	cbz	r3, 8012e40 <__mdiff+0x108>
 8012e20:	6107      	str	r7, [r0, #16]
 8012e22:	e7a3      	b.n	8012d6c <__mdiff+0x34>
 8012e24:	f856 8b04 	ldr.w	r8, [r6], #4
 8012e28:	fa11 f288 	uxtah	r2, r1, r8
 8012e2c:	1414      	asrs	r4, r2, #16
 8012e2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012e32:	b292      	uxth	r2, r2
 8012e34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012e38:	f84e 2b04 	str.w	r2, [lr], #4
 8012e3c:	1421      	asrs	r1, r4, #16
 8012e3e:	e7e0      	b.n	8012e02 <__mdiff+0xca>
 8012e40:	3f01      	subs	r7, #1
 8012e42:	e7ea      	b.n	8012e1a <__mdiff+0xe2>
 8012e44:	08014208 	.word	0x08014208
 8012e48:	0801427c 	.word	0x0801427c

08012e4c <__d2b>:
 8012e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e50:	4689      	mov	r9, r1
 8012e52:	2101      	movs	r1, #1
 8012e54:	ec57 6b10 	vmov	r6, r7, d0
 8012e58:	4690      	mov	r8, r2
 8012e5a:	f7ff fccf 	bl	80127fc <_Balloc>
 8012e5e:	4604      	mov	r4, r0
 8012e60:	b930      	cbnz	r0, 8012e70 <__d2b+0x24>
 8012e62:	4602      	mov	r2, r0
 8012e64:	4b25      	ldr	r3, [pc, #148]	; (8012efc <__d2b+0xb0>)
 8012e66:	4826      	ldr	r0, [pc, #152]	; (8012f00 <__d2b+0xb4>)
 8012e68:	f240 310a 	movw	r1, #778	; 0x30a
 8012e6c:	f000 fb6c 	bl	8013548 <__assert_func>
 8012e70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012e74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012e78:	bb35      	cbnz	r5, 8012ec8 <__d2b+0x7c>
 8012e7a:	2e00      	cmp	r6, #0
 8012e7c:	9301      	str	r3, [sp, #4]
 8012e7e:	d028      	beq.n	8012ed2 <__d2b+0x86>
 8012e80:	4668      	mov	r0, sp
 8012e82:	9600      	str	r6, [sp, #0]
 8012e84:	f7ff fd82 	bl	801298c <__lo0bits>
 8012e88:	9900      	ldr	r1, [sp, #0]
 8012e8a:	b300      	cbz	r0, 8012ece <__d2b+0x82>
 8012e8c:	9a01      	ldr	r2, [sp, #4]
 8012e8e:	f1c0 0320 	rsb	r3, r0, #32
 8012e92:	fa02 f303 	lsl.w	r3, r2, r3
 8012e96:	430b      	orrs	r3, r1
 8012e98:	40c2      	lsrs	r2, r0
 8012e9a:	6163      	str	r3, [r4, #20]
 8012e9c:	9201      	str	r2, [sp, #4]
 8012e9e:	9b01      	ldr	r3, [sp, #4]
 8012ea0:	61a3      	str	r3, [r4, #24]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	bf14      	ite	ne
 8012ea6:	2202      	movne	r2, #2
 8012ea8:	2201      	moveq	r2, #1
 8012eaa:	6122      	str	r2, [r4, #16]
 8012eac:	b1d5      	cbz	r5, 8012ee4 <__d2b+0x98>
 8012eae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012eb2:	4405      	add	r5, r0
 8012eb4:	f8c9 5000 	str.w	r5, [r9]
 8012eb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012ebc:	f8c8 0000 	str.w	r0, [r8]
 8012ec0:	4620      	mov	r0, r4
 8012ec2:	b003      	add	sp, #12
 8012ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012ecc:	e7d5      	b.n	8012e7a <__d2b+0x2e>
 8012ece:	6161      	str	r1, [r4, #20]
 8012ed0:	e7e5      	b.n	8012e9e <__d2b+0x52>
 8012ed2:	a801      	add	r0, sp, #4
 8012ed4:	f7ff fd5a 	bl	801298c <__lo0bits>
 8012ed8:	9b01      	ldr	r3, [sp, #4]
 8012eda:	6163      	str	r3, [r4, #20]
 8012edc:	2201      	movs	r2, #1
 8012ede:	6122      	str	r2, [r4, #16]
 8012ee0:	3020      	adds	r0, #32
 8012ee2:	e7e3      	b.n	8012eac <__d2b+0x60>
 8012ee4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012ee8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012eec:	f8c9 0000 	str.w	r0, [r9]
 8012ef0:	6918      	ldr	r0, [r3, #16]
 8012ef2:	f7ff fd2b 	bl	801294c <__hi0bits>
 8012ef6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012efa:	e7df      	b.n	8012ebc <__d2b+0x70>
 8012efc:	08014208 	.word	0x08014208
 8012f00:	0801427c 	.word	0x0801427c

08012f04 <_calloc_r>:
 8012f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f06:	fba1 2402 	umull	r2, r4, r1, r2
 8012f0a:	b94c      	cbnz	r4, 8012f20 <_calloc_r+0x1c>
 8012f0c:	4611      	mov	r1, r2
 8012f0e:	9201      	str	r2, [sp, #4]
 8012f10:	f7fd fc88 	bl	8010824 <_malloc_r>
 8012f14:	9a01      	ldr	r2, [sp, #4]
 8012f16:	4605      	mov	r5, r0
 8012f18:	b930      	cbnz	r0, 8012f28 <_calloc_r+0x24>
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	b003      	add	sp, #12
 8012f1e:	bd30      	pop	{r4, r5, pc}
 8012f20:	220c      	movs	r2, #12
 8012f22:	6002      	str	r2, [r0, #0]
 8012f24:	2500      	movs	r5, #0
 8012f26:	e7f8      	b.n	8012f1a <_calloc_r+0x16>
 8012f28:	4621      	mov	r1, r4
 8012f2a:	f7fd fc07 	bl	801073c <memset>
 8012f2e:	e7f4      	b.n	8012f1a <_calloc_r+0x16>

08012f30 <__ssputs_r>:
 8012f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f34:	688e      	ldr	r6, [r1, #8]
 8012f36:	429e      	cmp	r6, r3
 8012f38:	4682      	mov	sl, r0
 8012f3a:	460c      	mov	r4, r1
 8012f3c:	4690      	mov	r8, r2
 8012f3e:	461f      	mov	r7, r3
 8012f40:	d838      	bhi.n	8012fb4 <__ssputs_r+0x84>
 8012f42:	898a      	ldrh	r2, [r1, #12]
 8012f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012f48:	d032      	beq.n	8012fb0 <__ssputs_r+0x80>
 8012f4a:	6825      	ldr	r5, [r4, #0]
 8012f4c:	6909      	ldr	r1, [r1, #16]
 8012f4e:	eba5 0901 	sub.w	r9, r5, r1
 8012f52:	6965      	ldr	r5, [r4, #20]
 8012f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	444b      	add	r3, r9
 8012f60:	106d      	asrs	r5, r5, #1
 8012f62:	429d      	cmp	r5, r3
 8012f64:	bf38      	it	cc
 8012f66:	461d      	movcc	r5, r3
 8012f68:	0553      	lsls	r3, r2, #21
 8012f6a:	d531      	bpl.n	8012fd0 <__ssputs_r+0xa0>
 8012f6c:	4629      	mov	r1, r5
 8012f6e:	f7fd fc59 	bl	8010824 <_malloc_r>
 8012f72:	4606      	mov	r6, r0
 8012f74:	b950      	cbnz	r0, 8012f8c <__ssputs_r+0x5c>
 8012f76:	230c      	movs	r3, #12
 8012f78:	f8ca 3000 	str.w	r3, [sl]
 8012f7c:	89a3      	ldrh	r3, [r4, #12]
 8012f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f82:	81a3      	strh	r3, [r4, #12]
 8012f84:	f04f 30ff 	mov.w	r0, #4294967295
 8012f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f8c:	6921      	ldr	r1, [r4, #16]
 8012f8e:	464a      	mov	r2, r9
 8012f90:	f7fd fbc6 	bl	8010720 <memcpy>
 8012f94:	89a3      	ldrh	r3, [r4, #12]
 8012f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f9e:	81a3      	strh	r3, [r4, #12]
 8012fa0:	6126      	str	r6, [r4, #16]
 8012fa2:	6165      	str	r5, [r4, #20]
 8012fa4:	444e      	add	r6, r9
 8012fa6:	eba5 0509 	sub.w	r5, r5, r9
 8012faa:	6026      	str	r6, [r4, #0]
 8012fac:	60a5      	str	r5, [r4, #8]
 8012fae:	463e      	mov	r6, r7
 8012fb0:	42be      	cmp	r6, r7
 8012fb2:	d900      	bls.n	8012fb6 <__ssputs_r+0x86>
 8012fb4:	463e      	mov	r6, r7
 8012fb6:	6820      	ldr	r0, [r4, #0]
 8012fb8:	4632      	mov	r2, r6
 8012fba:	4641      	mov	r1, r8
 8012fbc:	f000 fb4a 	bl	8013654 <memmove>
 8012fc0:	68a3      	ldr	r3, [r4, #8]
 8012fc2:	1b9b      	subs	r3, r3, r6
 8012fc4:	60a3      	str	r3, [r4, #8]
 8012fc6:	6823      	ldr	r3, [r4, #0]
 8012fc8:	4433      	add	r3, r6
 8012fca:	6023      	str	r3, [r4, #0]
 8012fcc:	2000      	movs	r0, #0
 8012fce:	e7db      	b.n	8012f88 <__ssputs_r+0x58>
 8012fd0:	462a      	mov	r2, r5
 8012fd2:	f000 fb59 	bl	8013688 <_realloc_r>
 8012fd6:	4606      	mov	r6, r0
 8012fd8:	2800      	cmp	r0, #0
 8012fda:	d1e1      	bne.n	8012fa0 <__ssputs_r+0x70>
 8012fdc:	6921      	ldr	r1, [r4, #16]
 8012fde:	4650      	mov	r0, sl
 8012fe0:	f7fd fbb4 	bl	801074c <_free_r>
 8012fe4:	e7c7      	b.n	8012f76 <__ssputs_r+0x46>
	...

08012fe8 <_svfiprintf_r>:
 8012fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fec:	4698      	mov	r8, r3
 8012fee:	898b      	ldrh	r3, [r1, #12]
 8012ff0:	061b      	lsls	r3, r3, #24
 8012ff2:	b09d      	sub	sp, #116	; 0x74
 8012ff4:	4607      	mov	r7, r0
 8012ff6:	460d      	mov	r5, r1
 8012ff8:	4614      	mov	r4, r2
 8012ffa:	d50e      	bpl.n	801301a <_svfiprintf_r+0x32>
 8012ffc:	690b      	ldr	r3, [r1, #16]
 8012ffe:	b963      	cbnz	r3, 801301a <_svfiprintf_r+0x32>
 8013000:	2140      	movs	r1, #64	; 0x40
 8013002:	f7fd fc0f 	bl	8010824 <_malloc_r>
 8013006:	6028      	str	r0, [r5, #0]
 8013008:	6128      	str	r0, [r5, #16]
 801300a:	b920      	cbnz	r0, 8013016 <_svfiprintf_r+0x2e>
 801300c:	230c      	movs	r3, #12
 801300e:	603b      	str	r3, [r7, #0]
 8013010:	f04f 30ff 	mov.w	r0, #4294967295
 8013014:	e0d1      	b.n	80131ba <_svfiprintf_r+0x1d2>
 8013016:	2340      	movs	r3, #64	; 0x40
 8013018:	616b      	str	r3, [r5, #20]
 801301a:	2300      	movs	r3, #0
 801301c:	9309      	str	r3, [sp, #36]	; 0x24
 801301e:	2320      	movs	r3, #32
 8013020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013024:	f8cd 800c 	str.w	r8, [sp, #12]
 8013028:	2330      	movs	r3, #48	; 0x30
 801302a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80131d4 <_svfiprintf_r+0x1ec>
 801302e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013032:	f04f 0901 	mov.w	r9, #1
 8013036:	4623      	mov	r3, r4
 8013038:	469a      	mov	sl, r3
 801303a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801303e:	b10a      	cbz	r2, 8013044 <_svfiprintf_r+0x5c>
 8013040:	2a25      	cmp	r2, #37	; 0x25
 8013042:	d1f9      	bne.n	8013038 <_svfiprintf_r+0x50>
 8013044:	ebba 0b04 	subs.w	fp, sl, r4
 8013048:	d00b      	beq.n	8013062 <_svfiprintf_r+0x7a>
 801304a:	465b      	mov	r3, fp
 801304c:	4622      	mov	r2, r4
 801304e:	4629      	mov	r1, r5
 8013050:	4638      	mov	r0, r7
 8013052:	f7ff ff6d 	bl	8012f30 <__ssputs_r>
 8013056:	3001      	adds	r0, #1
 8013058:	f000 80aa 	beq.w	80131b0 <_svfiprintf_r+0x1c8>
 801305c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801305e:	445a      	add	r2, fp
 8013060:	9209      	str	r2, [sp, #36]	; 0x24
 8013062:	f89a 3000 	ldrb.w	r3, [sl]
 8013066:	2b00      	cmp	r3, #0
 8013068:	f000 80a2 	beq.w	80131b0 <_svfiprintf_r+0x1c8>
 801306c:	2300      	movs	r3, #0
 801306e:	f04f 32ff 	mov.w	r2, #4294967295
 8013072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013076:	f10a 0a01 	add.w	sl, sl, #1
 801307a:	9304      	str	r3, [sp, #16]
 801307c:	9307      	str	r3, [sp, #28]
 801307e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013082:	931a      	str	r3, [sp, #104]	; 0x68
 8013084:	4654      	mov	r4, sl
 8013086:	2205      	movs	r2, #5
 8013088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801308c:	4851      	ldr	r0, [pc, #324]	; (80131d4 <_svfiprintf_r+0x1ec>)
 801308e:	f7ed f8b7 	bl	8000200 <memchr>
 8013092:	9a04      	ldr	r2, [sp, #16]
 8013094:	b9d8      	cbnz	r0, 80130ce <_svfiprintf_r+0xe6>
 8013096:	06d0      	lsls	r0, r2, #27
 8013098:	bf44      	itt	mi
 801309a:	2320      	movmi	r3, #32
 801309c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130a0:	0711      	lsls	r1, r2, #28
 80130a2:	bf44      	itt	mi
 80130a4:	232b      	movmi	r3, #43	; 0x2b
 80130a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130aa:	f89a 3000 	ldrb.w	r3, [sl]
 80130ae:	2b2a      	cmp	r3, #42	; 0x2a
 80130b0:	d015      	beq.n	80130de <_svfiprintf_r+0xf6>
 80130b2:	9a07      	ldr	r2, [sp, #28]
 80130b4:	4654      	mov	r4, sl
 80130b6:	2000      	movs	r0, #0
 80130b8:	f04f 0c0a 	mov.w	ip, #10
 80130bc:	4621      	mov	r1, r4
 80130be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130c2:	3b30      	subs	r3, #48	; 0x30
 80130c4:	2b09      	cmp	r3, #9
 80130c6:	d94e      	bls.n	8013166 <_svfiprintf_r+0x17e>
 80130c8:	b1b0      	cbz	r0, 80130f8 <_svfiprintf_r+0x110>
 80130ca:	9207      	str	r2, [sp, #28]
 80130cc:	e014      	b.n	80130f8 <_svfiprintf_r+0x110>
 80130ce:	eba0 0308 	sub.w	r3, r0, r8
 80130d2:	fa09 f303 	lsl.w	r3, r9, r3
 80130d6:	4313      	orrs	r3, r2
 80130d8:	9304      	str	r3, [sp, #16]
 80130da:	46a2      	mov	sl, r4
 80130dc:	e7d2      	b.n	8013084 <_svfiprintf_r+0x9c>
 80130de:	9b03      	ldr	r3, [sp, #12]
 80130e0:	1d19      	adds	r1, r3, #4
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	9103      	str	r1, [sp, #12]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	bfbb      	ittet	lt
 80130ea:	425b      	neglt	r3, r3
 80130ec:	f042 0202 	orrlt.w	r2, r2, #2
 80130f0:	9307      	strge	r3, [sp, #28]
 80130f2:	9307      	strlt	r3, [sp, #28]
 80130f4:	bfb8      	it	lt
 80130f6:	9204      	strlt	r2, [sp, #16]
 80130f8:	7823      	ldrb	r3, [r4, #0]
 80130fa:	2b2e      	cmp	r3, #46	; 0x2e
 80130fc:	d10c      	bne.n	8013118 <_svfiprintf_r+0x130>
 80130fe:	7863      	ldrb	r3, [r4, #1]
 8013100:	2b2a      	cmp	r3, #42	; 0x2a
 8013102:	d135      	bne.n	8013170 <_svfiprintf_r+0x188>
 8013104:	9b03      	ldr	r3, [sp, #12]
 8013106:	1d1a      	adds	r2, r3, #4
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	9203      	str	r2, [sp, #12]
 801310c:	2b00      	cmp	r3, #0
 801310e:	bfb8      	it	lt
 8013110:	f04f 33ff 	movlt.w	r3, #4294967295
 8013114:	3402      	adds	r4, #2
 8013116:	9305      	str	r3, [sp, #20]
 8013118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80131e4 <_svfiprintf_r+0x1fc>
 801311c:	7821      	ldrb	r1, [r4, #0]
 801311e:	2203      	movs	r2, #3
 8013120:	4650      	mov	r0, sl
 8013122:	f7ed f86d 	bl	8000200 <memchr>
 8013126:	b140      	cbz	r0, 801313a <_svfiprintf_r+0x152>
 8013128:	2340      	movs	r3, #64	; 0x40
 801312a:	eba0 000a 	sub.w	r0, r0, sl
 801312e:	fa03 f000 	lsl.w	r0, r3, r0
 8013132:	9b04      	ldr	r3, [sp, #16]
 8013134:	4303      	orrs	r3, r0
 8013136:	3401      	adds	r4, #1
 8013138:	9304      	str	r3, [sp, #16]
 801313a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801313e:	4826      	ldr	r0, [pc, #152]	; (80131d8 <_svfiprintf_r+0x1f0>)
 8013140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013144:	2206      	movs	r2, #6
 8013146:	f7ed f85b 	bl	8000200 <memchr>
 801314a:	2800      	cmp	r0, #0
 801314c:	d038      	beq.n	80131c0 <_svfiprintf_r+0x1d8>
 801314e:	4b23      	ldr	r3, [pc, #140]	; (80131dc <_svfiprintf_r+0x1f4>)
 8013150:	bb1b      	cbnz	r3, 801319a <_svfiprintf_r+0x1b2>
 8013152:	9b03      	ldr	r3, [sp, #12]
 8013154:	3307      	adds	r3, #7
 8013156:	f023 0307 	bic.w	r3, r3, #7
 801315a:	3308      	adds	r3, #8
 801315c:	9303      	str	r3, [sp, #12]
 801315e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013160:	4433      	add	r3, r6
 8013162:	9309      	str	r3, [sp, #36]	; 0x24
 8013164:	e767      	b.n	8013036 <_svfiprintf_r+0x4e>
 8013166:	fb0c 3202 	mla	r2, ip, r2, r3
 801316a:	460c      	mov	r4, r1
 801316c:	2001      	movs	r0, #1
 801316e:	e7a5      	b.n	80130bc <_svfiprintf_r+0xd4>
 8013170:	2300      	movs	r3, #0
 8013172:	3401      	adds	r4, #1
 8013174:	9305      	str	r3, [sp, #20]
 8013176:	4619      	mov	r1, r3
 8013178:	f04f 0c0a 	mov.w	ip, #10
 801317c:	4620      	mov	r0, r4
 801317e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013182:	3a30      	subs	r2, #48	; 0x30
 8013184:	2a09      	cmp	r2, #9
 8013186:	d903      	bls.n	8013190 <_svfiprintf_r+0x1a8>
 8013188:	2b00      	cmp	r3, #0
 801318a:	d0c5      	beq.n	8013118 <_svfiprintf_r+0x130>
 801318c:	9105      	str	r1, [sp, #20]
 801318e:	e7c3      	b.n	8013118 <_svfiprintf_r+0x130>
 8013190:	fb0c 2101 	mla	r1, ip, r1, r2
 8013194:	4604      	mov	r4, r0
 8013196:	2301      	movs	r3, #1
 8013198:	e7f0      	b.n	801317c <_svfiprintf_r+0x194>
 801319a:	ab03      	add	r3, sp, #12
 801319c:	9300      	str	r3, [sp, #0]
 801319e:	462a      	mov	r2, r5
 80131a0:	4b0f      	ldr	r3, [pc, #60]	; (80131e0 <_svfiprintf_r+0x1f8>)
 80131a2:	a904      	add	r1, sp, #16
 80131a4:	4638      	mov	r0, r7
 80131a6:	f7fd fc51 	bl	8010a4c <_printf_float>
 80131aa:	1c42      	adds	r2, r0, #1
 80131ac:	4606      	mov	r6, r0
 80131ae:	d1d6      	bne.n	801315e <_svfiprintf_r+0x176>
 80131b0:	89ab      	ldrh	r3, [r5, #12]
 80131b2:	065b      	lsls	r3, r3, #25
 80131b4:	f53f af2c 	bmi.w	8013010 <_svfiprintf_r+0x28>
 80131b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131ba:	b01d      	add	sp, #116	; 0x74
 80131bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c0:	ab03      	add	r3, sp, #12
 80131c2:	9300      	str	r3, [sp, #0]
 80131c4:	462a      	mov	r2, r5
 80131c6:	4b06      	ldr	r3, [pc, #24]	; (80131e0 <_svfiprintf_r+0x1f8>)
 80131c8:	a904      	add	r1, sp, #16
 80131ca:	4638      	mov	r0, r7
 80131cc:	f7fd fee2 	bl	8010f94 <_printf_i>
 80131d0:	e7eb      	b.n	80131aa <_svfiprintf_r+0x1c2>
 80131d2:	bf00      	nop
 80131d4:	080143d4 	.word	0x080143d4
 80131d8:	080143de 	.word	0x080143de
 80131dc:	08010a4d 	.word	0x08010a4d
 80131e0:	08012f31 	.word	0x08012f31
 80131e4:	080143da 	.word	0x080143da

080131e8 <__sfputc_r>:
 80131e8:	6893      	ldr	r3, [r2, #8]
 80131ea:	3b01      	subs	r3, #1
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	b410      	push	{r4}
 80131f0:	6093      	str	r3, [r2, #8]
 80131f2:	da08      	bge.n	8013206 <__sfputc_r+0x1e>
 80131f4:	6994      	ldr	r4, [r2, #24]
 80131f6:	42a3      	cmp	r3, r4
 80131f8:	db01      	blt.n	80131fe <__sfputc_r+0x16>
 80131fa:	290a      	cmp	r1, #10
 80131fc:	d103      	bne.n	8013206 <__sfputc_r+0x1e>
 80131fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013202:	f7fe b991 	b.w	8011528 <__swbuf_r>
 8013206:	6813      	ldr	r3, [r2, #0]
 8013208:	1c58      	adds	r0, r3, #1
 801320a:	6010      	str	r0, [r2, #0]
 801320c:	7019      	strb	r1, [r3, #0]
 801320e:	4608      	mov	r0, r1
 8013210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013214:	4770      	bx	lr

08013216 <__sfputs_r>:
 8013216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013218:	4606      	mov	r6, r0
 801321a:	460f      	mov	r7, r1
 801321c:	4614      	mov	r4, r2
 801321e:	18d5      	adds	r5, r2, r3
 8013220:	42ac      	cmp	r4, r5
 8013222:	d101      	bne.n	8013228 <__sfputs_r+0x12>
 8013224:	2000      	movs	r0, #0
 8013226:	e007      	b.n	8013238 <__sfputs_r+0x22>
 8013228:	f814 1b01 	ldrb.w	r1, [r4], #1
 801322c:	463a      	mov	r2, r7
 801322e:	4630      	mov	r0, r6
 8013230:	f7ff ffda 	bl	80131e8 <__sfputc_r>
 8013234:	1c43      	adds	r3, r0, #1
 8013236:	d1f3      	bne.n	8013220 <__sfputs_r+0xa>
 8013238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801323c <_vfiprintf_r>:
 801323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013240:	460d      	mov	r5, r1
 8013242:	b09d      	sub	sp, #116	; 0x74
 8013244:	4614      	mov	r4, r2
 8013246:	4698      	mov	r8, r3
 8013248:	4606      	mov	r6, r0
 801324a:	b118      	cbz	r0, 8013254 <_vfiprintf_r+0x18>
 801324c:	6983      	ldr	r3, [r0, #24]
 801324e:	b90b      	cbnz	r3, 8013254 <_vfiprintf_r+0x18>
 8013250:	f7ff f9be 	bl	80125d0 <__sinit>
 8013254:	4b89      	ldr	r3, [pc, #548]	; (801347c <_vfiprintf_r+0x240>)
 8013256:	429d      	cmp	r5, r3
 8013258:	d11b      	bne.n	8013292 <_vfiprintf_r+0x56>
 801325a:	6875      	ldr	r5, [r6, #4]
 801325c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801325e:	07d9      	lsls	r1, r3, #31
 8013260:	d405      	bmi.n	801326e <_vfiprintf_r+0x32>
 8013262:	89ab      	ldrh	r3, [r5, #12]
 8013264:	059a      	lsls	r2, r3, #22
 8013266:	d402      	bmi.n	801326e <_vfiprintf_r+0x32>
 8013268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801326a:	f7ff fa54 	bl	8012716 <__retarget_lock_acquire_recursive>
 801326e:	89ab      	ldrh	r3, [r5, #12]
 8013270:	071b      	lsls	r3, r3, #28
 8013272:	d501      	bpl.n	8013278 <_vfiprintf_r+0x3c>
 8013274:	692b      	ldr	r3, [r5, #16]
 8013276:	b9eb      	cbnz	r3, 80132b4 <_vfiprintf_r+0x78>
 8013278:	4629      	mov	r1, r5
 801327a:	4630      	mov	r0, r6
 801327c:	f7fe f9a6 	bl	80115cc <__swsetup_r>
 8013280:	b1c0      	cbz	r0, 80132b4 <_vfiprintf_r+0x78>
 8013282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013284:	07dc      	lsls	r4, r3, #31
 8013286:	d50e      	bpl.n	80132a6 <_vfiprintf_r+0x6a>
 8013288:	f04f 30ff 	mov.w	r0, #4294967295
 801328c:	b01d      	add	sp, #116	; 0x74
 801328e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013292:	4b7b      	ldr	r3, [pc, #492]	; (8013480 <_vfiprintf_r+0x244>)
 8013294:	429d      	cmp	r5, r3
 8013296:	d101      	bne.n	801329c <_vfiprintf_r+0x60>
 8013298:	68b5      	ldr	r5, [r6, #8]
 801329a:	e7df      	b.n	801325c <_vfiprintf_r+0x20>
 801329c:	4b79      	ldr	r3, [pc, #484]	; (8013484 <_vfiprintf_r+0x248>)
 801329e:	429d      	cmp	r5, r3
 80132a0:	bf08      	it	eq
 80132a2:	68f5      	ldreq	r5, [r6, #12]
 80132a4:	e7da      	b.n	801325c <_vfiprintf_r+0x20>
 80132a6:	89ab      	ldrh	r3, [r5, #12]
 80132a8:	0598      	lsls	r0, r3, #22
 80132aa:	d4ed      	bmi.n	8013288 <_vfiprintf_r+0x4c>
 80132ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132ae:	f7ff fa33 	bl	8012718 <__retarget_lock_release_recursive>
 80132b2:	e7e9      	b.n	8013288 <_vfiprintf_r+0x4c>
 80132b4:	2300      	movs	r3, #0
 80132b6:	9309      	str	r3, [sp, #36]	; 0x24
 80132b8:	2320      	movs	r3, #32
 80132ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80132be:	f8cd 800c 	str.w	r8, [sp, #12]
 80132c2:	2330      	movs	r3, #48	; 0x30
 80132c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013488 <_vfiprintf_r+0x24c>
 80132c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80132cc:	f04f 0901 	mov.w	r9, #1
 80132d0:	4623      	mov	r3, r4
 80132d2:	469a      	mov	sl, r3
 80132d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132d8:	b10a      	cbz	r2, 80132de <_vfiprintf_r+0xa2>
 80132da:	2a25      	cmp	r2, #37	; 0x25
 80132dc:	d1f9      	bne.n	80132d2 <_vfiprintf_r+0x96>
 80132de:	ebba 0b04 	subs.w	fp, sl, r4
 80132e2:	d00b      	beq.n	80132fc <_vfiprintf_r+0xc0>
 80132e4:	465b      	mov	r3, fp
 80132e6:	4622      	mov	r2, r4
 80132e8:	4629      	mov	r1, r5
 80132ea:	4630      	mov	r0, r6
 80132ec:	f7ff ff93 	bl	8013216 <__sfputs_r>
 80132f0:	3001      	adds	r0, #1
 80132f2:	f000 80aa 	beq.w	801344a <_vfiprintf_r+0x20e>
 80132f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132f8:	445a      	add	r2, fp
 80132fa:	9209      	str	r2, [sp, #36]	; 0x24
 80132fc:	f89a 3000 	ldrb.w	r3, [sl]
 8013300:	2b00      	cmp	r3, #0
 8013302:	f000 80a2 	beq.w	801344a <_vfiprintf_r+0x20e>
 8013306:	2300      	movs	r3, #0
 8013308:	f04f 32ff 	mov.w	r2, #4294967295
 801330c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013310:	f10a 0a01 	add.w	sl, sl, #1
 8013314:	9304      	str	r3, [sp, #16]
 8013316:	9307      	str	r3, [sp, #28]
 8013318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801331c:	931a      	str	r3, [sp, #104]	; 0x68
 801331e:	4654      	mov	r4, sl
 8013320:	2205      	movs	r2, #5
 8013322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013326:	4858      	ldr	r0, [pc, #352]	; (8013488 <_vfiprintf_r+0x24c>)
 8013328:	f7ec ff6a 	bl	8000200 <memchr>
 801332c:	9a04      	ldr	r2, [sp, #16]
 801332e:	b9d8      	cbnz	r0, 8013368 <_vfiprintf_r+0x12c>
 8013330:	06d1      	lsls	r1, r2, #27
 8013332:	bf44      	itt	mi
 8013334:	2320      	movmi	r3, #32
 8013336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801333a:	0713      	lsls	r3, r2, #28
 801333c:	bf44      	itt	mi
 801333e:	232b      	movmi	r3, #43	; 0x2b
 8013340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013344:	f89a 3000 	ldrb.w	r3, [sl]
 8013348:	2b2a      	cmp	r3, #42	; 0x2a
 801334a:	d015      	beq.n	8013378 <_vfiprintf_r+0x13c>
 801334c:	9a07      	ldr	r2, [sp, #28]
 801334e:	4654      	mov	r4, sl
 8013350:	2000      	movs	r0, #0
 8013352:	f04f 0c0a 	mov.w	ip, #10
 8013356:	4621      	mov	r1, r4
 8013358:	f811 3b01 	ldrb.w	r3, [r1], #1
 801335c:	3b30      	subs	r3, #48	; 0x30
 801335e:	2b09      	cmp	r3, #9
 8013360:	d94e      	bls.n	8013400 <_vfiprintf_r+0x1c4>
 8013362:	b1b0      	cbz	r0, 8013392 <_vfiprintf_r+0x156>
 8013364:	9207      	str	r2, [sp, #28]
 8013366:	e014      	b.n	8013392 <_vfiprintf_r+0x156>
 8013368:	eba0 0308 	sub.w	r3, r0, r8
 801336c:	fa09 f303 	lsl.w	r3, r9, r3
 8013370:	4313      	orrs	r3, r2
 8013372:	9304      	str	r3, [sp, #16]
 8013374:	46a2      	mov	sl, r4
 8013376:	e7d2      	b.n	801331e <_vfiprintf_r+0xe2>
 8013378:	9b03      	ldr	r3, [sp, #12]
 801337a:	1d19      	adds	r1, r3, #4
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	9103      	str	r1, [sp, #12]
 8013380:	2b00      	cmp	r3, #0
 8013382:	bfbb      	ittet	lt
 8013384:	425b      	neglt	r3, r3
 8013386:	f042 0202 	orrlt.w	r2, r2, #2
 801338a:	9307      	strge	r3, [sp, #28]
 801338c:	9307      	strlt	r3, [sp, #28]
 801338e:	bfb8      	it	lt
 8013390:	9204      	strlt	r2, [sp, #16]
 8013392:	7823      	ldrb	r3, [r4, #0]
 8013394:	2b2e      	cmp	r3, #46	; 0x2e
 8013396:	d10c      	bne.n	80133b2 <_vfiprintf_r+0x176>
 8013398:	7863      	ldrb	r3, [r4, #1]
 801339a:	2b2a      	cmp	r3, #42	; 0x2a
 801339c:	d135      	bne.n	801340a <_vfiprintf_r+0x1ce>
 801339e:	9b03      	ldr	r3, [sp, #12]
 80133a0:	1d1a      	adds	r2, r3, #4
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	9203      	str	r2, [sp, #12]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	bfb8      	it	lt
 80133aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80133ae:	3402      	adds	r4, #2
 80133b0:	9305      	str	r3, [sp, #20]
 80133b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013498 <_vfiprintf_r+0x25c>
 80133b6:	7821      	ldrb	r1, [r4, #0]
 80133b8:	2203      	movs	r2, #3
 80133ba:	4650      	mov	r0, sl
 80133bc:	f7ec ff20 	bl	8000200 <memchr>
 80133c0:	b140      	cbz	r0, 80133d4 <_vfiprintf_r+0x198>
 80133c2:	2340      	movs	r3, #64	; 0x40
 80133c4:	eba0 000a 	sub.w	r0, r0, sl
 80133c8:	fa03 f000 	lsl.w	r0, r3, r0
 80133cc:	9b04      	ldr	r3, [sp, #16]
 80133ce:	4303      	orrs	r3, r0
 80133d0:	3401      	adds	r4, #1
 80133d2:	9304      	str	r3, [sp, #16]
 80133d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133d8:	482c      	ldr	r0, [pc, #176]	; (801348c <_vfiprintf_r+0x250>)
 80133da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80133de:	2206      	movs	r2, #6
 80133e0:	f7ec ff0e 	bl	8000200 <memchr>
 80133e4:	2800      	cmp	r0, #0
 80133e6:	d03f      	beq.n	8013468 <_vfiprintf_r+0x22c>
 80133e8:	4b29      	ldr	r3, [pc, #164]	; (8013490 <_vfiprintf_r+0x254>)
 80133ea:	bb1b      	cbnz	r3, 8013434 <_vfiprintf_r+0x1f8>
 80133ec:	9b03      	ldr	r3, [sp, #12]
 80133ee:	3307      	adds	r3, #7
 80133f0:	f023 0307 	bic.w	r3, r3, #7
 80133f4:	3308      	adds	r3, #8
 80133f6:	9303      	str	r3, [sp, #12]
 80133f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133fa:	443b      	add	r3, r7
 80133fc:	9309      	str	r3, [sp, #36]	; 0x24
 80133fe:	e767      	b.n	80132d0 <_vfiprintf_r+0x94>
 8013400:	fb0c 3202 	mla	r2, ip, r2, r3
 8013404:	460c      	mov	r4, r1
 8013406:	2001      	movs	r0, #1
 8013408:	e7a5      	b.n	8013356 <_vfiprintf_r+0x11a>
 801340a:	2300      	movs	r3, #0
 801340c:	3401      	adds	r4, #1
 801340e:	9305      	str	r3, [sp, #20]
 8013410:	4619      	mov	r1, r3
 8013412:	f04f 0c0a 	mov.w	ip, #10
 8013416:	4620      	mov	r0, r4
 8013418:	f810 2b01 	ldrb.w	r2, [r0], #1
 801341c:	3a30      	subs	r2, #48	; 0x30
 801341e:	2a09      	cmp	r2, #9
 8013420:	d903      	bls.n	801342a <_vfiprintf_r+0x1ee>
 8013422:	2b00      	cmp	r3, #0
 8013424:	d0c5      	beq.n	80133b2 <_vfiprintf_r+0x176>
 8013426:	9105      	str	r1, [sp, #20]
 8013428:	e7c3      	b.n	80133b2 <_vfiprintf_r+0x176>
 801342a:	fb0c 2101 	mla	r1, ip, r1, r2
 801342e:	4604      	mov	r4, r0
 8013430:	2301      	movs	r3, #1
 8013432:	e7f0      	b.n	8013416 <_vfiprintf_r+0x1da>
 8013434:	ab03      	add	r3, sp, #12
 8013436:	9300      	str	r3, [sp, #0]
 8013438:	462a      	mov	r2, r5
 801343a:	4b16      	ldr	r3, [pc, #88]	; (8013494 <_vfiprintf_r+0x258>)
 801343c:	a904      	add	r1, sp, #16
 801343e:	4630      	mov	r0, r6
 8013440:	f7fd fb04 	bl	8010a4c <_printf_float>
 8013444:	4607      	mov	r7, r0
 8013446:	1c78      	adds	r0, r7, #1
 8013448:	d1d6      	bne.n	80133f8 <_vfiprintf_r+0x1bc>
 801344a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801344c:	07d9      	lsls	r1, r3, #31
 801344e:	d405      	bmi.n	801345c <_vfiprintf_r+0x220>
 8013450:	89ab      	ldrh	r3, [r5, #12]
 8013452:	059a      	lsls	r2, r3, #22
 8013454:	d402      	bmi.n	801345c <_vfiprintf_r+0x220>
 8013456:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013458:	f7ff f95e 	bl	8012718 <__retarget_lock_release_recursive>
 801345c:	89ab      	ldrh	r3, [r5, #12]
 801345e:	065b      	lsls	r3, r3, #25
 8013460:	f53f af12 	bmi.w	8013288 <_vfiprintf_r+0x4c>
 8013464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013466:	e711      	b.n	801328c <_vfiprintf_r+0x50>
 8013468:	ab03      	add	r3, sp, #12
 801346a:	9300      	str	r3, [sp, #0]
 801346c:	462a      	mov	r2, r5
 801346e:	4b09      	ldr	r3, [pc, #36]	; (8013494 <_vfiprintf_r+0x258>)
 8013470:	a904      	add	r1, sp, #16
 8013472:	4630      	mov	r0, r6
 8013474:	f7fd fd8e 	bl	8010f94 <_printf_i>
 8013478:	e7e4      	b.n	8013444 <_vfiprintf_r+0x208>
 801347a:	bf00      	nop
 801347c:	0801423c 	.word	0x0801423c
 8013480:	0801425c 	.word	0x0801425c
 8013484:	0801421c 	.word	0x0801421c
 8013488:	080143d4 	.word	0x080143d4
 801348c:	080143de 	.word	0x080143de
 8013490:	08010a4d 	.word	0x08010a4d
 8013494:	08013217 	.word	0x08013217
 8013498:	080143da 	.word	0x080143da

0801349c <__sread>:
 801349c:	b510      	push	{r4, lr}
 801349e:	460c      	mov	r4, r1
 80134a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134a4:	f000 f920 	bl	80136e8 <_read_r>
 80134a8:	2800      	cmp	r0, #0
 80134aa:	bfab      	itete	ge
 80134ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80134ae:	89a3      	ldrhlt	r3, [r4, #12]
 80134b0:	181b      	addge	r3, r3, r0
 80134b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80134b6:	bfac      	ite	ge
 80134b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80134ba:	81a3      	strhlt	r3, [r4, #12]
 80134bc:	bd10      	pop	{r4, pc}

080134be <__swrite>:
 80134be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134c2:	461f      	mov	r7, r3
 80134c4:	898b      	ldrh	r3, [r1, #12]
 80134c6:	05db      	lsls	r3, r3, #23
 80134c8:	4605      	mov	r5, r0
 80134ca:	460c      	mov	r4, r1
 80134cc:	4616      	mov	r6, r2
 80134ce:	d505      	bpl.n	80134dc <__swrite+0x1e>
 80134d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134d4:	2302      	movs	r3, #2
 80134d6:	2200      	movs	r2, #0
 80134d8:	f000 f898 	bl	801360c <_lseek_r>
 80134dc:	89a3      	ldrh	r3, [r4, #12]
 80134de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80134e6:	81a3      	strh	r3, [r4, #12]
 80134e8:	4632      	mov	r2, r6
 80134ea:	463b      	mov	r3, r7
 80134ec:	4628      	mov	r0, r5
 80134ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134f2:	f000 b817 	b.w	8013524 <_write_r>

080134f6 <__sseek>:
 80134f6:	b510      	push	{r4, lr}
 80134f8:	460c      	mov	r4, r1
 80134fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134fe:	f000 f885 	bl	801360c <_lseek_r>
 8013502:	1c43      	adds	r3, r0, #1
 8013504:	89a3      	ldrh	r3, [r4, #12]
 8013506:	bf15      	itete	ne
 8013508:	6560      	strne	r0, [r4, #84]	; 0x54
 801350a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801350e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013512:	81a3      	strheq	r3, [r4, #12]
 8013514:	bf18      	it	ne
 8013516:	81a3      	strhne	r3, [r4, #12]
 8013518:	bd10      	pop	{r4, pc}

0801351a <__sclose>:
 801351a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801351e:	f000 b831 	b.w	8013584 <_close_r>
	...

08013524 <_write_r>:
 8013524:	b538      	push	{r3, r4, r5, lr}
 8013526:	4d07      	ldr	r5, [pc, #28]	; (8013544 <_write_r+0x20>)
 8013528:	4604      	mov	r4, r0
 801352a:	4608      	mov	r0, r1
 801352c:	4611      	mov	r1, r2
 801352e:	2200      	movs	r2, #0
 8013530:	602a      	str	r2, [r5, #0]
 8013532:	461a      	mov	r2, r3
 8013534:	f7ef fcd8 	bl	8002ee8 <_write>
 8013538:	1c43      	adds	r3, r0, #1
 801353a:	d102      	bne.n	8013542 <_write_r+0x1e>
 801353c:	682b      	ldr	r3, [r5, #0]
 801353e:	b103      	cbz	r3, 8013542 <_write_r+0x1e>
 8013540:	6023      	str	r3, [r4, #0]
 8013542:	bd38      	pop	{r3, r4, r5, pc}
 8013544:	20003510 	.word	0x20003510

08013548 <__assert_func>:
 8013548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801354a:	4614      	mov	r4, r2
 801354c:	461a      	mov	r2, r3
 801354e:	4b09      	ldr	r3, [pc, #36]	; (8013574 <__assert_func+0x2c>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	4605      	mov	r5, r0
 8013554:	68d8      	ldr	r0, [r3, #12]
 8013556:	b14c      	cbz	r4, 801356c <__assert_func+0x24>
 8013558:	4b07      	ldr	r3, [pc, #28]	; (8013578 <__assert_func+0x30>)
 801355a:	9100      	str	r1, [sp, #0]
 801355c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013560:	4906      	ldr	r1, [pc, #24]	; (801357c <__assert_func+0x34>)
 8013562:	462b      	mov	r3, r5
 8013564:	f000 f81e 	bl	80135a4 <fiprintf>
 8013568:	f7fd f894 	bl	8010694 <abort>
 801356c:	4b04      	ldr	r3, [pc, #16]	; (8013580 <__assert_func+0x38>)
 801356e:	461c      	mov	r4, r3
 8013570:	e7f3      	b.n	801355a <__assert_func+0x12>
 8013572:	bf00      	nop
 8013574:	2000004c 	.word	0x2000004c
 8013578:	080143e5 	.word	0x080143e5
 801357c:	080143f2 	.word	0x080143f2
 8013580:	08014420 	.word	0x08014420

08013584 <_close_r>:
 8013584:	b538      	push	{r3, r4, r5, lr}
 8013586:	4d06      	ldr	r5, [pc, #24]	; (80135a0 <_close_r+0x1c>)
 8013588:	2300      	movs	r3, #0
 801358a:	4604      	mov	r4, r0
 801358c:	4608      	mov	r0, r1
 801358e:	602b      	str	r3, [r5, #0]
 8013590:	f7f0 fa65 	bl	8003a5e <_close>
 8013594:	1c43      	adds	r3, r0, #1
 8013596:	d102      	bne.n	801359e <_close_r+0x1a>
 8013598:	682b      	ldr	r3, [r5, #0]
 801359a:	b103      	cbz	r3, 801359e <_close_r+0x1a>
 801359c:	6023      	str	r3, [r4, #0]
 801359e:	bd38      	pop	{r3, r4, r5, pc}
 80135a0:	20003510 	.word	0x20003510

080135a4 <fiprintf>:
 80135a4:	b40e      	push	{r1, r2, r3}
 80135a6:	b503      	push	{r0, r1, lr}
 80135a8:	4601      	mov	r1, r0
 80135aa:	ab03      	add	r3, sp, #12
 80135ac:	4805      	ldr	r0, [pc, #20]	; (80135c4 <fiprintf+0x20>)
 80135ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80135b2:	6800      	ldr	r0, [r0, #0]
 80135b4:	9301      	str	r3, [sp, #4]
 80135b6:	f7ff fe41 	bl	801323c <_vfiprintf_r>
 80135ba:	b002      	add	sp, #8
 80135bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80135c0:	b003      	add	sp, #12
 80135c2:	4770      	bx	lr
 80135c4:	2000004c 	.word	0x2000004c

080135c8 <_fstat_r>:
 80135c8:	b538      	push	{r3, r4, r5, lr}
 80135ca:	4d07      	ldr	r5, [pc, #28]	; (80135e8 <_fstat_r+0x20>)
 80135cc:	2300      	movs	r3, #0
 80135ce:	4604      	mov	r4, r0
 80135d0:	4608      	mov	r0, r1
 80135d2:	4611      	mov	r1, r2
 80135d4:	602b      	str	r3, [r5, #0]
 80135d6:	f7f0 fa4e 	bl	8003a76 <_fstat>
 80135da:	1c43      	adds	r3, r0, #1
 80135dc:	d102      	bne.n	80135e4 <_fstat_r+0x1c>
 80135de:	682b      	ldr	r3, [r5, #0]
 80135e0:	b103      	cbz	r3, 80135e4 <_fstat_r+0x1c>
 80135e2:	6023      	str	r3, [r4, #0]
 80135e4:	bd38      	pop	{r3, r4, r5, pc}
 80135e6:	bf00      	nop
 80135e8:	20003510 	.word	0x20003510

080135ec <_isatty_r>:
 80135ec:	b538      	push	{r3, r4, r5, lr}
 80135ee:	4d06      	ldr	r5, [pc, #24]	; (8013608 <_isatty_r+0x1c>)
 80135f0:	2300      	movs	r3, #0
 80135f2:	4604      	mov	r4, r0
 80135f4:	4608      	mov	r0, r1
 80135f6:	602b      	str	r3, [r5, #0]
 80135f8:	f7f0 fa4d 	bl	8003a96 <_isatty>
 80135fc:	1c43      	adds	r3, r0, #1
 80135fe:	d102      	bne.n	8013606 <_isatty_r+0x1a>
 8013600:	682b      	ldr	r3, [r5, #0]
 8013602:	b103      	cbz	r3, 8013606 <_isatty_r+0x1a>
 8013604:	6023      	str	r3, [r4, #0]
 8013606:	bd38      	pop	{r3, r4, r5, pc}
 8013608:	20003510 	.word	0x20003510

0801360c <_lseek_r>:
 801360c:	b538      	push	{r3, r4, r5, lr}
 801360e:	4d07      	ldr	r5, [pc, #28]	; (801362c <_lseek_r+0x20>)
 8013610:	4604      	mov	r4, r0
 8013612:	4608      	mov	r0, r1
 8013614:	4611      	mov	r1, r2
 8013616:	2200      	movs	r2, #0
 8013618:	602a      	str	r2, [r5, #0]
 801361a:	461a      	mov	r2, r3
 801361c:	f7f0 fa46 	bl	8003aac <_lseek>
 8013620:	1c43      	adds	r3, r0, #1
 8013622:	d102      	bne.n	801362a <_lseek_r+0x1e>
 8013624:	682b      	ldr	r3, [r5, #0]
 8013626:	b103      	cbz	r3, 801362a <_lseek_r+0x1e>
 8013628:	6023      	str	r3, [r4, #0]
 801362a:	bd38      	pop	{r3, r4, r5, pc}
 801362c:	20003510 	.word	0x20003510

08013630 <__ascii_mbtowc>:
 8013630:	b082      	sub	sp, #8
 8013632:	b901      	cbnz	r1, 8013636 <__ascii_mbtowc+0x6>
 8013634:	a901      	add	r1, sp, #4
 8013636:	b142      	cbz	r2, 801364a <__ascii_mbtowc+0x1a>
 8013638:	b14b      	cbz	r3, 801364e <__ascii_mbtowc+0x1e>
 801363a:	7813      	ldrb	r3, [r2, #0]
 801363c:	600b      	str	r3, [r1, #0]
 801363e:	7812      	ldrb	r2, [r2, #0]
 8013640:	1e10      	subs	r0, r2, #0
 8013642:	bf18      	it	ne
 8013644:	2001      	movne	r0, #1
 8013646:	b002      	add	sp, #8
 8013648:	4770      	bx	lr
 801364a:	4610      	mov	r0, r2
 801364c:	e7fb      	b.n	8013646 <__ascii_mbtowc+0x16>
 801364e:	f06f 0001 	mvn.w	r0, #1
 8013652:	e7f8      	b.n	8013646 <__ascii_mbtowc+0x16>

08013654 <memmove>:
 8013654:	4288      	cmp	r0, r1
 8013656:	b510      	push	{r4, lr}
 8013658:	eb01 0402 	add.w	r4, r1, r2
 801365c:	d902      	bls.n	8013664 <memmove+0x10>
 801365e:	4284      	cmp	r4, r0
 8013660:	4623      	mov	r3, r4
 8013662:	d807      	bhi.n	8013674 <memmove+0x20>
 8013664:	1e43      	subs	r3, r0, #1
 8013666:	42a1      	cmp	r1, r4
 8013668:	d008      	beq.n	801367c <memmove+0x28>
 801366a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801366e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013672:	e7f8      	b.n	8013666 <memmove+0x12>
 8013674:	4402      	add	r2, r0
 8013676:	4601      	mov	r1, r0
 8013678:	428a      	cmp	r2, r1
 801367a:	d100      	bne.n	801367e <memmove+0x2a>
 801367c:	bd10      	pop	{r4, pc}
 801367e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013686:	e7f7      	b.n	8013678 <memmove+0x24>

08013688 <_realloc_r>:
 8013688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801368c:	4680      	mov	r8, r0
 801368e:	4614      	mov	r4, r2
 8013690:	460e      	mov	r6, r1
 8013692:	b921      	cbnz	r1, 801369e <_realloc_r+0x16>
 8013694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013698:	4611      	mov	r1, r2
 801369a:	f7fd b8c3 	b.w	8010824 <_malloc_r>
 801369e:	b92a      	cbnz	r2, 80136ac <_realloc_r+0x24>
 80136a0:	f7fd f854 	bl	801074c <_free_r>
 80136a4:	4625      	mov	r5, r4
 80136a6:	4628      	mov	r0, r5
 80136a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136ac:	f000 f83b 	bl	8013726 <_malloc_usable_size_r>
 80136b0:	4284      	cmp	r4, r0
 80136b2:	4607      	mov	r7, r0
 80136b4:	d802      	bhi.n	80136bc <_realloc_r+0x34>
 80136b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80136ba:	d812      	bhi.n	80136e2 <_realloc_r+0x5a>
 80136bc:	4621      	mov	r1, r4
 80136be:	4640      	mov	r0, r8
 80136c0:	f7fd f8b0 	bl	8010824 <_malloc_r>
 80136c4:	4605      	mov	r5, r0
 80136c6:	2800      	cmp	r0, #0
 80136c8:	d0ed      	beq.n	80136a6 <_realloc_r+0x1e>
 80136ca:	42bc      	cmp	r4, r7
 80136cc:	4622      	mov	r2, r4
 80136ce:	4631      	mov	r1, r6
 80136d0:	bf28      	it	cs
 80136d2:	463a      	movcs	r2, r7
 80136d4:	f7fd f824 	bl	8010720 <memcpy>
 80136d8:	4631      	mov	r1, r6
 80136da:	4640      	mov	r0, r8
 80136dc:	f7fd f836 	bl	801074c <_free_r>
 80136e0:	e7e1      	b.n	80136a6 <_realloc_r+0x1e>
 80136e2:	4635      	mov	r5, r6
 80136e4:	e7df      	b.n	80136a6 <_realloc_r+0x1e>
	...

080136e8 <_read_r>:
 80136e8:	b538      	push	{r3, r4, r5, lr}
 80136ea:	4d07      	ldr	r5, [pc, #28]	; (8013708 <_read_r+0x20>)
 80136ec:	4604      	mov	r4, r0
 80136ee:	4608      	mov	r0, r1
 80136f0:	4611      	mov	r1, r2
 80136f2:	2200      	movs	r2, #0
 80136f4:	602a      	str	r2, [r5, #0]
 80136f6:	461a      	mov	r2, r3
 80136f8:	f7f0 f994 	bl	8003a24 <_read>
 80136fc:	1c43      	adds	r3, r0, #1
 80136fe:	d102      	bne.n	8013706 <_read_r+0x1e>
 8013700:	682b      	ldr	r3, [r5, #0]
 8013702:	b103      	cbz	r3, 8013706 <_read_r+0x1e>
 8013704:	6023      	str	r3, [r4, #0]
 8013706:	bd38      	pop	{r3, r4, r5, pc}
 8013708:	20003510 	.word	0x20003510

0801370c <__ascii_wctomb>:
 801370c:	b149      	cbz	r1, 8013722 <__ascii_wctomb+0x16>
 801370e:	2aff      	cmp	r2, #255	; 0xff
 8013710:	bf85      	ittet	hi
 8013712:	238a      	movhi	r3, #138	; 0x8a
 8013714:	6003      	strhi	r3, [r0, #0]
 8013716:	700a      	strbls	r2, [r1, #0]
 8013718:	f04f 30ff 	movhi.w	r0, #4294967295
 801371c:	bf98      	it	ls
 801371e:	2001      	movls	r0, #1
 8013720:	4770      	bx	lr
 8013722:	4608      	mov	r0, r1
 8013724:	4770      	bx	lr

08013726 <_malloc_usable_size_r>:
 8013726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801372a:	1f18      	subs	r0, r3, #4
 801372c:	2b00      	cmp	r3, #0
 801372e:	bfbc      	itt	lt
 8013730:	580b      	ldrlt	r3, [r1, r0]
 8013732:	18c0      	addlt	r0, r0, r3
 8013734:	4770      	bx	lr
	...

08013738 <_init>:
 8013738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801373a:	bf00      	nop
 801373c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801373e:	bc08      	pop	{r3}
 8013740:	469e      	mov	lr, r3
 8013742:	4770      	bx	lr

08013744 <_fini>:
 8013744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013746:	bf00      	nop
 8013748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801374a:	bc08      	pop	{r3}
 801374c:	469e      	mov	lr, r3
 801374e:	4770      	bx	lr
